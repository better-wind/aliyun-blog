<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis Blog</title>
  <subtitle>Louis/十年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luyi10year.github.io/"/>
  <updated>2017-03-01T04:18:21.708Z</updated>
  <id>https://luyi10year.github.io/</id>
  
  <author>
    <name>Louis</name>
    <email>wjf550@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Vue的CPS后台</title>
    <link href="https://luyi10year.github.io/2017/02/27/vue-xq-cps/"/>
    <id>https://luyi10year.github.io/2017/02/27/vue-xq-cps/</id>
    <published>2017-02-27T08:12:34.000Z</published>
    <updated>2017-03-01T04:18:21.708Z</updated>
    
    <content type="html"><![CDATA[<p>上周结束了在想去的最后一个项目<br>公众号联盟的推广后台<br><a id="more"></a></p>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>vue<br>应该不需要介绍<br>vuex<br>巴拉巴拉巴拉<br>vue-router<br>。。。。<br>webpack<br>这次用的版本是2.x跟1.x的配置还是有点出入</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>将整个后台按功能抽离成单独的模块<br>header 模块<br>footer 模块<br>menu 模块<br>page 分页模块<br>and 具体功能模块<br>balabalabalabala~~~<br>其实也没什么好说的。。。</p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>还是有不少值得注意的地方的</p>
<blockquote>
<p>路由切换中页面的刷新<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//监听路由变化</span></div><div class="line">watch: &#123;</div><div class="line">      <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (to.fullPath !== <span class="keyword">from</span>.fullPath) &#123;</div><div class="line">          <span class="keyword">this</span>.pageInt() <span class="comment">// 刷新处理</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>store交互数据的延迟<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回异步操作</span></div><div class="line"><span class="comment">//actions</span></div><div class="line">getOrder (&#123;commit&#125;, data) &#123;</div><div class="line">    <span class="keyword">const</span> opts = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">      <span class="attr">url</span>: <span class="string">'/union/order/list'</span>,</div><div class="line">      <span class="attr">data</span>: data</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fetchLoading(commit, <span class="string">'SET_ORDER'</span>, opts)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> fetchLoading = <span class="function">(<span class="params">commit, fn, opts</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    beginLoading(commit)</div><div class="line">    Util.fetch(opts)</div><div class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">        stopLoading(commit)</div><div class="line">        <span class="keyword">if</span> (fn) &#123;</div><div class="line">          commit(fn, response)</div><div class="line">          resolve()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          resolve(response)</div><div class="line">        &#125;</div><div class="line">      &#125;, error =&gt; &#123;</div><div class="line">        stopLoading(commit)</div><div class="line">        <span class="keyword">const</span> config = &#123;</div><div class="line">          <span class="attr">isShow</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">isToast</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">toastConfig</span>: &#123;</div><div class="line">            <span class="attr">toastMsg</span>: <span class="string">'系统繁忙,请稍后再试'</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        commit(<span class="string">'SET_POP'</span>, config)</div><div class="line">        <span class="built_in">console</span>.error(error)</div><div class="line">      &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//模块中调用actions中方法</span></div><div class="line"><span class="keyword">this</span>.getOrder(opts)</div><div class="line">          .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.getPaging(opts)</div><div class="line">          &#125;)</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>估计这周就离职了<br>额，就这样吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周结束了在想去的最后一个项目&lt;br&gt;公众号联盟的推广后台&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://luyi10year.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="https://luyi10year.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Weex</title>
    <link href="https://luyi10year.github.io/2017/02/21/alibab-weex/"/>
    <id>https://luyi10year.github.io/2017/02/21/alibab-weex/</id>
    <published>2017-02-21T08:09:34.000Z</published>
    <updated>2017-02-27T08:10:49.122Z</updated>
    
    <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;/p&gt;

    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
      <category term="Weex" scheme="https://luyi10year.github.io/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Rax</title>
    <link href="https://luyi10year.github.io/2017/02/17/alibab-react-rax/"/>
    <id>https://luyi10year.github.io/2017/02/17/alibab-react-rax/</id>
    <published>2017-02-17T05:01:30.000Z</published>
    <updated>2017-02-27T11:31:38.841Z</updated>
    
    <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;/p&gt;

    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
      <category term="Rax" scheme="https://luyi10year.github.io/tags/Rax/"/>
    
      <category term="React" scheme="https://luyi10year.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>PReact</title>
    <link href="https://luyi10year.github.io/2017/02/13/PReact/"/>
    <id>https://luyi10year.github.io/2017/02/13/PReact/</id>
    <published>2017-02-13T07:08:18.000Z</published>
    <updated>2017-02-27T08:07:51.685Z</updated>
    
    <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;/p&gt;

    
    </summary>
    
    
      <category term="RReact" scheme="https://luyi10year.github.io/tags/RReact/"/>
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>wx签名出错-URL</title>
    <link href="https://luyi10year.github.io/2017/02/13/wx-js-sdk-location-url/"/>
    <id>https://luyi10year.github.io/2017/02/13/wx-js-sdk-location-url/</id>
    <published>2017-02-13T02:16:29.000Z</published>
    <updated>2017-02-13T03:54:54.462Z</updated>
    
    <content type="html"><![CDATA[<p>上周调试wx收货地址的时候<br>碰到一个签名出错的问题<br>invalid signature</p>
<a id="more"></a>
<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>为了增强用户体验<br>在下单页选择收货地址的时候<br>如果是微信用户<br>新增添加微信地址的功能</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>调用wxAPI获取地址信息<br>转换地址信息格式<br>将新地址保存</p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>wx.openAddress方法中<br>cancel回调是取消选项</p>
<p>wx地址选择中北京天津等自治区<br>新增县选项<br>北京市 北京市 朝阳区<br>北京市 县     密云县</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>因为方便测试<br>打开页面的方式都是通过<br>打开指定连接的形式<br><a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a><br>一切OK<br>但是从商品详情页进入<br>在选择SKU下单的时候<br>wx.openAddress会调用不了<br>也就是 直接打开 <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a> 正常<br>先进商品详情页 ==&gt; <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a> 异常<br>invalid signature</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>直接打开链接<br>wx浏览器会对url连接进行转码(encode)<br>wx浏览器内部连接跳转<br>不会对url进行转码处理</p>
<p>wx验证签名信息的时候<br>会将当前页面的链接进行转码处理(encode)</p>
<p>所以<br>直接打开 <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060</a>] = 1<br>wx的验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1</a><br>服务端验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1</a></p>
<p>间接打开的 <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a><br>wx的验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1</a><br>服务端验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a></p>
<p>解决方法很简单<br>在跳转的时候<br>js先对链接进行转码</p>
<h4 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h4><p>在处理url编码问题的时候<br>最好的方法就是Javascript先对URL进行编码<br>不通过浏览器编码<br>保证输出结果和服务器得到数据的一致</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周调试wx收货地址的时候&lt;br&gt;碰到一个签名出错的问题&lt;br&gt;invalid signature&lt;/p&gt;
    
    </summary>
    
    
      <category term="wx" scheme="https://luyi10year.github.io/tags/wx/"/>
    
  </entry>
  
  <entry>
    <title>Redux</title>
    <link href="https://luyi10year.github.io/2017/02/05/react-redux/"/>
    <id>https://luyi10year.github.io/2017/02/05/react-redux/</id>
    <published>2017-02-05T02:46:42.000Z</published>
    <updated>2017-02-05T09:44:37.811Z</updated>
    
    <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;/p&gt;

    
    </summary>
    
    
      <category term="react" scheme="https://luyi10year.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-flux</title>
    <link href="https://luyi10year.github.io/2017/02/04/react-flux/"/>
    <id>https://luyi10year.github.io/2017/02/04/react-flux/</id>
    <published>2017-02-04T02:46:33.000Z</published>
    <updated>2017-02-05T02:48:35.594Z</updated>
    
    <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;/p&gt;

    
    </summary>
    
    
      <category term="react" scheme="https://luyi10year.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-immutable</title>
    <link href="https://luyi10year.github.io/2017/02/03/react-immutable/"/>
    <id>https://luyi10year.github.io/2017/02/03/react-immutable/</id>
    <published>2017-02-03T02:45:40.000Z</published>
    <updated>2017-02-05T02:48:30.403Z</updated>
    
    <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;/p&gt;

    
    </summary>
    
    
      <category term="react" scheme="https://luyi10year.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--书法毛笔字</title>
    <link href="https://luyi10year.github.io/2017/01/21/canvas-fonts-book/"/>
    <id>https://luyi10year.github.io/2017/01/21/canvas-fonts-book/</id>
    <published>2017-01-21T02:43:53.000Z</published>
    <updated>2017-01-23T08:17:07.997Z</updated>
    
    <content type="html"><![CDATA[<p>继续Canvas<br>这次记录移动端手写书法的实现<br><a id="more"></a></p>
<h4 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h4><p>canvas在移动端应用书法<br>需要解决两个问题<br>1.笔锋问题<br>2.连贯问题</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先分析一下<br>毛笔字是有笔锋的<br>又粗有细有勾有钩<br>通过点击时间长短决定画笔大小<br>来模拟毛笔力度</p>
<p>通过touchmove事件获取连续移动的两个点<br>计算两点间的直线距离<br>通过循环在canvas画图</p>
<h4 id="代码上"><a href="#代码上" class="headerlink" title="代码上"></a>代码上</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> domCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#Calligraphy'</span>),</div><div class="line">        context = domCanvas.getContext(<span class="string">'2d'</span>),</div><div class="line">        CONFIG = &#123;</div><div class="line">            <span class="attr">lineMin</span>:<span class="number">8</span>,</div><div class="line">            <span class="attr">lineMax</span>:<span class="number">20</span>,</div><div class="line">            <span class="attr">radius</span>:<span class="number">0</span></div><div class="line">        &#125;;</div><div class="line">    <span class="keyword">let</span> Calligraphy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.touchFlog = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.hasEvent = [];  <span class="comment">//move数组</span></div><div class="line">        <span class="keyword">this</span>.upEvent = <span class="literal">null</span>; <span class="comment">//当前操作</span></div><div class="line">        <span class="keyword">this</span>.limitDis = <span class="number">80</span>; <span class="comment">//移动最少距离</span></div><div class="line">        <span class="keyword">this</span>.radius = CONFIG.radius;</div><div class="line">        <span class="keyword">this</span>.lineMin = CONFIG.lineMin;</div><div class="line">        <span class="keyword">this</span>.lineMax = CONFIG.lineMax;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    Calligraphy.prototype = &#123;</div><div class="line">        <span class="attr">start</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//开始执行监听事件</span></div><div class="line">            <span class="keyword">this</span>.bindEventDown = <span class="keyword">this</span>.eventDown.bind(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">this</span>.bindEventMove = <span class="keyword">this</span>.eventMove.bind(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">this</span>.bindEventUp= <span class="keyword">this</span>.eventUp.bind(<span class="keyword">this</span>);</div><div class="line">            domCanvas.addEventListener(<span class="string">'touchstart'</span>,<span class="keyword">this</span>.eventDown)</div><div class="line">            domCanvas.addEventListener(<span class="string">'touchmove'</span>,<span class="keyword">this</span>.bindEventMove)</div><div class="line">            domCanvas.addEventListener(<span class="string">'touchend'</span>,<span class="keyword">this</span>.bindEventUp)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eventDown</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Down'</span>)</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="keyword">let</span> target = e.changedTouches[e.changedTouches.length<span class="number">-1</span>];</div><div class="line">            <span class="keyword">this</span>.touchFlog = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">this</span>.hasEvent = [];  <span class="comment">//</span></div><div class="line">            <span class="keyword">this</span>.upEvent = <span class="keyword">this</span>.getPoint(target); <span class="comment">//当前操作</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eventMove</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Move'</span>);</div><div class="line">            <span class="keyword">let</span> target = e.changedTouches[e.changedTouches.length<span class="number">-1</span>];</div><div class="line">            <span class="keyword">this</span>.drawFont(<span class="keyword">this</span>.getPoint(target))</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eventUp</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Up'</span>);</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="keyword">this</span>.moveFlog = <span class="literal">false</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">drawFont</span>:<span class="function"><span class="keyword">function</span>(<span class="params">point</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.touchFlog)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">let</span> moEvent = point,</div><div class="line">                upEvent = <span class="keyword">this</span>.upEvent,</div><div class="line">                upRadius = <span class="keyword">this</span>.radius,</div><div class="line">                dis = <span class="number">0</span>, <span class="comment">//连续点距离</span></div><div class="line">                time = <span class="number">0</span>; <span class="comment">//时间</span></div><div class="line">            <span class="keyword">this</span>.hasEvent.unshift(&#123;<span class="attr">time</span>:<span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),<span class="attr">dis</span>:<span class="keyword">this</span>.getDistance(upEvent,moEvent)&#125;);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; <span class="keyword">this</span>.hasEvent.length<span class="number">-1</span>; n++) &#123;</div><div class="line">                dis += <span class="keyword">this</span>.hasEvent[n].dis;</div><div class="line">                time += <span class="keyword">this</span>.hasEvent[n].time-<span class="keyword">this</span>.hasEvent[n+<span class="number">1</span>].time;</div><div class="line">                <span class="keyword">if</span> (dis&gt;<span class="keyword">this</span>.limitDis)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">let</span> radius = <span class="built_in">Math</span>.min(time/dis+<span class="keyword">this</span>.lineMin,<span class="keyword">this</span>.lineMax)/<span class="number">2</span>; <span class="comment">//计算这次画笔半径</span></div><div class="line">            <span class="keyword">this</span>.radius = radius;</div><div class="line">            <span class="keyword">this</span>.upEvent = moEvent;</div><div class="line">            <span class="keyword">let</span> len = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.hasEvent[<span class="number">0</span>].dis/<span class="number">2</span>)+<span class="number">1</span>;</div><div class="line">            <span class="comment">//跟上次画笔半径渐变</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">                <span class="keyword">let</span> x = upEvent.x + (moEvent.x-upEvent.x)/len* i,</div><div class="line">                    y = upEvent.y + (moEvent.y-upEvent.y)/len* i,</div><div class="line">                    r = upRadius + (radius-upRadius)/len*i;</div><div class="line">                context.beginPath();</div><div class="line">                context.arc(x,y,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">true</span>);</div><div class="line">                context.fill();</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">getPoint</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">x</span>: e.clientX - domCanvas.offsetLeft + (<span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft),</div><div class="line">                <span class="attr">y</span>: e.clientY - domCanvas.offsetTop + (<span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollTop),</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">getDistance</span>: <span class="function"><span class="keyword">function</span>(<span class="params">pre,next</span>)</span>&#123;</div><div class="line">            <span class="keyword">let</span> x = next.x - pre.x,</div><div class="line">                y = next.y - pre.y;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(x*x + y*y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> calligrapgy = <span class="keyword">new</span> Calligraphy();</div><div class="line">    calligrapgy.start();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续Canvas&lt;br&gt;这次记录移动端手写书法的实现&lt;br&gt;
    
    </summary>
    
    
      <category term="Canvas" scheme="https://luyi10year.github.io/tags/Canvas/"/>
    
      <category term="H5" scheme="https://luyi10year.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--黑凤梨</title>
    <link href="https://luyi10year.github.io/2017/01/20/canvas-fonts-image/"/>
    <id>https://luyi10year.github.io/2017/01/20/canvas-fonts-image/</id>
    <published>2017-01-20T02:43:38.000Z</published>
    <updated>2017-01-23T06:52:30.808Z</updated>
    
    <content type="html"><![CDATA[<p>之前很火的黑凤梨生成性格图片<br>相信大家印象深刻<br>短时间拉了大量粉丝，同时自个儿也被微信封了</p>
<a id="more"></a>
<p>我们公司当时也做了一个类似的活动<br>想去治病！</p>
<h4 id="活动流程"><a href="#活动流程" class="headerlink" title="活动流程"></a>活动流程</h4><p>通过输入生日年月，确定星座<br>每个新座对应几个不同的病症<br>每个病症对应几段不同的文案和商品<br>诊断结果可以分享<br><img src="http://xqproduct.xiangqu.com/FqDKF5UELtMrxWcGd33YSKEVM3Xq?imageView2/2/w/250/q/90/format/jpg/1352x1580/" alt="活动"></p>
<h5 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h5><p>前端通过canvas实现结果图片<br>通过toDataURL转成Image<br>用微信浏览器自带保存图片功能</p>
<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>设计师希望采用第三方字体<br>那显然在前端实现这有点坑用户流量<br>中文不是就26个字母<br>常用词汇加起来2500 大概7M左右<br>这还是一种字体<br>要实现设计稿要求<br>至少需要三种字体</p>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>将字体资源放到服务器<br>有服务端实现生成图片<br>前端上传生成格式和内容</p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>在代码实现上前端没有什么大问题<br>主要是数据格式的规定上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> XZ = &#123;</div><div class="line">    <span class="string">'1'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">19</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'MJ'</span>,<span class="string">'SP'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'2'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">18</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SP'</span>,<span class="string">'SY'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'3'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">20</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SY'</span>,<span class="string">'BY'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'4'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">19</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'BY'</span>,<span class="string">'JN'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'5'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">20</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'JN'</span>,<span class="string">'SdZ'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'6'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">21</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SdZ'</span>,<span class="string">'JX'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'7'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'JX'</span>,<span class="string">'SlZ'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'8'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SlZ'</span>,<span class="string">'CN'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'9'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'CN'</span>,<span class="string">'TC'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'10'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">23</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'TC'</span>,<span class="string">'TX'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'11'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'TX'</span>,<span class="string">'SS'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'12'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">21</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SS'</span>,<span class="string">'MJ'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//星座的判别</span></div><div class="line"><span class="keyword">let</span> oXz = XZ[domInputMonth];</div><div class="line">    sXz = domInputDate &lt;= oXz.division ? oXz.item[<span class="number">0</span>] : oXz.item[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">//病症描述的格式规定</span></div><div class="line">[<span class="string">'$+@70@&amp;方正兰亭特黑简体&amp;**+$$+@50@&amp;方正兰亭特黑简体&amp;想发个朋友圈+$'</span>,<span class="string">'结果..$+@50@&amp;方正兰亭特黑简体&amp;俩小时+$过去了...'</span>,<span class="string">'还在$+@110@&amp;方正兰亭特黑简体&amp;选照片+$'</span>]</div><div class="line">文案分行采取数组形式</div><div class="line">$+ +$ 包含有特殊字体文本</div><div class="line">&amp; &amp;   特殊字体</div><div class="line">@ @   字号</div><div class="line">**    替换文案(姓名)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//生成文案在显示位置</span></div><div class="line">通过本地Canvas模拟生成的图片</div><div class="line">(字体用系统字体代替)</div><div class="line">context.ctx.font = nSize+<span class="string">'px arial'</span>;</div><div class="line">context.measureText(sContext).width 来获取长度</div><div class="line">通过指定宽度容器的比较获取x,y坐标</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//小技巧</span></div><div class="line"><span class="comment">//数组的随机</span></div><div class="line"><span class="built_in">Array</span>.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">            <span class="keyword">let</span> len = <span class="keyword">this</span>.length,num = n ? <span class="built_in">Math</span>.min(n,len) : len,index,</div><div class="line">                arr = <span class="keyword">this</span>.slice(<span class="number">0</span>),temp,</div><div class="line">                lib = &#123;&#125;;</div><div class="line">            lib.range = <span class="function"><span class="keyword">function</span>(<span class="params">min,max</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> min + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>))</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">                index = lib.range(i,len<span class="number">-1</span>);</div><div class="line">                temp = arr[i];</div><div class="line">                arr[i] = arr[index];</div><div class="line">                arr[index] = temp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> arr.slice(<span class="number">0</span>,num);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//两个数组的合并</span></div><div class="line">[a].concat([b])  返回结果新数组</div><div class="line">[].push.apply([a],[b]);返回结果[a]</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>虽然好像跟canvas关系不大<br>但是，好像也没有但是。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前很火的黑凤梨生成性格图片&lt;br&gt;相信大家印象深刻&lt;br&gt;短时间拉了大量粉丝，同时自个儿也被微信封了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Canvas" scheme="https://luyi10year.github.io/tags/Canvas/"/>
    
      <category term="H5" scheme="https://luyi10year.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--星空</title>
    <link href="https://luyi10year.github.io/2017/01/19/canvas-snow/"/>
    <id>https://luyi10year.github.io/2017/01/19/canvas-snow/</id>
    <published>2017-01-19T02:43:25.000Z</published>
    <updated>2017-01-22T08:57:50.852Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas 星空效果<br>嗯 是的 就是左上方的星空效果</p>
<a id="more"></a>
<h4 id="星空效果"><a href="#星空效果" class="headerlink" title="星空效果"></a>星空效果</h4><h5 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h5><p>其实星空在实现上很简单<br>一个星星就是一个星星对象实例<br>有属性x坐标，y坐标，半径，移动速度和透明度<br>有方法生成坐标，绘制星星</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 配置选项</div><div class="line">        * width:画布宽</div><div class="line">        * height:画布高</div><div class="line">        * splitHeight:星星密集分割</div><div class="line">        * stars:星星数量</div><div class="line">        * maxStar:星星最大半径</div><div class="line">        * minStar:星星最小半径</div><div class="line">        * maxSpeed:星星最大移动速度</div><div class="line">        * minSpeed:星星最小移动速度</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> SkySetting = &#123;</div><div class="line">                <span class="attr">width</span>:<span class="number">800</span>,</div><div class="line">                <span class="attr">height</span>:<span class="number">300</span>,</div><div class="line">                <span class="attr">splitHeight</span>:<span class="number">200</span>,</div><div class="line">                <span class="attr">stars</span>:<span class="number">400</span>,</div><div class="line">                <span class="attr">maxStar</span>:<span class="number">1.2</span>,</div><div class="line">                <span class="attr">minStar</span>:<span class="number">0.6</span>,</div><div class="line">                <span class="attr">maxSpeed</span>:<span class="number">0.1</span>,</div><div class="line">                <span class="attr">minSpeed</span>:<span class="number">0.02</span>,</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">            domCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#Star'</span>),</div><div class="line">            context = domCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 画布实例</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> starSky = <span class="function"><span class="keyword">function</span>(<span class="params">width,height,stars</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.width = width;</div><div class="line">            <span class="keyword">this</span>.height = height;</div><div class="line">            <span class="keyword">this</span>.stars = stars;</div><div class="line">            <span class="keyword">this</span>.aStars = [];</div><div class="line">        &#125;</div><div class="line">        starSky.prototype = &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 入口</div><div class="line">            * */</div><div class="line">            start:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                domCanvas.width = <span class="keyword">this</span>.width;</div><div class="line">                domCanvas.height = <span class="keyword">this</span>.height;</div><div class="line">                context.fillStyle = <span class="string">'rgba(0,0,0,1)'</span>;</div><div class="line">                context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                <span class="keyword">this</span>.render();</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 重绘</div><div class="line">            * */</div><div class="line">            redraw:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                context.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                context.fillStyle = <span class="string">'rgba(0,0,0,1)'</span>;</div><div class="line">                context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 新建星星实例</div><div class="line">            * 绘制星星</div><div class="line">            * window.requestAnimationFrame 动画函数</div><div class="line">            * */</div><div class="line">            render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.redraw();</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.aStars.length &lt;= <span class="keyword">this</span>.stars)&#123;</div><div class="line">                    <span class="keyword">let</span> star = <span class="keyword">new</span> Star();</div><div class="line">                    <span class="keyword">this</span>.aStars.push(star);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.aStars.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">star</span>)</span>&#123;</div><div class="line">                    star.draw();</div><div class="line">                &#125;)</div><div class="line">                <span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.render();</div><div class="line">                &#125;);</div><div class="line">            &#125;,</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 星星构造器</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> Star = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.randomPoint();</div><div class="line">        &#125;</div><div class="line">        Star.prototype = &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 随机星星数据</div><div class="line">            * */</div><div class="line">            randomPoint:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">let</span> _x = <span class="built_in">Math</span>.random()*SkySetting.width,</div><div class="line">                    _r = SkySetting.minStar + <span class="built_in">Math</span>.random()*(SkySetting.maxStar - SkySetting.minStar),</div><div class="line">                    _ran = <span class="built_in">Math</span>.random()*<span class="number">10</span>,</div><div class="line">                    _rx = <span class="built_in">Math</span>.random()*(SkySetting.maxSpeed-SkySetting.minSpeed) + SkySetting.minSpeed,</div><div class="line">                    _y = _ran &gt; <span class="number">2</span> ? <span class="built_in">Math</span>.random()*SkySetting.splitHeight: <span class="built_in">Math</span>.random()*SkySetting.height,</div><div class="line">                    _alphaMax = <span class="built_in">Math</span>.random()*<span class="number">0.8</span> + <span class="number">0.2</span>,</div><div class="line">                    _alphaMin = <span class="number">0.2</span>,</div><div class="line">                    _alpha = <span class="number">0</span>;</div><div class="line">                <span class="keyword">this</span>.x = _x;</div><div class="line">                <span class="keyword">this</span>.y = _y;</div><div class="line">                <span class="keyword">this</span>.r = _r;</div><div class="line">                <span class="keyword">this</span>.rx = _rx;</div><div class="line">                <span class="keyword">this</span>.alpha = _alpha;</div><div class="line">                <span class="keyword">this</span>.alphaMax = _alphaMax;</div><div class="line">                <span class="keyword">this</span>.alphaMin = _alphaMin;</div><div class="line">                <span class="keyword">this</span>.alphaAction = <span class="literal">true</span>;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 绘制星星</div><div class="line">            * 星星变化</div><div class="line">            * */</div><div class="line">            draw:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.x += <span class="keyword">this</span>.rx;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.x + <span class="keyword">this</span>.r &gt;= SkySetting.width)&#123;</div><div class="line">                    <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.alphaAction)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.alpha &lt; <span class="keyword">this</span>.alphaMax)&#123;</div><div class="line">                        <span class="keyword">this</span>.alpha += <span class="number">0.05</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.alphaAction = <span class="literal">false</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.alphaAction)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.alpha &gt; <span class="keyword">this</span>.alphaMin)&#123;</div><div class="line">                        <span class="keyword">this</span>.alpha -= <span class="number">0.02</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.alphaAction = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                context.beginPath();</div><div class="line">                context.fillStyle = <span class="string">'rgba(255,255,255,'</span>+<span class="keyword">this</span>.alpha.toString()+<span class="string">')'</span>;</div><div class="line">                context.arc(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y,<span class="keyword">this</span>.r,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</div><div class="line">                context.closePath();</div><div class="line">                context.fill();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 构造星空实例</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> sky = <span class="keyword">new</span> starSky(SkySetting.width,SkySetting.height,SkySetting.stars);</div><div class="line">        sky.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Canvas 星空效果&lt;br&gt;嗯 是的 就是左上方的星空效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="Canvas" scheme="https://luyi10year.github.io/tags/Canvas/"/>
    
      <category term="H5" scheme="https://luyi10year.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--刮刮卡</title>
    <link href="https://luyi10year.github.io/2017/01/18/canvas-xiaoxiaole/"/>
    <id>https://luyi10year.github.io/2017/01/18/canvas-xiaoxiaole/</id>
    <published>2017-01-18T02:43:15.000Z</published>
    <updated>2017-01-22T07:23:45.585Z</updated>
    
    <content type="html"><![CDATA[<p>到年底了，去回顾了下做过的项目<br>发现有很多跟Canvas有关的<br>这里简单记录一点心得<br>方便日后查阅</p>
<a id="more"></a>
<h3 id="一个模拟刮奖的活动"><a href="#一个模拟刮奖的活动" class="headerlink" title="一个模拟刮奖的活动"></a>一个模拟刮奖的活动</h3><h5 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h5><p>获奖结果上实现一个遮层<br>手指滑动位置遮层对应位置色值清空<br>判断清空数据达到设定值，清除遮层</p>
<h5 id="必备API"><a href="#必备API" class="headerlink" title="必备API"></a>必备API</h5><p>getContext()<br>getImageData() //获取画布像素数据 每个像素包含RGBA四个值<br>fill()  //填充<br>rect() //矩形<br>arc() //圆<br>globalCompositeOperation //设置或返回如何将一个源（新的）图像绘制到目标（已有）的图像上</p>
<h5 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h5><p>touchstart<br>touchmove<br>touchend<br>changedTouches:touchlist。<br>对于 touchstart 事件, 这个 TouchList 对象列出在此次事件中新增加的触点<br>对于 touchmove 事件，列出和上一次事件相比较，发生了变化的触点<br>对于 touchend ，列出离开触摸平面的触点（这些触点对应已经不接触触摸平面的手指）</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="keyword">let</span> domCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#GGL'</span>),</div><div class="line">            context = domCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 构建对象</div><div class="line">        * width</div><div class="line">        * height</div><div class="line">        * filter 取消遮罩百分比</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> clipImage = <span class="function"><span class="keyword">function</span>(<span class="params">height,width,filter</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.width = width;</div><div class="line">            <span class="keyword">this</span>.height = height;</div><div class="line">            <span class="keyword">this</span>.filter = filter;</div><div class="line">            domCanvas.width = <span class="keyword">this</span>.width;</div><div class="line">            domCanvas.height = <span class="keyword">this</span>.height;</div><div class="line">        &#125;</div><div class="line">        clipImage.prototype = &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 函数入口</div><div class="line">            * 开始监听事件</div><div class="line">            * */</div><div class="line">            start:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                context.fillStyle = <span class="string">'gray'</span>;</div><div class="line">                context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                context.globalCompositeOperation = <span class="string">'destination-out'</span>;</div><div class="line">                <span class="keyword">this</span>.bindEventMove = <span class="keyword">this</span>.eventMove.bind(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">this</span>.bindEventUp= <span class="keyword">this</span>.eventUp.bind(<span class="keyword">this</span>);</div><div class="line">                domCanvas.addEventListener(<span class="string">'touchstart'</span>,<span class="keyword">this</span>.eventDown)</div><div class="line">                domCanvas.addEventListener(<span class="string">'touchmove'</span>,<span class="keyword">this</span>.bindEventMove)</div><div class="line">                domCanvas.addEventListener(<span class="string">'touchend'</span>,<span class="keyword">this</span>.bindEventUp)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">eventDown</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Down'</span>)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">eventMove</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Move'</span>);</div><div class="line">                <span class="keyword">let</span> target = e.changedTouches[e.changedTouches.length<span class="number">-1</span>];</div><div class="line">                <span class="keyword">this</span>.clearMove(target)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">eventUp</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Up'</span>);</div><div class="line">                <span class="keyword">this</span>.clearMask();</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 清除划过画布</div><div class="line">            * */</div><div class="line">            clearMove:<span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">                <span class="keyword">let</span> nX = target.clientX,</div><div class="line">                    nY = target.clientY;</div><div class="line">                context.beginPath();</div><div class="line">                context.arc(nX,nY,<span class="number">15</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">                context.fill();</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 判断像素点清除数是否到达指定百分比</div><div class="line">            * */</div><div class="line">            clearMask:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">let</span> nNum = <span class="number">0</span>,</div><div class="line">                    aImageData = context.getImageData(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height).data,</div><div class="line">                    nLength = aImageData.length;</div><div class="line">                aImageData.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(item == <span class="number">0</span>)&#123;</div><div class="line">                        nNum++;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="keyword">if</span>(nNum &gt;= nLength * <span class="keyword">this</span>.filter)&#123;</div><div class="line">                    <span class="keyword">this</span>.finish();</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 完成刮奖</div><div class="line">            * */</div><div class="line">            finish:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                context.beginPath();</div><div class="line">                context.rect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                context.fill();</div><div class="line">                domCanvas.removeEventListener(<span class="string">'touchstart'</span>,<span class="keyword">this</span>.eventDown);</div><div class="line">                domCanvas.removeEventListener(<span class="string">'touchmove'</span>,<span class="keyword">this</span>.bindEventMove);</div><div class="line">                domCanvas.removeEventListener(<span class="string">'touchend'</span>,<span class="keyword">this</span>.bindEventUp);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> clip = <span class="keyword">new</span> clipImage(<span class="number">400</span>,<span class="number">400</span>,<span class="number">.3</span>);</div><div class="line">        clip.start();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到年底了，去回顾了下做过的项目&lt;br&gt;发现有很多跟Canvas有关的&lt;br&gt;这里简单记录一点心得&lt;br&gt;方便日后查阅&lt;/p&gt;
    
    </summary>
    
    
      <category term="Canvas" scheme="https://luyi10year.github.io/tags/Canvas/"/>
    
      <category term="H5" scheme="https://luyi10year.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>从微信小程序的登录谈谈前端的登录机制</title>
    <link href="https://luyi10year.github.io/2017/01/16/weapp-login-vs-web-login/"/>
    <id>https://luyi10year.github.io/2017/01/16/weapp-login-vs-web-login/</id>
    <published>2017-01-16T06:00:56.000Z</published>
    <updated>2017-01-16T06:04:38.197Z</updated>
    
    <content type="html"><![CDATA[<p>上周一周的忙碌，结束了小程序的初版上线<br>今天拉了楼上同事的代码<br>瞬间打击回解放前</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周一周的忙碌，结束了小程序的初版上线&lt;br&gt;今天拉了楼上同事的代码&lt;br&gt;瞬间打击回解放前&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="https://luyi10year.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="session" scheme="https://luyi10year.github.io/tags/session/"/>
    
      <category term="cookie" scheme="https://luyi10year.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>谈谈js的继承</title>
    <link href="https://luyi10year.github.io/2017/01/03/es5-es6-extends/"/>
    <id>https://luyi10year.github.io/2017/01/03/es5-es6-extends/</id>
    <published>2017-01-03T03:53:25.000Z</published>
    <updated>2017-01-06T07:23:20.124Z</updated>
    
    <content type="html"><![CDATA[<p>继承在JavaScript中不像在别的面向对象语言中那样简单<br>JavaScript使用的是基于对象的继承<br>它可以用来模仿基于类的继承<br><a id="more"></a></p>
<p>Es6中，新增了Class和extends关键字来支持类的继承<br>在这里记录各种继承的实现方式</p>
<h5 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h5><p>JavaScript对象可以模仿Java中的对象<br>通过函数来声明类<br>用关键字new来创建实例<br>这种方式包括两个步骤<br>1.用一个类的声明定义对象的结构<br>2.实例化该类创建一个新对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类的实例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sName);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Person(<span class="string">'Ls'</span>);</div><div class="line">Ls.sayName();</div></pre></td></tr></table></figure></p>
<p>这种类式继承的方式可以分为五种<br>对象冒充，Call，Apply，原型链和混合模式</p>
<h5 id="对象冒充"><a href="#对象冒充" class="headerlink" title="对象冒充"></a>对象冒充</h5><p>构造函数使用 this 关键字给所有属性和方法赋值<br>因为构造函数只是一个函数<br>所以可使Person构造函数成为Author的方法，然后调用它<br>Author就会收到Person的构造函数中定义的属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.book = book;</div><div class="line">        <span class="keyword">this</span>.Person = Person;</div><div class="line">        <span class="keyword">this</span>.Person(name);</div><div class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.Person;</div><div class="line">        <span class="keyword">this</span>.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.book)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure></p>
<h5 id="apply-amp-amp-call继承"><a href="#apply-amp-amp-call继承" class="headerlink" title="apply&amp;&amp;call继承"></a>apply&amp;&amp;call继承</h5><p>call和apply方法通过改变函数上下文实现继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.book = book;</div><div class="line">        Person.call(<span class="keyword">this</span>,name);</div><div class="line">        Person.apply(<span class="keyword">this</span>,[name]);</div><div class="line">        <span class="keyword">this</span>.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.book)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">    Ls.sayName();</div><div class="line">    Ls.sayBook();</div></pre></td></tr></table></figure></p>
<h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><p>使子类原型对象指向父类的实例以实现继承,即重写类的原型对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype.sName = <span class="string">''</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sName);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">book</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.book = book;</div><div class="line">&#125;</div><div class="line">Author.prototype = <span class="keyword">new</span> Person();</div><div class="line">Author.prototype.sayBook= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'My book'</span>);</div><div class="line">Ls.sName = <span class="string">'Ls'</span>;</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure></p>
<p>这种模式无法使用带参数的构造函数，不支持多重继承</p>
<h5 id="混合模式继承"><a href="#混合模式继承" class="headerlink" title="混合模式继承"></a>混合模式继承</h5><p>用对象冒充继承构造函数的属性，用原型链继承 prototype 对象的方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name);</div><div class="line">    <span class="keyword">this</span>.book = book;</div><div class="line">&#125;</div><div class="line">Author.prototype = <span class="keyword">new</span> Person();</div><div class="line">Author.prototype.constructor = Author;</div><div class="line">Author.prototype.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure>
<p>为了简化类的声明，可以把派生子类的整个过程包装在一个名为extend的函数中<br>空函数F，这样可以避免创建Person的新实例,因为它可能会比较庞大<br>增加superclass这个属性弱化Author与Person之间的耦合<br>并且确保constructor属性被正确设置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">subClass.superClass</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    F.prototype = superClass.prototype;</div><div class="line">    subClass.prototype = <span class="keyword">new</span> F();</div><div class="line">    subClass.prototype.constructor = subClass;</div><div class="line"></div><div class="line">    subClass.superclass = superClass.prototype;</div><div class="line">    <span class="keyword">if</span>(subClass.prototype.constructor == <span class="built_in">Object</span>.prototype.constructor)&#123;</div><div class="line">        subClass.prototype.constructor = subClass;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">    Author.superclass.constructor.call(<span class="keyword">this</span>,name);</div><div class="line">    <span class="keyword">this</span>.book = book;</div><div class="line">&#125;</div><div class="line">extend(Author,Person)</div><div class="line">Author.prototype.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure></p>
<p>JavaScript中的类式继承仅仅是对正正基于类的继承的一种模仿</p>
<h5 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h5><p>原型式继承与类式继承截然不同<br>它并不需要用类来定义对象结构，只需要创建一个对象<br>这个对象可以被新的对象重用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'default name'</span>,</div><div class="line">    <span class="attr">sayName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Author = clone(Person);</div><div class="line">Author.book = <span class="string">'default book'</span>;</div><div class="line">Author.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = clone(Author);</div><div class="line">Ls.name = <span class="string">'Ls'</span>;</div><div class="line">Ls.book = <span class="string">'My Book'</span>;</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div><div class="line"></div><div class="line"><span class="comment">//clone 通过把F的prototype属性设置为作为参数obj传去的原型对象</span></div><div class="line"><span class="comment">//函数返回的结果是一个以给定对象为原型对象的空对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = obj;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="Es6-extends"><a href="#Es6-extends" class="headerlink" title="Es6 extends"></a>Es6 extends</h5><p>Es6中引入了Class 和extends关键字</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">        constructor(name)&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">        sayName()&#123;</div><div class="line">            console.log(<span class="keyword">this</span>.name)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">        constructor(name,book)&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">            <span class="keyword">this</span>.book = book;</div><div class="line">        &#125;</div><div class="line">        sayBook()&#123;</div><div class="line">            console.log(<span class="keyword">this</span>.book);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> <span class="type">Ls</span> = <span class="keyword">new</span> <span class="type">Author</span>(<span class="symbol">'L</span>s',<span class="symbol">'My</span> <span class="type">Book</span>');</div><div class="line"><span class="type">Ls</span>.sayName();</div><div class="line"><span class="type">Ls</span>.sayBook();</div><div class="line"></div><div class="line"><span class="type">Ls</span>.__proto__ === <span class="type">Author</span>.prototype; <span class="comment">//true</span></div><div class="line"><span class="type">Author</span>.prototype.__proto__ === <span class="type">Person</span>.prototype; <span class="comment">//true</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继承在JavaScript中不像在别的面向对象语言中那样简单&lt;br&gt;JavaScript使用的是基于对象的继承&lt;br&gt;它可以用来模仿基于类的继承&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
      <category term="Es6" scheme="https://luyi10year.github.io/tags/Es6/"/>
    
  </entry>
  
  <entry>
    <title>Js中的设计模式</title>
    <link href="https://luyi10year.github.io/2017/01/01/js-design-patterns/"/>
    <id>https://luyi10year.github.io/2017/01/01/js-design-patterns/</id>
    <published>2017-01-01T10:09:48.000Z</published>
    <updated>2017-01-06T07:26:25.310Z</updated>
    
    <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;/p&gt;

    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解Js中的作用域和上下文</title>
    <link href="https://luyi10year.github.io/2016/12/30/es5-scope-closure/"/>
    <id>https://luyi10year.github.io/2016/12/30/es5-scope-closure/</id>
    <published>2016-12-30T10:06:06.000Z</published>
    <updated>2017-01-05T11:31:30.574Z</updated>
    
    <content type="html"><![CDATA[<p>函数的每次调用都有与之紧密相关的作用域和上下文<br>这俩者是完全不同的<br>作用域(Scope) 是基于函数的<br>作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的<br>而上下文(Context)是基于对象的<br>上下文始终是this关键字的值，它是拥有(控制)当前所执行代码的对象的引用。</p>
<a id="more"></a>
<h5 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h5><p>首先只有函数具有作用域<br>也就是说，在一个函数内部声明的变量在函数外部无法访问<br>JavaScript的作用域是词法性质的<br>这这意味着函数运行在定义它的作用域中<br>而不是在调用它的作用域中<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span>&#123;</div><div class="line">        a *= <span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> baz = foo();</div><div class="line">baz(); <span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<p>Es6之前 局部变量只能存在于函数体中<br>Es6开始支持let声明变量 局部变量能存在于块级作用域<br>通过var声明的变量会出现变量提升的问题</p>
<blockquote>
<p>变量的 声明周期<br>声明阶段(Declaration phase)<br>初始化阶段(Initialization phase)<br>   初始化阶段：variable = undefined<br>赋值阶段(Assignment phase)<br>   赋值阶段后：variable = ‘value’</p>
</blockquote>
<p>var<br>变量在函数作用域的开始位置就完成了声明阶段(variable)和初始化阶段(var variable)，这两个阶段之间没有任何间隙<br>let<br>变量通过声明阶段(foo)后，会进去暂时性死区，此时变量不可访问，直到初始化阶段(let foo)之后，变量才可以被访问<br>所以变量提升是变量的耦合声明并且在作用域的顶部完成初始化<br>然而let生命周期中将声明和初始化阶段解耦。这一解耦使 let 的变量提升现象消失。</p>
<h5 id="上下文-Context"><a href="#上下文-Context" class="headerlink" title="上下文(Context)"></a>上下文(Context)</h5><p>上下文通常取决于函数是如何被调用的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当一个函数作为对象中的一个方法被调用的时候,this就设置为调用该方法的对象</span></div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">bar</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === foo)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foo.bar() <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">//当使用new操作符创造对象的实例时,函数的作用域内部this的值被设置为新创建的实例</span></div><div class="line"><span class="keyword">let</span> aThis = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    aThis.push(<span class="keyword">this</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//foo&#123;x:1&#125;</span></div><div class="line">    <span class="comment">//foo&#123;x:2&#125;</span></div><div class="line">&#125;</div><div class="line">foo.prototype.baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">    <span class="comment">//1</span></div><div class="line">    <span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> foo(<span class="number">1</span>);</div><div class="line"><span class="keyword">new</span> foo(<span class="number">2</span>);</div><div class="line">aThis.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    item.baz();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h5 id="执行环境-execution-context"><a href="#执行环境-execution-context" class="headerlink" title="执行环境(execution context)"></a>执行环境(execution context)</h5><p>执行环境 定义了变量或函数有权访问的数据，决定它们各自的行为<br>Js是单线程的，当JavaScript解释器初始化执行代码时，会默认进入全局执行环境<br>此后函数的每次调用都会创建一个新的执行环境<br>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中<br>在函数执行完后，栈将其环境弹出，把控制权返回给之前的执行环境。<br>ECMAScript程序中的执行流正是由这个便利的机制控制着<br>执行环境可以分为创建和执行两个阶段。<br>在创建阶段，解析器首先会创建一个变量对象（variable object，也称为活动对象 activation object），<br>它由定义在执行环境中的变量、函数声明、和参数组成。<br>在这个阶段，作用域链会被初始化， this 的值也会被最终确定。<br>在执行阶段，代码被解释执行。</p>
<h5 id="作用域链-scope-chain"><a href="#作用域链-scope-chain" class="headerlink" title="作用域链(scope chain)"></a>作用域链(scope chain)</h5><p>当代码在一个环境中执行时<br>会创建变量对象的一个作用域链<br>作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问<br>作用域链包含了在环境栈中的每个执行环境对应的变量对象<br>内部环境可以通过作用域链访问所有的外部环境<br>但是外部环境不能访问内部环境中的任何变量和函数<br>这些环境之间的联系是线性的、有次序的</p>
<h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>闭包是指有权访问另一函数作用域中的变量的函数<br>在函数内定义一个嵌套的函数时，就构成了一个闭包<br>它允许嵌套函数访问外层函数的变量<br>通过返回嵌套函数，允许你维护对外部函数中局部变量、参数、和内函数声明的访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//模块模式最流行的闭包类型之一，它允许你模拟公共的、私有的、和特权成员</span></div><div class="line"><span class="keyword">let</span> Module = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> privateProperty = <span class="string">'foo'</span>;</div><div class="line">    fucntion privateMethod()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">publicProperty</span>:<span class="string">''</span>,</div><div class="line">        <span class="attr">publicMethod</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">privilegedMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> privateMethod(<span class="built_in">arguments</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)()</div><div class="line"><span class="comment">//另一种类型的闭包被称为 立即执行的函数表达式(IIFE) Es5中</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> foo, bar;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">private</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Module = &#123;</div><div class="line"></div><div class="line">        <span class="attr">public</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.Module = Module;</div><div class="line">&#125;)(<span class="keyword">this</span>);</div><div class="line"><span class="comment">//保护全局命名空间免受变量污染</span></div><div class="line"><span class="keyword">var</span> baz;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> foo = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> bar = <span class="number">2</span>;</div><div class="line">    baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> foo * bar;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div><div class="line">baz(); <span class="comment">//20</span></div><div class="line"><span class="comment">//保护私用private变量</span></div></pre></td></tr></table></figure></p>
<h5 id="apply-amp-call-amp-bind"><a href="#apply-amp-call-amp-bind" class="headerlink" title="apply&amp;call&amp;bind"></a>apply&amp;call&amp;bind</h5><p>apply和call内建在所有的函数中(它们是Function对象的原型方法)<br>允许你在自定义上下文中执行函数<br>不同点在于，call函数需要参数列表，而apply 函数需要你提供一个参数数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//arguments</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    [].slice.apply(<span class="built_in">arguments</span>);</div><div class="line">    [].sort.apply(<span class="built_in">arguments</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a&gt;b;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//apply在传递参数时会将数组转变成列表集合</span></div><div class="line"><span class="comment">//在一些只能处理列表的方法中可以巧妙地处理</span></div><div class="line"><span class="comment">//求数组最大值</span></div><div class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//3</span></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>,a); <span class="comment">//3</span></div><div class="line"><span class="comment">//两个数组合并</span></div><div class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">    b = [<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="comment">//a.push(b)</span></div><div class="line"><span class="comment">//a [1,2,[3,4]];</span></div><div class="line">[].push.apply(a,b)</div><div class="line"><span class="comment">//a [1,2,3,4];</span></div></pre></td></tr></table></figure></p>
<p>在ES5中引入了 Function.prototype.bind 方法，<br>用于控制函数的执行上下文，它会返回一个新的函数，<br>并且这个新函数会被永久的绑定到 bind 方法的第一个参数所指定的对象上，无论该函数被如何使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//低版本浏览器，我们可以简单的对它进行实现如下(polyfill)</span></div><div class="line"><span class="keyword">if</span>(!(<span class="string">'bind'</span> <span class="keyword">in</span> <span class="built_in">Function</span>.prototype))&#123;</div><div class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> fn = <span class="keyword">this</span>,</div><div class="line">            context = <span class="built_in">arguments</span>[<span class="number">0</span>],</div><div class="line">            args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> fn.apply(context, args.concat(<span class="built_in">arguments</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="Es6箭头函数"><a href="#Es6箭头函数" class="headerlink" title="Es6箭头函数"></a>Es6箭头函数</h5><p>S6中的箭头函数可以作为 Function.prototype.bind() 的替代品。<br>和普通函数不同，箭头函数没有它自己的this值，它的 this 值继承自外围作用域。<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    baz:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> <span class="keyword">self</span> = this;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>&#123;</div><div class="line">            <span class="keyword">self</span>.baz(item);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Es5 bind</span></div><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    baz:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>&#123;</div><div class="line">            <span class="keyword">self</span>.baz(item);</div><div class="line">        &#125;.bind(this))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Es6箭头函数</span></div><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    baz:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="keyword">forEach</span>((item)=&gt;this.baz(item))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数的每次调用都有与之紧密相关的作用域和上下文&lt;br&gt;这俩者是完全不同的&lt;br&gt;作用域(Scope) 是基于函数的&lt;br&gt;作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的&lt;br&gt;而上下文(Context)是基于对象的&lt;br&gt;上下文始终是this关键字的值，它是拥有(控制)当前所执行代码的对象的引用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ECMA-prototype</title>
    <link href="https://luyi10year.github.io/2016/12/28/js-object-prototype/"/>
    <id>https://luyi10year.github.io/2016/12/28/js-object-prototype/</id>
    <published>2016-12-28T10:00:00.000Z</published>
    <updated>2017-01-05T05:46:26.832Z</updated>
    
    <content type="html"><![CDATA[<p>要学好Js，首先必须得先理解原型(prototype)<br>why？<br>js作为面向对象的语言，实现面向对象的机制就是原型！</p>
<a id="more"></a>
<p>都说js中一切皆对象,那到底什么是对象呢？</p>
<blockquote>
<p>对象是属性的集合，并有一个原型对象。原型对象可以是空值。<br>按宿主环境分可以分为<br>原生对象：由ECMAScript规范定义其语义的对象<br>内置对象：由ECMAScript实现提供，独立于宿主环境的对象，ECMAScript程序开始执行时就存在(所有内置对象是原生对象)<br>宿主对象：由宿主环境提供的对象，用于完善ECMAScript执行环境(DOM,BOM)<br>按功能分可以分为：<br>普通对象：无原型对象<br>函数对象：有原型对象(函数对象的一个实例)</p>
</blockquote>
<p>我们这里只关注函数对象<br>那么到底什么是原型呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//凡是通过new Function() 创建的对象都是函数对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="comment">//Bar foo baz 都是函数对象</span></div><div class="line"></div><div class="line"><span class="comment">//原型对象本质是函数对象的一个实例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Bar.prototype</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> Bar();</div><div class="line">Bar.prototype = temp;</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="built_in">Function</span>.prototype = temp</div><div class="line"><span class="comment">//构造器：创建和初始化对象的函数对象(在原型对象prototype中,prototype.constructor)</span></div><div class="line"><span class="comment">//原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象</span></div><div class="line"><span class="comment">//每个由构造器创建的对象拥有一个执行构造器prototype的属性值的隐式引用</span></div><div class="line"><span class="comment">//这个引用称之为原型</span></div><div class="line"><span class="comment">//每个原型可以拥有指向自己原型的隐式引用(原型的原型),就是所谓的原型链</span></div><div class="line"><span class="comment">//每个对象都有一个__proto__属性来实现对原型的隐式引用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line">person.__proto__ = Person.prototype</div><div class="line">Person.prototype.__proto__ = <span class="built_in">Object</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ = <span class="literal">null</span></div><div class="line"><span class="comment">//person对象由构造器Person创建</span></div><div class="line"><span class="comment">//所以person对Person.prototype有隐式引用(__proto__)</span></div><div class="line"><span class="comment">//Person对象又是由构造器Object创建</span></div><div class="line"><span class="comment">//所以Person对Object.prototype有隐式引用(__proto__)</span></div></pre></td></tr></table></figure></p>
<p><img src="/assets/blogImg/prototype.png" alt="Prototype"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要学好Js，首先必须得先理解原型(prototype)&lt;br&gt;why？&lt;br&gt;js作为面向对象的语言，实现面向对象的机制就是原型！&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
      <category term="原型" scheme="https://luyi10year.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>你真的学好Js了吗</title>
    <link href="https://luyi10year.github.io/2016/12/27/js-base/"/>
    <id>https://luyi10year.github.io/2016/12/27/js-base/</id>
    <published>2016-12-27T02:48:41.000Z</published>
    <updated>2017-01-06T07:23:20.121Z</updated>
    
    <content type="html"><![CDATA[<p>在我看来前端(Js)就好比是个剑客江湖<br>江湖中有人练react宝典，有人练vue神功<br>有人锻造webpack利剑<br>…<br>而Js就是这些的基础心法，决定这些宝典,神功最后在你手上的杀伤力<br>那么作为最基础的心法，你真的参透的了吗？</p>
<a id="more"></a>
<blockquote>
<p>这里简单的记录些Js的一些特点</p>
</blockquote>
<h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h5><p>什么是面向对象</p>
<ul>
<li>一切事物皆对象</li>
<li>对象具有封装和继承特性</li>
<li>对象与对象之间使用消息通信，各自存在信息隐藏</li>
</ul>
<p>众所周知Java采用面向对象思想构造其语言，它实现了类、继承、多态、接口等机制。<br>但是这些机制，只是实现面向对象编程的一种方式<br>实际上，Js是通过原型的方式来实现面向对象编程的<br>Js中的对象是依靠构造器(constructor)利用原型(prototype)构造出来的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象的声明</span></div><div class="line"><span class="comment">//字面式对象声明</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//使用函数构造器构造对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//这里的new关键字跟java中 的new毫无关系</span></div><div class="line"><span class="comment">//只是借用了它的关键字new</span></div><div class="line"><span class="comment">//用来表示调用构造器创建对象</span></div></pre></td></tr></table></figure></p>
<h5 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h5><p>在Js中，定义变量不必声明其类型。但这不意味着变量没有类型。<br>原始类型：布尔型、数值型、字符串类型<br>引用类型：对象类型(数组是一种特殊的对象)、函数类型<br>其他类型：空类型和未定义类型<br>js中的变量可以根据所附的值改变类型<br>原始类型按值传送，在栈内存中存的是变量的值<br>引用类型则按引用传送，在栈内存中存的是 引用对象在堆内存中的地址<br>所以这里涉及到引用类型深拷贝和浅拷贝的问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//浅拷贝 把父对象的属性全部拷贝给子对象</span></div><div class="line"><span class="comment">//如果父元素的属性对应的值是引用类型，那子对象对应的属性的值还是引用类型的内存地址</span></div><div class="line"><span class="comment">//这个时候就需要深拷贝</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">pre</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ch = pre.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> pre !== <span class="string">'object'</span>)&#123;</div><div class="line">            ch = pre;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;</div><div class="line">            ch = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(pre))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> pre)&#123;</div><div class="line">                ch[i] = <span class="keyword">typeof</span> pre[i] === <span class="string">'object'</span> ?</div><div class="line">                (pre[i].constructor === <span class="built_in">Array</span> ? pre[i].slice() : deepCopy(pre[i]))</div><div class="line">                : pre[i]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="函数是一等对象"><a href="#函数是一等对象" class="headerlink" title="函数是一等对象"></a>函数是一等对象</h5><p>在JavaScript中，函数是一等对象<br>可以存储在变量中<br>可以作为参数传给其他函数<br>可以作为返回值从其他函数传出<br>还可以在运行时进行构造<br>可以用function(){…}这样的语法创建匿名函数<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>()&#123;</div><div class="line">    var foo = <span class="number">20</span><span class="comment">;</span></div><div class="line">    var bar = <span class="number">2</span><span class="comment">;</span></div><div class="line">    alert(<span class="name">foo*bar</span>)<span class="comment">;</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p>
<p>这个函数在定义后便会立即执行<br>匿名函数可以用来创建闭包<br>闭包是一个受到保护的变量空间<br>由内嵌函数生成</p>
<h5 id="对象的易变性"><a href="#对象的易变性" class="headerlink" title="对象的易变性"></a>对象的易变性</h5><p>JavaScript中,一切都是对象<br>除了三种原始类型(布尔型、数值型、字符串类型)<br>即便是这几种类型在必要时候也会被自动封装成对象<br>而且所有对象都是易变的(mutable)<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为函数添加属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispalyError</span><span class="params">(message)</span></span>&#123;</div><div class="line">    dispalyError.numTimesExecuted++;</div><div class="line">    alert(message);</div><div class="line">&#125;</div><div class="line">dispalyError.numTimesExecuted = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//对定义的类和实例化的对象进行修改</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    getName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;,</div><div class="line">    getAge:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> alice = <span class="keyword">new</span> Person(<span class="string">'Alice'</span>,<span class="number">39</span>);</div><div class="line"><span class="keyword">var</span> bill = <span class="keyword">new</span> Person(<span class="string">'Bill'</span>,<span class="number">20</span>);</div><div class="line">Person.prototype.getGreeting = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hi '</span>+ <span class="keyword">this</span>.getName()+<span class="string">'!'</span>;</div><div class="line">&#125;</div><div class="line">alice.displayGreeting = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.getGreeting);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>继承在JavaScript中不像在别的面向对象语言中那样简单<br>JavaScript使用的是基于对象的继承<br>它也可以用来模仿基于类的继承<br>Es6中新增了extends实现继承<br>后面会有文章相信讲讲继承</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我看来前端(Js)就好比是个剑客江湖&lt;br&gt;江湖中有人练react宝典，有人练vue神功&lt;br&gt;有人锻造webpack利剑&lt;br&gt;…&lt;br&gt;而Js就是这些的基础心法，决定这些宝典,神功最后在你手上的杀伤力&lt;br&gt;那么作为最基础的心法，你真的参透的了吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>从实时聊天谈谈通信协议</title>
    <link href="https://luyi10year.github.io/2016/12/26/websockt-chat-node/"/>
    <id>https://luyi10year.github.io/2016/12/26/websockt-chat-node/</id>
    <published>2016-12-26T04:20:16.000Z</published>
    <updated>2017-01-06T10:46:16.728Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端开发人员<br>了解前后端通信协议还是很必须的<br>尤其是在用Node写服务端的时候<br>对于请求的响应处理和返回有很大的帮助<br><a id="more"></a><br>客户端与服务端的通信协议有HTTP(HTTPS)协议和WebSocket协议<br>HTTP协议是无状态的，服务端进行处理返回response后很难主动向客户端发送数据<br>WebSocket协议实现了客户端与服务端的全双工通信<br>扩展了客户端与服务端的通信功能<br>使服务端也能主动向客户端发送数据<br>在WebSocket协议提出之前<br>要实现即时通信、实时数据这样的功能，经常会使用轮询(polling)和Comet技术</p>
<p>轮询是最原始的实现实时Web应用的解决方案。<br>轮询技术要求客户端以设定的时间间隔周期性地向服务端发送请求，频繁地查询是否有新的数据改动。<br>明显地，这种方法会导致过多不必要的请求，浪费流量和服务器资源</p>
<p>Comet技术又可以分为长轮询和流技术。<br>长轮询改进了上述的轮询技术，减小了无用的请求。<br>它会为某些数据设定过期时间，当数据过期后才会向服务端发送请求；<br>这种机制适合数据的改动不是特别频繁的情况。<br>流技术通常是指客户端使用一个隐藏的窗口与服务端建立一个HTTP长连接，<br>服务端会不断更新连接状态以保持HTTP长连接存活；<br>这样的话，服务端就可以通过这条长连接主动将数据发送给客户端；<br>流技术在大并发环境下，可能会考验到服务端的性能。</p>
<p>WebSocket，真正实现了Web的实时通信</p>
<h5 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h5><p>HTTP(Hypertext Transfer Protocol 超文本传输协议)是一个基于请求与响应模式的、无状态的、应用层的协议<br>HTTP限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接<br>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。<br>缺少状态意味着如果后续处理需要前面的信息，则它必须重传，<br>这样可能导致每次连接传送的数据量增大。<br>另一方面，在服务器不需要先前信息时它的应答就较快。</p>
<blockquote>
<p>HTTP的常用请求方法<br>GET     请求获取Request-URI所标识的资源<br>POST    在Request-URI所标识的资源后附加新的数据<br>HEAD    请求获取由Request-URI所标识的资源的响应消息报头</p>
<p>请求和响应都包含请求头或响应头header和可选的请求体或响应体Body(自由的文本)<br>只有POST请求包含一个Body<br>Content-type常用的MiME类型<br>application/x-wwwform-urlencoded  经过编码的键值对请求字符串(Body)，web服务器需要解码字符串获得参数<br>text/xml,application/xml Body是XML文档<br>text/plain 普通文本<br>text/html, text/xhtml Body是(X)HTML内容，web服务器端发送的标准web页面或内容片段<br>text/javascript Body是一段JavaScript代码<br>image/png, image/jpeg, image/gif：Body是二进制图像</p>
</blockquote>
<h5 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h5><p>HTTPS(Secure Hypertext Transfer Protocol 安全超文本传输协议)<br>是一个安全通信通道，它基于HTTP开发，用于在客户计算机和服务器之间交换信息。<br>它使用安全套接字层(SSL)进行信息交换，简单来说它是HTTP的安全版。<br>HTTP协议是不安全的，可以轻松对窃听你跟 Web 服务器之间的数据传输<br>在很多情况下，客户和服务器之间传输的是敏感信息，需要防止未经授权的访问</p>
<p>HTTPS协议在TCP协议上加了层SSL协议</p>
<blockquote>
<p>网络七层协议<br>应用层 Http Https<br>表示层 SSL TLS<br>会话层<br>传输层 TCP<br>网络层 IP<br>数据链路层<br>物理层</p>
</blockquote>
<p>SSL 包含如下动作：<br>1.验证服务器端<br>2.允许客户端和服务器端选择加密算法和密码，确保双方都支持<br>3.验证客户端(可选)<br>4.使用公钥加密技术来生成共享加密数据<br>5.创建一个加密的 SSL 连接<br>6.基于该 SSL 连接传递 HTTP 请求</p>
<h5 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h5><p>TCP(Transmission Control Protocol 传输控制协议)是一种面向连接的、可靠的、基于字节流的传输层通信协议<br>连接时三次握手<br>第一次Client端发送SYN报文请求连接<br>第二次Server端接受连接后回复ACK报文，并且为这次连接分配资源<br>第三次Client端接收ACK报文后向Server端发送ACK报文，并分配资源<br>TCP连接建立</p>
<p>断开时四次握手<br>第一次Client发起中断连接，发送FIN报文<br>第二次Server端接到FIN报文后，发送ACK报文，(可能还有数据没有传输完)，Client进入FIN_WAIT状态<br>第三次Server端确定数据已经发送完成，则向Client端发送FIN报文，准备好关闭连接<br>第四次Client端接收FIN报文,知道可以关闭连接，但不相信网络,怕Server端不知道要关闭，发送ACK报文，并进入TIME_WAIT状态<br>Server端收到ACK报文后断开连接<br>Client端等待了一定时间(依赖实现方法)后，没有收到Server回复，表示Server端已正常关闭，Client端也关闭链接<br>TCP连接关闭</p>
<h5 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h5><p>AJAX (Asynchronous Javascript And XML 异步JavaScript和XML)，是指一种创建交互式网页应用的网页开发技术。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"><span class="bullet">* </span>open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求</div><div class="line"><span class="bullet">* </span>method：请求的类型；GET 或 POST</div><div class="line"><span class="bullet">* </span>url：文件在服务器上的位置</div><div class="line"><span class="bullet">* </span>async：true（异步）或 false（同步）</div><div class="line"><span class="bullet">*</span></div><div class="line"><span class="bullet">* </span>send(string) 将请求发送到服务器</div><div class="line"><span class="bullet">* </span>string：仅用于 POST 请求</div><div class="line"><span class="bullet">*</span></div><div class="line"><span class="bullet">* </span>setRequestHeader(header,value) 向请求添加 HTTP 头</div><div class="line"><span class="bullet">* </span>header: 规定头的名称</div><div class="line"><span class="bullet">* </span>value: 规定头的值</div><div class="line"><span class="bullet">*</span></div><div class="line"><span class="bullet">* </span>responseText	获得字符串形式的响应数据。</div><div class="line"><span class="bullet">* </span>responseXML	获得XML形式的响应数据。</div><div class="line"><span class="bullet">*</span></div><div class="line"><span class="bullet">* </span>onreadystatechange 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数</div><div class="line"><span class="bullet">*</span></div><div class="line"><span class="bullet">* </span>readyState 存有 XMLHttpRequest 的状态 从 0 到 4 发生变化</div><div class="line"><span class="bullet">* </span>0: 请求未初始化</div><div class="line"><span class="bullet">* </span>1: 服务器连接已建立</div><div class="line"><span class="bullet">* </span>2: 请求已接收</div><div class="line"><span class="bullet">* </span>3: 请求处理中</div><div class="line"><span class="bullet">* </span>4: 请求已完成，且响应已就绪</div><div class="line"><span class="bullet">*</span></div><div class="line"><span class="bullet">* </span>status</div><div class="line"><span class="bullet">* </span>200: "OK"</div><div class="line"><span class="bullet">* </span>404: 未找到页面</div><div class="line"><span class="bullet">* </span><span class="strong">*/</span></div><div class="line"></div><div class="line">var xmlhttp = new XMLHttpRequest();</div><div class="line">xmlhttp.open(<span class="emphasis">'POST'</span>,url,true);</div><div class="line">xmlhttp.setRequestHeader(<span class="emphasis">'Content-type'</span>,<span class="emphasis">'application/x-www-form-urlencoded'</span>);</div><div class="line">xmlhttp.send(<span class="emphasis">'page=2&amp;size=10'</span>);</div><div class="line">xmlhttp.onreadystatechange = function()&#123;</div><div class="line"><span class="code">    if(xmlhttp.readystate == 4)&#123;</span></div><div class="line"><span class="code">        if(xmlhttp.status == 200)&#123;</span></div><div class="line"><span class="code">            console.log(xmlhttp.responseText);</span></div><div class="line"><span class="code">        &#125;</span></div><div class="line"><span class="code">        else&#123;</span></div><div class="line"><span class="code">            //异常</span></div><div class="line"><span class="code">        &#125;</span></div><div class="line"><span class="code">    &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h5><p>websocket协议本质上是一个基于TCP的协议<br>是先通过HTTP/HTTPS协议发起一条特殊的HTTP请求进行握手后创建一个用于交换数据的TCP连接<br>此后服务端与客户端通过此TCP连接进行实时通信</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//客户端</span></div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8181/'</span>);</div><div class="line"><span class="comment">//连接发生错误的回调方法</span></div><div class="line">ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//websocket 在任何时候都会处于下面4种状态中的其中一种</span></div><div class="line"><span class="comment">//CONNECTING (0) 表示还没建立连接</span></div><div class="line"><span class="comment">//OPEN (1)       已经建立连接，可以进行通讯</span></div><div class="line"><span class="comment">//CLOSING (2)    通过关闭握手，正在关闭连接</span></div><div class="line"><span class="comment">//CLOSED (3)     连接已经关闭或无法打开</span></div><div class="line"><span class="comment">//WebSocket.OPEN = 1;</span></div><div class="line"><span class="comment">//连接成功建立的回调方法</span></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(ws.readyState === <span class="number">1</span>)&#123;</div><div class="line">        wsSend(<span class="string">'msg'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//接收到消息的回调方法</span></div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">//e.data</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//连接关闭的回调方法</span></div><div class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsSend</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">    ws.send(rs);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsEnd</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ws.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//服务端(Node)</span></div><div class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server,</div><div class="line">    ws = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8181</span> &#125;),</div><div class="line">    clients = [],</div><div class="line">    clientNum = <span class="number">0</span>;</div><div class="line">ws.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>)</span>&#123;</div><div class="line">    clientNum ++;</div><div class="line">    clients.push(&#123;<span class="string">'ws'</span>:ws&#125;);</div><div class="line">    ws.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">        wsSend(rs);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsSend</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;clients.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> clientSocket = clients[i].ws;</div><div class="line">        <span class="keyword">if</span> (clientSocket.readyState === <span class="number">1</span>) &#123;</div><div class="line">            clientSocket.send(<span class="built_in">JSON</span>.stringify(rs));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为前端开发人员&lt;br&gt;了解前后端通信协议还是很必须的&lt;br&gt;尤其是在用Node写服务端的时候&lt;br&gt;对于请求的响应处理和返回有很大的帮助&lt;br&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://luyi10year.github.io/tags/Node/"/>
    
      <category term="websocket" scheme="https://luyi10year.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Git自动化部署</title>
    <link href="https://luyi10year.github.io/2016/12/22/automated-deployment/"/>
    <id>https://luyi10year.github.io/2016/12/22/automated-deployment/</id>
    <published>2016-12-22T09:42:46.000Z</published>
    <updated>2016-12-28T04:35:23.528Z</updated>
    
    <content type="html"><![CDATA[<p>每次更新完博客,得先push到github上<br>然后在服务器上把代码pull下来部署</p>
<p>一开始 忍了<br>后来 够了</p>
<a id="more"></a>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29829715&auto=0&height=66"></iframe><br>(码字太累，来首震撼的歌)</p>
<p>整理一下<br>需要的是本地push成功后服务器上能自动执行pull命令<br>那么问题就变成了如何响应每次的push操作?</p>
<h5 id="WebHooks"><a href="#WebHooks" class="headerlink" title="WebHooks"></a>WebHooks</h5><p>Webhook就是用户通过自定义回调函数的方式来改变Web应用的一种行为，<br>这些回调函数可以由不是该Web应用官方的第三方用户或者开发人员来维护，修改。<br>通过Webhook，你可以自定义一些行为通知到指定的URL去。</p>
<p>那么每次push时候接受到请求，然后执行pull脚本，问题就解决了</p>
<h5 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h5><p>github 支持webhook<br>在github项目中选择setting<br>webhooks<br>Payload URL  请求地址<br>Content type 请求类型<br>Secret  密文(请求之后用作校验)</p>
<h5 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h5><p>通过node接受请求作出响应</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</div><div class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/deploy'</span>, <span class="attr">secret</span>: <span class="string">''</span> &#125;)</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        res.statusCode = <span class="number">404</span></div><div class="line">        res.end(<span class="string">'no such location'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;).listen(<span class="number">8989</span>)</div><div class="line"></div><div class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用pull脚本</span></div><div class="line">    process.exec(<span class="string">'git pull origin master'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (error !== <span class="literal">null</span>) &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'exec error: '</span> + error);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这个时候每次push的时候，会发送一个请求到 url:8989/deylop<br>通过node 服务会作出相应操作</p>
<h5 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h5><p>nginx 方向代理<br>将8989 代理到80端口<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">       <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">       <span class="attribute">server_name</span> <span class="string">''</span>;</div><div class="line"></div><div class="line">       <span class="attribute">location</span> /deploy &#123;</div><div class="line">               <span class="attribute">proxy_pass</span> http://localhost:8989;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>通过forever 启动node 服务</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次更新完博客,得先push到github上&lt;br&gt;然后在服务器上把代码pull下来部署&lt;/p&gt;
&lt;p&gt;一开始 忍了&lt;br&gt;后来 够了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://luyi10year.github.io/tags/Git/"/>
    
      <category term="服务器" scheme="https://luyi10year.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://luyi10year.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>谈谈</title>
    <link href="https://luyi10year.github.io/2016/12/20/diary-2016-1220-1430/"/>
    <id>https://luyi10year.github.io/2016/12/20/diary-2016-1220-1430/</id>
    <published>2016-12-20T06:29:27.000Z</published>
    <updated>2016-12-21T03:32:39.668Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=135355&auto=0&height=66"></iframe>


<a id="more"></a>
<p><img src="/assets/blogImg/timeout.gif" alt="dpr"></p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=135355&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://luyi10year.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>1px != 1px -- 移动端适配浅析</title>
    <link href="https://luyi10year.github.io/2016/12/19/rem-layout/"/>
    <id>https://luyi10year.github.io/2016/12/19/rem-layout/</id>
    <published>2016-12-19T09:28:08.000Z</published>
    <updated>2016-12-29T10:08:34.181Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/rem-dpr.png" alt="dpr"><br>css中我们一般使用px作为单位<br>在pc上css中的1个像素往往对应着电脑屏幕中的1个物理像素<br>这可能会给我们造成一个错觉<br>css中的像素等于设备的物理像素<br>但实际情况却并非如此<br>css中的像素只是一个抽象的单位<br>在不同的设备或不同的环境中<br>css中的1px所代表的设备物理像素是不同的<br><a id="more"></a><br>典型的就是retina屏</p>
<p>首先我们先了解几个概念</p>
<h5 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h5><p>viewport 是用户网页的可视区域<br>pc中就是屏幕宽度<br>移动设备中viewport(这个虚拟窗口)比屏幕宽 一般为980<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=<span class="string">"viewport"</span> <span class="built_in">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</div><div class="line">移动端布局viewport的宽度设为理想宽度</div><div class="line">layout viewport 默认的viewport 比屏幕宽 document.documentElement.clientWidth</div><div class="line">visual viewport  浏览器可视区域的大小 window.innerWidth</div><div class="line">ideal viewport 最适合移动设备的viewport</div><div class="line"><span class="built_in">width</span>：控制 viewport 的大小，可以指定的一个值，如果 <span class="number">600</span>，或者特殊的值，如 device-<span class="built_in">width</span> 为设备的宽度（单位为缩放为 <span class="number">100</span><span class="symbol">%</span> 时的 CSS 的像素）。</div><div class="line"><span class="built_in">height</span>：和 <span class="built_in">width</span> 相对应，指定高度。</div><div class="line">initial-<span class="built_in">scale</span>：初始缩放比例，也即是当页面第一次 <span class="built_in">load</span> 的时候缩放比例。</div><div class="line">maximum-<span class="built_in">scale</span>：允许用户缩放到的最大比例。</div><div class="line">minimum-<span class="built_in">scale</span>：允许用户缩放到的最小比例。</div><div class="line">user-scalable：用户是否可以手动缩放。</div></pre></td></tr></table></figure></p>
<h5 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h5><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元<br>在操作系统的调度下<br>每一个设备像素都有自己的颜色值和亮度值。</p>
<h5 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h5><p>设备独立像素(也叫密度无关像素)<br>可以认为是计算机坐标系统中得一个点<br>这个点代表一个可以由程序使用的虚拟像素(比如: css像素)<br>简单点就是屏幕宽高</p>
<h5 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h5><p>设备像素比 ＝ 物理像素 / 设备独立像素<br>5,6的dpr=2，1个css像素等于2个物理像素<br>6p的dpr=3,1个css像素等于3个物理像素</p>
<p>那首先我们在移动端布局，viewport肯定不能是默认的值<br>最终viewport宽度等于应该等于设备的宽度<br>我们的布局视图应该是 按照物理像素来布局<br>设备独立像素可获得<br>设备像素比 window.devicePixelRatio<br>现在假设 在iphone6上布局</p>
<p>此时dpr = 2,<br>dip = 375<br>物理像素应该是 dpr * dip = 750<br>div{<br>    border-top:1px solid #000;<br>}<br>现在在页面上要实现一个1px的上边框<br>由于移动端布局viewport缩成设备宽度<br>而分辨率没有变<br>所以这时的1px会有2px的效果</p>
<p>这个时候可以手动将viewport 宽度设成物理像素的宽度，然后将整个页面缩小 dpr 倍</p>
<meta name="viewport" content="dpr*dip, initial-scale= 1/dpr ,maximum-scale= 1/dpr ,minimum-scale=1/dpr ,user-scalable=no">

<p>1px 的问题解决了，那如何解决在不同手机显示设计稿中的一个100x100的div<br>设计稿 750<br>其中div 100x100<br>750的设计稿对应的是iPhone6<br>结合上面viewport的缩放<br>div{<br>    width:100px;<br>    height:100px;<br>}<br>在6上跟设计稿是完全相同的<br>而在5(640)上会变大</p>
<p>这个时候可以通过rem在不同设备上动态计算出比例值</p>
<p>假设在750设计稿中 1rem = 100px<br>那么在640设计稿中 1rem = 640/750*100px<br>此时1rem 不管在5上还是6上显示都完全跟在设计稿中显示效果相同<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html</span></div><div class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">//动态计算rem</span></div><div class="line"><span class="keyword">var</span> domDocEL = <span class="built_in">window</span>.<span class="built_in">document</span>.documentElement,</div><div class="line">    mateViewPort = <span class="built_in">window</span>.<span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'meta[name="viewport"]'</span>),</div><div class="line">    nBasePsdWidth = <span class="number">750</span> / <span class="number">100</span>,</div><div class="line">    nDpr = <span class="built_in">window</span>.devicePixelRatio,</div><div class="line">    nScale = <span class="number">1</span> / nDpr,</div><div class="line">    nLayout = domDocEL.clientWidth,</div><div class="line">    nRem = nLayout * nDpr / nBasePsdWidth;</div><div class="line"></div><div class="line">domDocEL.style.fontSize = rem +<span class="string">'px'</span>;</div><div class="line">mateViewPort.setAttribute(<span class="string">'content'</span>,<span class="string">'width='</span>+nDpr*nLayout+<span class="string">',initial-scale='</span>+nScale+<span class="string">',maximum-scale='</span>+nScale+<span class="string">',minimum-scale='</span>+nScale+<span class="string">',user-scalable=no'</span>);</div></pre></td></tr></table></figure></p>
<p>对于字体可以用写个mixin方法<br>根据不同的dpr设置字号<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> px2rem(<span class="variable">$name</span>,<span class="variable">$px</span>) &#123;</div><div class="line">   <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</div><div class="line">     #&#123;<span class="variable">$name</span>&#125;: <span class="variable">$px</span>*<span class="number">2</span>/<span class="number">2</span>+px;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>移动端布局将viewport设成物理像素的大小,然后在缩放为dpr的倒数倍。<br>dpr不存在？<br>简单点~~~<br>那就指定为1！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/rem-dpr.png&quot; alt=&quot;dpr&quot;&gt;&lt;br&gt;css中我们一般使用px作为单位&lt;br&gt;在pc上css中的1个像素往往对应着电脑屏幕中的1个物理像素&lt;br&gt;这可能会给我们造成一个错觉&lt;br&gt;css中的像素等于设备的物理像素&lt;br&gt;但实际情况却并非如此&lt;br&gt;css中的像素只是一个抽象的单位&lt;br&gt;在不同的设备或不同的环境中&lt;br&gt;css中的1px所代表的设备物理像素是不同的&lt;br&gt;
    
    </summary>
    
    
      <category term="H5" scheme="https://luyi10year.github.io/tags/H5/"/>
    
      <category term="Rem" scheme="https://luyi10year.github.io/tags/Rem/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="https://luyi10year.github.io/2016/12/18/react/"/>
    <id>https://luyi10year.github.io/2016/12/18/react/</id>
    <published>2016-12-18T05:50:35.000Z</published>
    <updated>2017-02-05T08:30:03.326Z</updated>
    
    <content type="html"><![CDATA[<p>整理整理思绪<br>在props里使用 onClick={ this.handleClick.bind(this) }<br>或者 onClick={ (e) =&gt; this.handleClick(e) }<br>或者 onClick={ ::this.handleClick }<br>都会产生性能问题，所以现在eslint在语法检查时就会阻止这几种写法，<br>问题原因是每一次render的时候如果遇到这些写法，<br>都会重新用handleClick函数与this去绑定从而重新创建一个新的函数，影响性能。<br>如果使用下面的写法则不会每次都创建：<br>// 1.<br>constructor() {<br>    this.handleClick = this.handleClick.bind(this);<br>}<br>handleClick(e) { /<em> … </em>/ }<br>// 2.<br>handleClick = (e) =&gt; { /<em> … </em>/ };</p>
<p>箭头函数不能用？<br>Parsing error: Unexpected token =<br>babel-eslint</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理整理思绪&lt;br&gt;在props里使用 onClick={ this.handleClick.bind(this) }&lt;br&gt;或者 onClick={ (e) =&amp;gt; this.handleClick(e) }&lt;br&gt;或者 onClick={ ::this.handle
    
    </summary>
    
    
      <category term="react" scheme="https://luyi10year.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://luyi10year.github.io/2016/12/17/vue/"/>
    <id>https://luyi10year.github.io/2016/12/17/vue/</id>
    <published>2016-12-17T05:50:25.000Z</published>
    <updated>2016-12-22T07:02:52.315Z</updated>
    
    <content type="html"><![CDATA[<p>整理整理思绪</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理整理思绪&lt;/p&gt;

    
    </summary>
    
    
      <category term="vue" scheme="https://luyi10year.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://luyi10year.github.io/2016/12/16/webpack/"/>
    <id>https://luyi10year.github.io/2016/12/16/webpack/</id>
    <published>2016-12-16T06:29:27.000Z</published>
    <updated>2016-12-28T03:51:27.389Z</updated>
    
    <content type="html"><![CDATA[<p>关于webpack的教程网上一抓一大把<br>就不班门弄斧了<br>这里只是总结一些webpack的实用配置以及个人心得</p>
<a id="more"></a>
<h5 id="entry-amp-output"><a href="#entry-amp-output" class="headerlink" title="entry&amp;output"></a>entry&amp;output</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">enpty:&#123;</div><div class="line">    <span class="attr">index</span>:<span class="string">'./index.js'</span>,</div><div class="line">    <span class="attr">more</span>:[<span class="string">'./more2.js'</span>,<span class="string">'./more.js'</span>],</div><div class="line">    <span class="attr">vendor</span>: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-router'</span>]</div><div class="line">&#125;</div><div class="line">putput:&#123;</div><div class="line">    <span class="attr">path</span>:<span class="string">'./build'</span>,</div><div class="line">    <span class="attr">filename</span>:<span class="string">'[name]-[id].js'</span>,</div><div class="line">    <span class="attr">publicPath</span>:<span class="string">'/assets/'</span>,</div><div class="line">    <span class="attr">chunkFilename</span>:<span class="string">'[name]-[chunkhash]'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//[id], chunk的id</span></div><div class="line"><span class="comment">//[name] ,chunk名</span></div><div class="line"><span class="comment">//[hash], 编译哈希值</span></div><div class="line"><span class="comment">//[chunkhash] , chunk的hash值  根据模块内容</span></div><div class="line"><span class="comment">//output.publicPath：设置为想要的资源访问路径。</span></div><div class="line"><span class="comment">//访问时，则需要通过类似http://localhost:8080/asstes/index-1.js来访问资源，</span></div><div class="line"><span class="comment">//如果没有设置，则默认从站点根目录加载。</span></div><div class="line"></div><div class="line"><span class="comment">//filename应该比较好理解，就是对应于entry里面生成出来的文件名。比如：</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="string">"index"</span>: <span class="string">"pages/index.jsx"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].min.js"</span>,</div><div class="line">        <span class="attr">chunkFilename</span>: <span class="string">"[name].min.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//生成出来的文件名为index.min.js。</span></div><div class="line"><span class="comment">//chunkname我的理解是未被列在entry中，</span></div><div class="line"><span class="comment">//却又需要被打包出来的文件命名配置。</span></div><div class="line"><span class="comment">//什么场景需要呢？我们项目就遇到过，在按需加载（异步）模块的时候，</span></div><div class="line"><span class="comment">//这样的文件是没有被列在entry中的，如使用CommonJS的方式异步加载模块：</span></div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"modules/tips.jsx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"modules/tips.jsx"</span>);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;, <span class="string">'tips'</span>);</div><div class="line"><span class="comment">//异步加载的模块是要以文件形式加载哦，</span></div><div class="line"><span class="comment">//所以这时生成的文件名是以chunkname配置的，</span></div><div class="line"><span class="comment">//生成出的文件名就是tips.min.js。</span></div><div class="line"><span class="comment">//（require.ensure() API的第三个参数是给这个模块命名，</span></div><div class="line"><span class="comment">//否则 chunkFilename: "[name].min.js" 中的 [name] 是一个自动分配的、可读性很差的id，</span></div><div class="line"><span class="comment">//这是我在文档很不起眼的地方788发现的。。。）</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">          <span class="attr">names</span>: [<span class="string">'vendor'</span>],</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">test: </span>/\.(gif|jpg|png)$/,</div><div class="line">loader: 'url-loader?limit=1024&amp;name=img/[name].[ext]'</div><div class="line">//小于1024字节 采用base64</div><div class="line">//大于1024字节 正常打包到output目录下img文件夹中</div></pre></td></tr></table></figure>
<h5 id="js-loader"><a href="#js-loader" class="headerlink" title="js-loader"></a>js-loader</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//babel</span></div><div class="line"> <span class="comment">//配置 .babelrc</span></div><div class="line"> <span class="comment">//.rc run command 程序启动阶段被调用</span></div><div class="line"> <span class="comment">//执行babal-loader时自动执行</span></div><div class="line"></div><div class="line"> &#123;</div><div class="line">   <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">   <span class="string">"plugins"</span>: [</div><div class="line">     <span class="string">"transform-class-properties"</span>,</div><div class="line">     <span class="string">"transform-runtime"</span></div><div class="line">   ]</div><div class="line"> &#125;</div><div class="line"> <span class="comment">//webpack.config.js</span></div><div class="line"> &#123;</div><div class="line">    test: <span class="regexp">/\.js$/</span>,</div><div class="line">    <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">    loader:<span class="string">'babel'</span></div><div class="line"> &#125;,</div><div class="line"></div><div class="line"><span class="comment">//不使用.babelrc</span></div><div class="line"> &#123;</div><div class="line">   test: <span class="regexp">/\.js$/</span>,</div><div class="line">   <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">   loader: <span class="string">'babel'</span>,</div><div class="line">   query: &#123;</div><div class="line">       presets: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">       plugins: [</div><div class="line">           <span class="string">"transform-class-properties"</span>,</div><div class="line">           <span class="string">"transform-runtime"</span></div><div class="line">           ]</div><div class="line">        &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure>
<h5 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attribute">test</span>: /\.js$/,</div><div class="line">   loader: <span class="string">'babel'</span>,</div><div class="line">   exclude: /node_modules/,</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">   <span class="attribute">test</span>:/\.vue$/,</div><div class="line">   loader:<span class="string">'vue'</span>,</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">babel</span>: &#123;</div><div class="line">        <span class="attribute">presets</span>: [<span class="string">'es2015'</span>],</div><div class="line">        plugins: [<span class="string">"transform-class-properties"</span>,</div><div class="line">                  <span class="string">"transform-runtime"</span>]</div><div class="line">&#125;,</div><div class="line"><span class="selector-tag">vue</span>:&#123;</div><div class="line">    <span class="attribute">loaders</span>:&#123;</div><div class="line">       js:<span class="string">'babel'</span>,</div><div class="line">       scss:[<span class="string">'vue-style-loader'</span>,<span class="string">'css'</span>,<span class="string">'sass'</span>].<span class="built_in">join</span>(<span class="string">'!'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h5 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h5><p>loader 采取管道流<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loader: [<span class="string">'style'</span>,<span class="string">'css'</span>,<span class="string">'scss'</span>].<span class="keyword">join</span>(<span class="string">'!'</span>)</div></pre></td></tr></table></figure></p>
<p> 提取样式到单独文件<br> 插件 extract-text-webpack-plugin<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line">&#123;</div><div class="line">   <span class="attr">test</span>: <span class="regexp">/\.(scss|sass|css)$/</span>,</div><div class="line">   <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">plugins: [</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>)</div><div class="line">        <span class="comment">//output目录下</span></div><div class="line">  ],</div></pre></td></tr></table></figure></p>
<p> css样式自动 fix<br> 插件 autoprefixer(postcss插件)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.(scss|sass|css)$/</span>,</div><div class="line">    <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, [<span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span>])</div><div class="line"> &#125;</div><div class="line"><span class="keyword">const</span> AUTOPREFIXER_BROWSERS = [</div><div class="line">    <span class="string">'Android &gt;= 4'</span>,</div><div class="line">    <span class="string">'Chrome &gt;= 35'</span>,</div><div class="line">    <span class="string">'Firefox &gt;= 31'</span>,</div><div class="line">    <span class="string">'Explorer &gt;= 9'</span>,</div><div class="line">    <span class="string">'iOS &gt;= 7'</span>,</div><div class="line">    <span class="string">'Opera &gt;= 12'</span>,</div><div class="line">    <span class="string">'Safari &gt;= 7.1'</span></div><div class="line">]</div><div class="line"> postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> [autoprefixer(&#123; <span class="attr">browsers</span>: AUTOPREFIXER_BROWSERS &#125;)];</div><div class="line">   &#125;,</div></pre></td></tr></table></figure>
<h5 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="attribute">test</span>: /\.(woff|svg|eot|ttf).$/,</div><div class="line">      loader: <span class="string">"file-loader?name=fonts/[name].[ext]"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var moment = require(<span class="string">'moment'</span>);</div><div class="line"><span class="comment">//编译很慢 也就是说，请求的是 moment 的源码。</span></div><div class="line"><span class="comment">//实际上，通过 NPM 安装 moment 的时候会同时安装 moment 的源码和压缩后的代码</span></div><div class="line"><span class="comment">//var moment = require('moment/min/moment-with-locales.min.js');</span></div><div class="line"><span class="comment">//只不过这样改，可读性会有所下降，</span></div><div class="line"><span class="comment">//而且每一个用到 moment 的地方都得这么写。</span></div><div class="line"><span class="comment">//另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。</span></div><div class="line"><span class="comment">//下面来看看用 Webpack 怎么解决这个问题。</span></div><div class="line"><span class="symbol"> resolve:</span> &#123;</div><div class="line"><span class="symbol">     alias:</span> &#123;</div><div class="line"><span class="symbol">         moment:</span> <span class="string">"moment/min/moment-with-locales.min.js"</span></div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//可以用 alias 指定从非npm引入的库，如</span></div><div class="line"><span class="string">jquery:</span> path.resolve(__dirname, <span class="string">'./bower_components/jquery/dist/jquery.js'</span>) ，</div><div class="line">这样在 <span class="keyword">import</span> 时可以替换引用路径</div><div class="line"></div><div class="line"><span class="comment">// require时省略的扩展名，如：require('app') 不需要app.js</span></div><div class="line"><span class="string">extensions:</span> [<span class="string">''</span>,<span class="string">'.js'</span>,<span class="string">'.vue'</span>,<span class="string">'.scss'</span>],</div></pre></td></tr></table></figure>
<h5 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h5><p>module.noParse 是 webpack 的另一个很有用的配置项，<br>如果你 确定一个模块中没有其它新的依赖 就可以配置这项，<br>webpack 将不再扫描这个文件中的依赖。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">module</span>: &#123;</div><div class="line">   <span class="attribute">noParse</span>: [/moment-with-locales/]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h5 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h5><p>通常，JavaScript的解释器会告诉你，第几行第几列代码出错。<br>但是，这对于转换后的代码毫无用处。<br>举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。<br>你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。<br>这就是Source map想要解决的问题。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">devtool:</span> <span class="string">'#source-map'</span></div></pre></td></tr></table></figure></p>
<h5 id="hot-reload"><a href="#hot-reload" class="headerlink" title="hot reload"></a>hot reload</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package.json</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline"</span>,</div><div class="line">    &#125;,</div><div class="line">--content-base 内容基本路径 不加默认当前目录</div><div class="line">--colors       输出加颜色</div><div class="line"><span class="symbol">path:</span> <span class="string">"./dist"</span>,</div><div class="line"><span class="symbol">filename:</span> <span class="string">"[name].js"</span>,</div><div class="line"><span class="symbol">publicPath:</span> <span class="string">"abababab"</span>,</div><div class="line">publicPath 必须设置 这里设置什么名 html里引用就写什么名字</div><div class="line"><span class="params">&lt;script src="/abababab/main.js"&gt;</span><span class="params">&lt;/script&gt;</span></div><div class="line"></div><div class="line">npm run dev</div></pre></td></tr></table></figure>
<h5 id="webpack-w"><a href="#webpack-w" class="headerlink" title="webpack -w"></a>webpack -w</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//webstrom 会在临时文件夹中创建一个文件用来保存(好像没有出发实际文件的变更)</div><div class="line">setting</div><div class="line">Appearance &amp; Behavior</div><div class="line">System Settings</div><div class="line"><span class="keyword">Use</span> <span class="string">"safe write"</span>(<span class="keyword">save</span> changes <span class="keyword">to</span> a <span class="keyword">temporary</span> <span class="keyword">file</span> <span class="keyword">first</span>) 勾去掉</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于webpack的教程网上一抓一大把&lt;br&gt;就不班门弄斧了&lt;br&gt;这里只是总结一些webpack的实用配置以及个人心得&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://luyi10year.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>学点运维，配个服务器</title>
    <link href="https://luyi10year.github.io/2016/12/15/aliyun/"/>
    <id>https://luyi10year.github.io/2016/12/15/aliyun/</id>
    <published>2016-12-15T09:08:08.000Z</published>
    <updated>2016-12-22T07:04:25.926Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://imgs.ebrun.com/resources/2016_11/2016_11_23/2016112329114798900788972.png" alt="aliyun"></p>
<p>前段时间和同事合租了一个阿里云服务器，60几块钱一个月。<br>服务器上的资源环境很多都是他配的，<br>作为前端，只是在上面放点静态的东西，也没太大兴趣在这方面去摸索<br>然后这货今天离职了。</p>
<a id="more"></a>
<p>走之前，悠悠然发了我一个连接<br>阿里云搞活动 <a href="http://click.aliyun.com/m/8360/" target="_blank" rel="external">传送门</a> 服务器免费赠送6个月</p>
<p>果断入手(要买个9块钱的套餐)</p>
<p>然后<br>买域名<br>解析DNS<br>配nginx<br>装git<br>搭node</p>
<p>也算是小入门了</p>
<hr>
<p>But 我想说的是<br>作为一个开发人员and 一个合格的开发人员<br>首先具备的应该是解决问题，查找问题的能力</p>
<p>而不是一有问题不假思索的问别人<br>有时候多学一样本领,就早说一句求人的话</p>
<p>作为我们作为初学者<br>总会碰到各种各样的问题<br>那么，怎么解决？</p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>linux git的安装</p>
<p>忽略前面下载解压过程</p>
<blockquote>
<p>./configure –prefix=/usr/local<br>make &amp; make install</p>
</blockquote>
<p>果断报错。。<br>OK 下载各种依赖<br>报错<br>继续<br>安装成功<br>git –version<br>嗯 有版本号<br>easy嘛<br>然后 来 git clone ..<br>error:fatal: Unable to find remote helper for ‘https’<br>又报错，奔溃</p>
<p>这是因为Git环境没有安装完全，需要重新安装</p>
<blockquote>
<p>./configure –prefix=/usr/local<br>make all doc<br>make install install-doc install-man install-html</p>
</blockquote>
<p>继续 OK<br>问题解决</p>
<p>那么这解决问题的过程 就比解决问题来的跟有用<br>前提是问题是你自己解决的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://imgs.ebrun.com/resources/2016_11/2016_11_23/2016112329114798900788972.png&quot; alt=&quot;aliyun&quot;&gt;&lt;/p&gt;
&lt;p&gt;前段时间和同事合租了一个阿里云服务器，60几块钱一个月。&lt;br&gt;服务器上的资源环境很多都是他配的，&lt;br&gt;作为前端，只是在上面放点静态的东西，也没太大兴趣在这方面去摸索&lt;br&gt;然后这货今天离职了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://luyi10year.github.io/tags/Git/"/>
    
      <category term="服务器" scheme="https://luyi10year.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://luyi10year.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>In city</title>
    <link href="https://luyi10year.github.io/2016/12/14/in-city/"/>
    <id>https://luyi10year.github.io/2016/12/14/in-city/</id>
    <published>2016-12-14T10:40:08.000Z</published>
    <updated>2016-12-22T07:04:36.524Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/city.jpg" alt="City"></p>
<p>悠然<br>随心<br>随性<br>随缘<br><a id="more"></a><br>杭州，省会<br>美丽的西湖（我也只去过西湖。。）<br>一年前，在这<br>我开启了前端之旅</p>
<p>那谁说过，在风口，是只猪也能飞起来。<br>何况是在杭州这样的互联网台风中。。</p>
<p>但是风过了，依然在飞的却是鹰</p>
<p>麻雀从不担心树枝会断<br>因为他相信的不是树枝<br>而是自己的翅膀</p>
<p>身处互联网大时代<br>机会很多，机遇很多<br>首先飞起来<br>然后去充实自己<br>不断学习不断进步</p>
<p>最后<br>风即使过了<br>我们也进化成了鹰</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/city.jpg&quot; alt=&quot;City&quot;&gt;&lt;/p&gt;
&lt;p&gt;悠然&lt;br&gt;随心&lt;br&gt;随性&lt;br&gt;随缘&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://luyi10year.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Node-Spider</title>
    <link href="https://luyi10year.github.io/2016/12/13/node-spider/"/>
    <id>https://luyi10year.github.io/2016/12/13/node-spider/</id>
    <published>2016-12-13T10:41:55.000Z</published>
    <updated>2017-01-16T02:38:15.856Z</updated>
    
    <content type="html"><![CDATA[<p>Node学习入门，练习爬虫再适合不过了<br>这里通过爬区某图片网站近(10万张图片)的例子，介绍爬虫的过程</p>
<a id="more"></a>
<h5 id="爬虫分析设计"><a href="#爬虫分析设计" class="headerlink" title="爬虫分析设计"></a>爬虫分析设计</h5><p>抓取的是 ‘<a href="http://www.mzitu.com" target="_blank" rel="external">http://www.mzitu.com</a>‘ 网站<br>图片大致有五个类目<br>每个类目下分页规则<br><a href="http://www.mzitu.com/类目/page/1" target="_blank" rel="external">http://www.mzitu.com/类目/page/1</a><br><a href="http://www.mzitu.com/类目/page/2" target="_blank" rel="external">http://www.mzitu.com/类目/page/2</a></p>
<p>每一个有25个专题<br>专题详情页 <a href="http://www.mzitu.com/专题id" target="_blank" rel="external">http://www.mzitu.com/专题id</a><br>专题详情页分页规则<br><a href="http://www.mzitu.com/专题id/1" target="_blank" rel="external">http://www.mzitu.com/专题id/1</a><br><a href="http://www.mzitu.com/专题id/2" target="_blank" rel="external">http://www.mzitu.com/专题id/2</a></p>
<p>因此第一次鉴于此 爬虫设计如下<br>先获取单个类目下专题(图片和Id)<br>专题图片根据 类目/当前page数/图片  路径保存<br>将获取的id暂存<br>知道获取完全部全部类目专题<br>然后开始获取专题详情<br>确定要获取的专题详情的所有分页数<br>最后爬区所有分页数</p>
<h5 id="用到的模块"><a href="#用到的模块" class="headerlink" title="用到的模块"></a>用到的模块</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>); <span class="comment">//请求封装模块</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);  <span class="comment">//并发控制模块</span></div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>); <span class="comment">//抓取页面dom节点模块</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div></pre></td></tr></table></figure>
<h5 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sUrl = <span class="string">'http://www.mzitu.com'</span>; <span class="comment">//爬取目标</span></div><div class="line"><span class="keyword">var</span> aItems = []; <span class="comment">//单个类目下需要爬取的链接</span></div><div class="line"><span class="keyword">var</span> aTagList = [<span class="string">'/'</span>,<span class="string">'/xinggan'</span>,<span class="string">'/japan'</span>,<span class="string">'/taiwan'</span>,<span class="string">'/mm'</span>]; <span class="comment">//所有类目</span></div><div class="line"><span class="keyword">var</span> aDirList = [<span class="string">'index'</span>,<span class="string">'xinggan'</span>,<span class="string">'japan'</span>,<span class="string">'taiwan'</span>,<span class="string">'mm'</span>]; <span class="comment">//爬取存放路径</span></div><div class="line"><span class="keyword">var</span> nCurrentTag = <span class="number">0</span>; <span class="comment">//当前爬取类目</span></div><div class="line"><span class="keyword">var</span> aIdList = []; <span class="comment">//专题Id</span></div><div class="line"><span class="keyword">var</span> aNextPage = []; <span class="comment">//专题详情</span></div><div class="line"><span class="keyword">var</span> aNxtItems = []; <span class="comment">//专题详情下需要爬区的链接</span></div></pre></td></tr></table></figure>
<h5 id="获取所有专题"><a href="#获取所有专题" class="headerlink" title="获取所有专题"></a>获取所有专题</h5><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">    superagent</div><div class="line">            .get(page)</div><div class="line">            .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, response</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">                    <span class="built_in">console</span>.log(err.status);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</div><div class="line">                    <span class="built_in">var</span> $ = cheerio.load(response.text);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">var</span> nPageLen = $(<span class="string">'.nav-links a.next'</span>).prev().text();  <span class="comment">// 获取页数</span></div><div class="line">                <span class="keyword">for</span>(<span class="built_in">var</span> i = <span class="number">0</span>;i &lt; nPageLen ;i++)&#123;</div><div class="line">                    aItems.push(page+<span class="string">'/page/'</span>+(i+<span class="number">1</span>));</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">var</span> sName = page.replace(<span class="string">'http://www.mzitu.com'</span>,<span class="string">''</span>);</div><div class="line">                sName = sName ? <span class="attribute">sName</span> : <span class="string">'index'</span>;</div><div class="line">                <span class="comment">// 新建类目 存放目录</span></div><div class="line">                fs.mkdir(__dirname+<span class="string">'/uploa/'</span>+sName.replace(<span class="string">'/'</span>,<span class="string">''</span>),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(err)&#123;</div><div class="line">                        <span class="keyword">throw</span> err</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                fetchPage();</div><div class="line">            &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchPage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">var</span> concurrencyCount = <span class="number">0</span>;</div><div class="line">    <span class="built_in">var</span> fetchUrl = <span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>)</span>&#123;</div><div class="line">        <span class="built_in">var</span> fetchStart = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">        concurrencyCount++;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'并发数'</span>+concurrencyCount+<span class="string">'====url:'</span>+<span class="built_in">url</span>);</div><div class="line">        superagent.get(<span class="built_in">url</span>)</div><div class="line">            .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(err)&#123;</div><div class="line">                    <span class="comment">// callback(err,url);</span></div><div class="line">                    <span class="comment">// return next(err);</span></div><div class="line">                &#125;</div><div class="line">                <span class="built_in">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - fetchStart;</div><div class="line">                <span class="comment">// console.log('抓取'+url+'成功,耗时'+time)</span></div><div class="line">                concurrencyCount--;</div><div class="line">                <span class="keyword">if</span>(res.status === <span class="number">200</span>)&#123;</div><div class="line">                    <span class="built_in">var</span> $ = cheerio.load(res.text);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//爬取数据处理</span></div><div class="line">                getDetail($,<span class="built_in">url</span>,<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">                    <span class="comment">// _html += rs;</span></div><div class="line">                &#125;)</div><div class="line">                callback();</div><div class="line">            &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 控制并发数</span></div><div class="line">    <span class="keyword">async</span>.mapLimit(aItems,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">myUrl,callback</span>)</span>&#123;</div><div class="line">        fetchUrl(myUrl,callback);</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">        nCurrentTag++;</div><div class="line">        <span class="keyword">if</span>(nCurrentTag &lt; aTagList.length)&#123;</div><div class="line">            <span class="comment">// console.log('====================开始抓取下一个类目====================');</span></div><div class="line">            aItems = [];</div><div class="line">            start(sUrl+aTagList[nCurrentTag]);</div><div class="line">        &#125;</div><div class="line">        <span class="title">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'====================开始抓取详情页========================='</span>);</div><div class="line">            <span class="comment">// getNextPage();</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetail</span>(<span class="params">$,url,callback</span>)</span>&#123;</div><div class="line">    <span class="comment">//确定图片名称</span></div><div class="line">    <span class="built_in">var</span> dirList = <span class="built_in">url</span>.replace(<span class="string">'http://www.mzitu.com/'</span>,<span class="string">''</span>).split(<span class="string">'/'</span>);</div><div class="line">    <span class="built_in">var</span> dirName = dirList[<span class="number">0</span>]+<span class="string">'/'</span>+dirList[<span class="number">1</span>]+dirList[<span class="number">2</span>];</div><div class="line">    <span class="keyword">if</span>(dirList.length &lt; <span class="number">3</span>)&#123;</div><div class="line">       dirName = <span class="string">'index/'</span>+dirList[<span class="number">0</span>]+dirList[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">var</span> domItemA = $(<span class="string">'#pins li a'</span>); <span class="comment">// 获取Id</span></div><div class="line">    <span class="built_in">var</span> domItem = $(<span class="string">'#pins li a img'</span>); <span class="comment">//获取图片</span></div><div class="line">    <span class="built_in">var</span> srcList = []</div><div class="line">    domItem.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx,element</span>)</span>&#123;</div><div class="line">        <span class="built_in">var</span> $ele = $(element);</div><div class="line">        <span class="built_in">var</span> src = $ele.attr(<span class="string">'data-original'</span>);</div><div class="line">        <span class="built_in">var</span> id = $ele.parent().attr(<span class="string">'href'</span>).replace(<span class="string">'http://www.mzitu.com/'</span>,<span class="string">''</span>);</div><div class="line">        aSrcList.push(src);</div><div class="line">        aIdList.push(id);</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 下载专题图片</span></div><div class="line">    downImg(aSrcList,dirName);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">downImg</span>(<span class="params">list,dirName</span>)</span>&#123;</div><div class="line">    fs.mkdir(__dirname+<span class="string">'/upload/'</span>+dirName,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;</div><div class="line">            <span class="keyword">throw</span> err</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    <span class="built_in">var</span> savePath = __dirname+<span class="string">'/uploa/'</span>+dirName+<span class="string">'/'</span> + narr[<span class="number">0</span>]  +<span class="string">'_'</span>+ narr[<span class="number">1</span>] + <span class="string">'_'</span> + narr[<span class="number">2</span>];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">binaryParser</span>(<span class="params">res, callback</span>) </span>&#123;</div><div class="line">            res.setEncoding(<span class="string">'binary'</span>);</div><div class="line">            <span class="built_in">var</span> imgData = <span class="string">''</span>;</div><div class="line">            res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">                imgData += chunk;</div><div class="line">            &#125;);</div><div class="line">            res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                fs.writeFile(savePath, <span class="keyword">new</span> Buffer(imgData, <span class="string">'binary'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">                            <span class="keyword">if</span>(err) &#123;</div><div class="line">                                <span class="built_in">console</span>.log(err);</div><div class="line">                            &#125;</div><div class="line">                            <span class="built_in">console</span>.log(<span class="built_in">url</span>+<span class="string">'下载成功'</span>)</div><div class="line">                        &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">var</span> downUrl = <span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>)</span>&#123;</div><div class="line">        <span class="built_in">var</span> narr = <span class="built_in">url</span>.replace(<span class="string">"http://i.meizitu.net/thumbs/"</span>, <span class="string">""</span>).split(<span class="string">"/"</span>)</div><div class="line">        supergent.get(<span class="built_in">url</span>)</div><div class="line">        <span class="comment">// .pipe(fs.createWriteStream(savePath))</span></div><div class="line">                .parse(binaryParser)</div><div class="line">                .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</div><div class="line"></div><div class="line">                &#125;)</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">async</span>.mapLimit(<span class="built_in">list</span>,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">myUrl,callback</span>)</span>&#123;</div><div class="line">        downUrl(myUrl,callback);</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node学习入门，练习爬虫再适合不过了&lt;br&gt;这里通过爬区某图片网站近(10万张图片)的例子，介绍爬虫的过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://luyi10year.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node-Module-API</title>
    <link href="https://luyi10year.github.io/2016/12/13/node-module-api/"/>
    <id>https://luyi10year.github.io/2016/12/13/node-module-api/</id>
    <published>2016-12-13T08:12:42.000Z</published>
    <updated>2017-01-09T02:19:58.869Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Node" scheme="https://luyi10year.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node-server</title>
    <link href="https://luyi10year.github.io/2016/12/13/node-server/"/>
    <id>https://luyi10year.github.io/2016/12/13/node-server/</id>
    <published>2016-12-13T07:43:25.000Z</published>
    <updated>2017-01-10T02:44:07.011Z</updated>
    
    <content type="html"><![CDATA[<p>用Node搭建一个静态资源访问服务器</p>
<a id="more"></a>
<p>用到的模块<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</div><div class="line">    <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">'url'</span>),</div><div class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div></pre></td></tr></table></figure></p>
<p>思路 获取访问路径，以文件后缀判断文件类型<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var mimetype = &#123;</div><div class="line">    <span class="symbol">'txt'</span>: <span class="symbol">'text</span>/plain',</div><div class="line">    <span class="symbol">'html'</span>: <span class="symbol">'text</span>/html',</div><div class="line">    <span class="symbol">'css'</span>: <span class="symbol">'text</span>/css',</div><div class="line">    <span class="symbol">'xml'</span>: <span class="symbol">'application</span>/xml',</div><div class="line">    <span class="symbol">'json'</span>: <span class="symbol">'application</span>/json',</div><div class="line">    <span class="symbol">'js'</span>: <span class="symbol">'application</span>/javascript',</div><div class="line">    <span class="symbol">'jpg'</span>: <span class="symbol">'image</span>/jpeg',</div><div class="line">    <span class="symbol">'jpeg'</span>: <span class="symbol">'image</span>/jpeg',</div><div class="line">    <span class="symbol">'gif'</span>: <span class="symbol">'image</span>/gif',</div><div class="line">    <span class="symbol">'png'</span>: <span class="symbol">'image</span>/png',</div><div class="line">    <span class="symbol">'svg'</span>: <span class="symbol">'image</span>/svg+xml'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取请求的时候判断请求文件是否存在，决定返回的类型</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">http.createServer(<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(req.url).pathname,</div><div class="line">        realPath = path.join(__dirname,<span class="string">'/static'</span>,pathname);</div><div class="line">    <span class="keyword">var</span> body = [];</div><div class="line">    req.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</div><div class="line">        body.push(data);</div><div class="line">    &#125;)</div><div class="line">    req.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        body = Buffer.concat(body);</div><div class="line">    &#125;)</div><div class="line">    fs.exists(realPath,<span class="function"><span class="keyword">function</span><span class="params">(ex)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(ex)&#123;</div><div class="line">            <span class="keyword">var</span> rs = fs.createReadStream(realPath);</div><div class="line">            res.writeHead(<span class="number">200</span>,&#123;</div><div class="line">                <span class="string">'Content-Type'</span>:mimetype[realPath.split(<span class="string">'.'</span>).pop()] || <span class="string">'text/plain'</span></div><div class="line">            &#125;)</div><div class="line">            rs.on(<span class="string">'data'</span>,res.write.bind(res))</div><div class="line">            rs.on(<span class="string">'close'</span>,res.end.bind(res));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            page_404(req,res,realPath); <span class="comment">//错误页面</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<p>请求不存在</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="xml">function page_404(req,res,path)</span><span class="template-variable">&#123;</span></div><div class="line">    res.writeHead(404,&#123;</div><div class="line">        'Content-Type':'text/html'</div><div class="line">    &#125;<span class="xml">)</span></div><div class="line">    res.write('<span class="meta">&lt;!doctype html&gt;</span>\n');</div><div class="line">    res.write('<span class="tag">&lt;<span class="name">title</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">title</span>&gt;</span>\n');</div><div class="line">    res.write('<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Not Found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>');</div><div class="line">    res.write(</div><div class="line">        '<span class="tag">&lt;<span class="name">p</span>&gt;</span>The requested URL ' +</div><div class="line">        path +</div><div class="line">        ' was not found on this server.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>'</div><div class="line">    );</div><div class="line">    res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Node搭建一个静态资源访问服务器&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://luyi10year.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node-各个模块</title>
    <link href="https://luyi10year.github.io/2016/12/12/node-base/"/>
    <id>https://luyi10year.github.io/2016/12/12/node-base/</id>
    <published>2016-12-12T10:41:55.000Z</published>
    <updated>2017-01-06T10:43:19.360Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/node.jpg" alt="node"></p>
<blockquote>
<p>Node<br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>哈哈 先占上<br>到时候再补</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/node.jpg&quot; alt=&quot;node&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node&lt;br&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://luyi10year.github.io/tags/Node/"/>
    
  </entry>
  
</feed>
