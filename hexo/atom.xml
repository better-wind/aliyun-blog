<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis Blog</title>
  <subtitle>Louis/十年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luyi10year.github.io/"/>
  <updated>2017-01-05T11:27:41.485Z</updated>
  <id>https://luyi10year.github.io/</id>
  
  <author>
    <name>Louis</name>
    <email>wjf550@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈js的继承</title>
    <link href="https://luyi10year.github.io/2017/01/03/es5-es6-extends/"/>
    <id>https://luyi10year.github.io/2017/01/03/es5-es6-extends/</id>
    <published>2017-01-03T03:53:25.000Z</published>
    <updated>2017-01-05T11:27:41.485Z</updated>
    
    <content type="html"><![CDATA[<p>js中的继承<br><a id="more"></a></p>
<h5 id="apply-amp-amp-call继承"><a href="#apply-amp-amp-call继承" class="headerlink" title="apply&amp;&amp;call继承"></a>apply&amp;&amp;call继承</h5><h5 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h5><h5 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h5><h5 id="Es6-extends"><a href="#Es6-extends" class="headerlink" title="Es6 extends"></a>Es6 extends</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js中的继承&lt;br&gt;
    
    </summary>
    
    
      <category term="Es6" scheme="https://luyi10year.github.io/tags/Es6/"/>
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Js中的设计模式</title>
    <link href="https://luyi10year.github.io/2017/01/01/js-design-patterns/"/>
    <id>https://luyi10year.github.io/2017/01/01/js-design-patterns/</id>
    <published>2017-01-01T10:09:48.000Z</published>
    <updated>2017-01-03T10:11:02.790Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解Js中的作用域和上下文</title>
    <link href="https://luyi10year.github.io/2016/12/30/es5-scope-closure/"/>
    <id>https://luyi10year.github.io/2016/12/30/es5-scope-closure/</id>
    <published>2016-12-30T10:06:06.000Z</published>
    <updated>2017-01-05T11:31:30.574Z</updated>
    
    <content type="html"><![CDATA[<p>函数的每次调用都有与之紧密相关的作用域和上下文<br>这俩者是完全不同的<br>作用域(Scope) 是基于函数的<br>作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的<br>而上下文(Context)是基于对象的<br>上下文始终是this关键字的值，它是拥有(控制)当前所执行代码的对象的引用。</p>
<a id="more"></a>
<h5 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h5><p>首先只有函数具有作用域<br>也就是说，在一个函数内部声明的变量在函数外部无法访问<br>JavaScript的作用域是词法性质的<br>这这意味着函数运行在定义它的作用域中<br>而不是在调用它的作用域中<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span>&#123;</div><div class="line">        a *= <span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> baz = foo();</div><div class="line">baz(); <span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<p>Es6之前 局部变量只能存在于函数体中<br>Es6开始支持let声明变量 局部变量能存在于块级作用域<br>通过var声明的变量会出现变量提升的问题</p>
<blockquote>
<p>变量的 声明周期<br>声明阶段(Declaration phase)<br>初始化阶段(Initialization phase)<br>   初始化阶段：variable = undefined<br>赋值阶段(Assignment phase)<br>   赋值阶段后：variable = ‘value’</p>
</blockquote>
<p>var<br>变量在函数作用域的开始位置就完成了声明阶段(variable)和初始化阶段(var variable)，这两个阶段之间没有任何间隙<br>let<br>变量通过声明阶段(foo)后，会进去暂时性死区，此时变量不可访问，直到初始化阶段(let foo)之后，变量才可以被访问<br>所以变量提升是变量的耦合声明并且在作用域的顶部完成初始化<br>然而let生命周期中将声明和初始化阶段解耦。这一解耦使 let 的变量提升现象消失。</p>
<h5 id="上下文-Context"><a href="#上下文-Context" class="headerlink" title="上下文(Context)"></a>上下文(Context)</h5><p>上下文通常取决于函数是如何被调用的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当一个函数作为对象中的一个方法被调用的时候,this就设置为调用该方法的对象</span></div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">bar</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === foo)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foo.bar() <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">//当使用new操作符创造对象的实例时,函数的作用域内部this的值被设置为新创建的实例</span></div><div class="line"><span class="keyword">let</span> aThis = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    aThis.push(<span class="keyword">this</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//foo&#123;x:1&#125;</span></div><div class="line">    <span class="comment">//foo&#123;x:2&#125;</span></div><div class="line">&#125;</div><div class="line">foo.prototype.baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">    <span class="comment">//1</span></div><div class="line">    <span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> foo(<span class="number">1</span>);</div><div class="line"><span class="keyword">new</span> foo(<span class="number">2</span>);</div><div class="line">aThis.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    item.baz();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h5 id="执行环境-execution-context"><a href="#执行环境-execution-context" class="headerlink" title="执行环境(execution context)"></a>执行环境(execution context)</h5><p>执行环境 定义了变量或函数有权访问的数据，决定它们各自的行为<br>Js是单线程的，当JavaScript解释器初始化执行代码时，会默认进入全局执行环境<br>此后函数的每次调用都会创建一个新的执行环境<br>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中<br>在函数执行完后，栈将其环境弹出，把控制权返回给之前的执行环境。<br>ECMAScript程序中的执行流正是由这个便利的机制控制着<br>执行环境可以分为创建和执行两个阶段。<br>在创建阶段，解析器首先会创建一个变量对象（variable object，也称为活动对象 activation object），<br>它由定义在执行环境中的变量、函数声明、和参数组成。<br>在这个阶段，作用域链会被初始化， this 的值也会被最终确定。<br>在执行阶段，代码被解释执行。</p>
<h5 id="作用域链-scope-chain"><a href="#作用域链-scope-chain" class="headerlink" title="作用域链(scope chain)"></a>作用域链(scope chain)</h5><p>当代码在一个环境中执行时<br>会创建变量对象的一个作用域链<br>作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问<br>作用域链包含了在环境栈中的每个执行环境对应的变量对象<br>内部环境可以通过作用域链访问所有的外部环境<br>但是外部环境不能访问内部环境中的任何变量和函数<br>这些环境之间的联系是线性的、有次序的</p>
<h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>闭包是指有权访问另一函数作用域中的变量的函数<br>在函数内定义一个嵌套的函数时，就构成了一个闭包<br>它允许嵌套函数访问外层函数的变量<br>通过返回嵌套函数，允许你维护对外部函数中局部变量、参数、和内函数声明的访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//模块模式最流行的闭包类型之一，它允许你模拟公共的、私有的、和特权成员</span></div><div class="line"><span class="keyword">let</span> Module = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> privateProperty = <span class="string">'foo'</span>;</div><div class="line">    fucntion privateMethod()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">publicProperty</span>:<span class="string">''</span>,</div><div class="line">        <span class="attr">publicMethod</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">privilegedMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> privateMethod(<span class="built_in">arguments</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)()</div><div class="line"><span class="comment">//另一种类型的闭包被称为 立即执行的函数表达式(IIFE) Es5中</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> foo, bar;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">private</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Module = &#123;</div><div class="line"></div><div class="line">        <span class="attr">public</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.Module = Module;</div><div class="line">&#125;)(<span class="keyword">this</span>);</div><div class="line"><span class="comment">//保护全局命名空间免受变量污染</span></div><div class="line"><span class="keyword">var</span> baz;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> foo = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> bar = <span class="number">2</span>;</div><div class="line">    baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> foo * bar;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div><div class="line">baz(); <span class="comment">//20</span></div><div class="line"><span class="comment">//保护私用private变量</span></div></pre></td></tr></table></figure></p>
<h5 id="apply-amp-call-amp-bind"><a href="#apply-amp-call-amp-bind" class="headerlink" title="apply&amp;call&amp;bind"></a>apply&amp;call&amp;bind</h5><p>apply和call内建在所有的函数中(它们是Function对象的原型方法)<br>允许你在自定义上下文中执行函数<br>不同点在于，call函数需要参数列表，而apply 函数需要你提供一个参数数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//arguments</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    [].slice.apply(<span class="built_in">arguments</span>);</div><div class="line">    [].sort.apply(<span class="built_in">arguments</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a&gt;b;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//apply在传递参数时会将数组转变成列表集合</span></div><div class="line"><span class="comment">//在一些只能处理列表的方法中可以巧妙地处理</span></div><div class="line"><span class="comment">//求数组最大值</span></div><div class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//3</span></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>,a); <span class="comment">//3</span></div><div class="line"><span class="comment">//两个数组合并</span></div><div class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">    b = [<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="comment">//a.push(b)</span></div><div class="line"><span class="comment">//a [1,2,[3,4]];</span></div><div class="line">[].push.apply(a,b)</div><div class="line"><span class="comment">//a [1,2,3,4];</span></div></pre></td></tr></table></figure></p>
<p>在ES5中引入了 Function.prototype.bind 方法，<br>用于控制函数的执行上下文，它会返回一个新的函数，<br>并且这个新函数会被永久的绑定到 bind 方法的第一个参数所指定的对象上，无论该函数被如何使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//低版本浏览器，我们可以简单的对它进行实现如下(polyfill)</span></div><div class="line"><span class="keyword">if</span>(!(<span class="string">'bind'</span> <span class="keyword">in</span> <span class="built_in">Function</span>.prototype))&#123;</div><div class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> fn = <span class="keyword">this</span>,</div><div class="line">            context = <span class="built_in">arguments</span>[<span class="number">0</span>],</div><div class="line">            args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> fn.apply(context, args.concat(<span class="built_in">arguments</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="Es6箭头函数"><a href="#Es6箭头函数" class="headerlink" title="Es6箭头函数"></a>Es6箭头函数</h5><p>S6中的箭头函数可以作为 Function.prototype.bind() 的替代品。<br>和普通函数不同，箭头函数没有它自己的this值，它的 this 值继承自外围作用域。<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    baz:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> <span class="keyword">self</span> = this;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>&#123;</div><div class="line">            <span class="keyword">self</span>.baz(item);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Es5 bind</span></div><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    baz:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>&#123;</div><div class="line">            <span class="keyword">self</span>.baz(item);</div><div class="line">        &#125;.bind(this))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Es6箭头函数</span></div><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    baz:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="keyword">forEach</span>((item)=&gt;this.baz(item))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数的每次调用都有与之紧密相关的作用域和上下文&lt;br&gt;这俩者是完全不同的&lt;br&gt;作用域(Scope) 是基于函数的&lt;br&gt;作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的&lt;br&gt;而上下文(Context)是基于对象的&lt;br&gt;上下文始终是this关键字的值，它是拥有(控制)当前所执行代码的对象的引用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ECMA-prototype</title>
    <link href="https://luyi10year.github.io/2016/12/28/js-object-prototype/"/>
    <id>https://luyi10year.github.io/2016/12/28/js-object-prototype/</id>
    <published>2016-12-28T10:00:00.000Z</published>
    <updated>2017-01-05T05:46:26.832Z</updated>
    
    <content type="html"><![CDATA[<p>要学好Js，首先必须得先理解原型(prototype)<br>why？<br>js作为面向对象的语言，实现面向对象的机制就是原型！</p>
<a id="more"></a>
<p>都说js中一切皆对象,那到底什么是对象呢？</p>
<blockquote>
<p>对象是属性的集合，并有一个原型对象。原型对象可以是空值。<br>按宿主环境分可以分为<br>原生对象：由ECMAScript规范定义其语义的对象<br>内置对象：由ECMAScript实现提供，独立于宿主环境的对象，ECMAScript程序开始执行时就存在(所有内置对象是原生对象)<br>宿主对象：由宿主环境提供的对象，用于完善ECMAScript执行环境(DOM,BOM)<br>按功能分可以分为：<br>普通对象：无原型对象<br>函数对象：有原型对象(函数对象的一个实例)</p>
</blockquote>
<p>我们这里只关注函数对象<br>那么到底什么是原型呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//凡是通过new Function() 创建的对象都是函数对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="comment">//Bar foo baz 都是函数对象</span></div><div class="line"></div><div class="line"><span class="comment">//原型对象本质是函数对象的一个实例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Bar.prototype</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> Bar();</div><div class="line">Bar.prototype = temp;</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="built_in">Function</span>.prototype = temp</div><div class="line"><span class="comment">//构造器：创建和初始化对象的函数对象(在原型对象prototype中,prototype.constructor)</span></div><div class="line"><span class="comment">//原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象</span></div><div class="line"><span class="comment">//每个由构造器创建的对象拥有一个执行构造器prototype的属性值的隐式引用</span></div><div class="line"><span class="comment">//这个引用称之为原型</span></div><div class="line"><span class="comment">//每个原型可以拥有指向自己原型的隐式引用(原型的原型),就是所谓的原型链</span></div><div class="line"><span class="comment">//每个对象都有一个__proto__属性来实现对原型的隐式引用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line">person.__proto__ = Person.prototype</div><div class="line">Person.prototype.__proto__ = <span class="built_in">Object</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ = <span class="literal">null</span></div><div class="line"><span class="comment">//person对象由构造器Person创建</span></div><div class="line"><span class="comment">//所以person对Person.prototype有隐式引用(__proto__)</span></div><div class="line"><span class="comment">//Person对象又是由构造器Object创建</span></div><div class="line"><span class="comment">//所以Person对Object.prototype有隐式引用(__proto__)</span></div></pre></td></tr></table></figure></p>
<p><img src="/assets/blogImg/prototype.png" alt="Prototype"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要学好Js，首先必须得先理解原型(prototype)&lt;br&gt;why？&lt;br&gt;js作为面向对象的语言，实现面向对象的机制就是原型！&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
      <category term="原型" scheme="https://luyi10year.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>你真的学好Js了吗</title>
    <link href="https://luyi10year.github.io/2016/12/27/js-base/"/>
    <id>https://luyi10year.github.io/2016/12/27/js-base/</id>
    <published>2016-12-27T02:48:41.000Z</published>
    <updated>2017-01-05T11:46:23.001Z</updated>
    
    <content type="html"><![CDATA[<p>在我看来前端(Js)就好比是个剑客江湖<br>江湖中有人练react宝典，有人练vue神功<br>有人锻造webpack利剑<br>…<br>而Js就是这些的基础心法，决定这些宝典,神功最后在你手上的杀伤力<br>那么作为最基础的心法，你真的参透的了吗？</p>
<a id="more"></a>
<blockquote>
<p>这里简单的记录些Js的一些特点</p>
</blockquote>
<h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h5><p>什么是面向对象</p>
<ul>
<li>一切事物皆对象</li>
<li>对象具有封装和继承特性</li>
<li>对象与对象之间使用消息通信，各自存在信息隐藏</li>
</ul>
<p>众所周知Java采用面向对象思想构造其语言，它实现了类、继承、多态、接口等机制。<br>但是这些机制，只是实现面向对象编程的一种方式<br>实际上，Js是通过原型的方式来实现面向对象编程的<br>Js中的对象是依靠构造器(constructor)利用原型(prototype)构造出来的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象的声明</span></div><div class="line"><span class="comment">//字面式对象声明</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//使用函数构造器构造对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//这里的new关键字跟java中 的new毫无关系</span></div><div class="line"><span class="comment">//只是借用了它的关键字new</span></div><div class="line"><span class="comment">//用来表示调用构造器创建对象</span></div></pre></td></tr></table></figure></p>
<h5 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h5><p>在Js中，定义变量不必声明其类型。但这不意味着变量没有类型。<br>原始类型：布尔型、数值型、字符串类型<br>引用类型：对象类型(数组是一种特殊的对象)、函数类型<br>其他类型：空类型和未定义类型<br>js中的变量可以根据所附的值改变类型<br>原始类型按值传送，在栈内存中存的是变量的值<br>引用类型则按引用传送，在栈内存中存的是 引用对象在堆内存中的地址<br>所以这里涉及到引用类型深拷贝和浅拷贝的问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//浅拷贝 把父对象的属性全部拷贝给子对象</span></div><div class="line"><span class="comment">//如果父元素的属性对应的值是引用类型，那子对象对应的属性的值还是引用类型的内存地址</span></div><div class="line"><span class="comment">//这个时候就需要深拷贝</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">pre</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ch = pre.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> pre !== <span class="string">'object'</span>)&#123;</div><div class="line">            ch = pre;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;</div><div class="line">            ch = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(pre))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> pre)&#123;</div><div class="line">                ch[i] = <span class="keyword">typeof</span> pre[i] === <span class="string">'object'</span> ?</div><div class="line">                (pre[i].constructor === <span class="built_in">Array</span> ? pre[i].slice() : deepCopy(pre[i]))</div><div class="line">                : pre[i]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="函数是一等对象"><a href="#函数是一等对象" class="headerlink" title="函数是一等对象"></a>函数是一等对象</h5><p>在JavaScript中，函数是一等对象<br>可以存储在变量中<br>可以作为参数传给其他函数<br>可以作为返回值从其他函数传出<br>还可以在运行时进行构造<br>可以用function(){…}这样的语法创建匿名函数<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>()&#123;</div><div class="line">    var foo = <span class="number">20</span><span class="comment">;</span></div><div class="line">    var bar = <span class="number">2</span><span class="comment">;</span></div><div class="line">    alert(<span class="name">foo*bar</span>)<span class="comment">;</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p>
<p>这个函数在定义后便会立即执行<br>匿名函数可以用来创建闭包<br>闭包是一个受到保护的变量空间<br>由内嵌函数生成</p>
<h5 id="对象的易变性"><a href="#对象的易变性" class="headerlink" title="对象的易变性"></a>对象的易变性</h5><p>JavaScript中,一切都是对象<br>除了三种原始类型(布尔型、数值型、字符串类型)<br>即便是这几种类型在必要时候也会被自动封装成对象<br>而且所有对象都是易变的(mutable)<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为函数添加属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispalyError</span><span class="params">(message)</span></span>&#123;</div><div class="line">    dispalyError.numTimesExecuted++;</div><div class="line">    alert(message);</div><div class="line">&#125;</div><div class="line">dispalyError.numTimesExecuted = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//对定义的类和实例化的对象进行修改</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    getName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;,</div><div class="line">    getAge:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> alice = <span class="keyword">new</span> Person(<span class="string">'Alice'</span>,<span class="number">39</span>);</div><div class="line"><span class="keyword">var</span> bill = <span class="keyword">new</span> Person(<span class="string">'Bill'</span>,<span class="number">20</span>);</div><div class="line">Person.prototype.getGreeting = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hi '</span>+ <span class="keyword">this</span>.getName()+<span class="string">'!'</span>;</div><div class="line">&#125;</div><div class="line">alice.displayGreeting = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.getGreeting);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我看来前端(Js)就好比是个剑客江湖&lt;br&gt;江湖中有人练react宝典，有人练vue神功&lt;br&gt;有人锻造webpack利剑&lt;br&gt;…&lt;br&gt;而Js就是这些的基础心法，决定这些宝典,神功最后在你手上的杀伤力&lt;br&gt;那么作为最基础的心法，你真的参透的了吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://luyi10year.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Let Chat</title>
    <link href="https://luyi10year.github.io/2016/12/26/websockt-chat-node/"/>
    <id>https://luyi10year.github.io/2016/12/26/websockt-chat-node/</id>
    <published>2016-12-26T04:20:16.000Z</published>
    <updated>2017-01-04T11:22:36.563Z</updated>
    
    <content type="html"><![CDATA[<p>简易聊天</p>
<a id="more"></a>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简易聊天&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://luyi10year.github.io/tags/Node/"/>
    
      <category term="websocket" scheme="https://luyi10year.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Git自动化部署</title>
    <link href="https://luyi10year.github.io/2016/12/22/automated-deployment/"/>
    <id>https://luyi10year.github.io/2016/12/22/automated-deployment/</id>
    <published>2016-12-22T09:42:46.000Z</published>
    <updated>2016-12-28T04:35:23.528Z</updated>
    
    <content type="html"><![CDATA[<p>每次更新完博客,得先push到github上<br>然后在服务器上把代码pull下来部署</p>
<p>一开始 忍了<br>后来 够了</p>
<a id="more"></a>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29829715&auto=0&height=66"></iframe><br>(码字太累，来首震撼的歌)</p>
<p>整理一下<br>需要的是本地push成功后服务器上能自动执行pull命令<br>那么问题就变成了如何响应每次的push操作?</p>
<h5 id="WebHooks"><a href="#WebHooks" class="headerlink" title="WebHooks"></a>WebHooks</h5><p>Webhook就是用户通过自定义回调函数的方式来改变Web应用的一种行为，<br>这些回调函数可以由不是该Web应用官方的第三方用户或者开发人员来维护，修改。<br>通过Webhook，你可以自定义一些行为通知到指定的URL去。</p>
<p>那么每次push时候接受到请求，然后执行pull脚本，问题就解决了</p>
<h5 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h5><p>github 支持webhook<br>在github项目中选择setting<br>webhooks<br>Payload URL  请求地址<br>Content type 请求类型<br>Secret  密文(请求之后用作校验)</p>
<h5 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h5><p>通过node接受请求作出响应</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</div><div class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/deploy'</span>, <span class="attr">secret</span>: <span class="string">''</span> &#125;)</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        res.statusCode = <span class="number">404</span></div><div class="line">        res.end(<span class="string">'no such location'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;).listen(<span class="number">8989</span>)</div><div class="line"></div><div class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用pull脚本</span></div><div class="line">    process.exec(<span class="string">'git pull origin master'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (error !== <span class="literal">null</span>) &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'exec error: '</span> + error);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这个时候每次push的时候，会发送一个请求到 url:8989/deylop<br>通过node 服务会作出相应操作</p>
<h5 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h5><p>nginx 方向代理<br>将8989 代理到80端口<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">       <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">       <span class="attribute">server_name</span> <span class="string">''</span>;</div><div class="line"></div><div class="line">       <span class="attribute">location</span> /deploy &#123;</div><div class="line">               <span class="attribute">proxy_pass</span> http://localhost:8989;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>通过forever 启动node 服务</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次更新完博客,得先push到github上&lt;br&gt;然后在服务器上把代码pull下来部署&lt;/p&gt;
&lt;p&gt;一开始 忍了&lt;br&gt;后来 够了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://luyi10year.github.io/tags/Linux/"/>
    
      <category term="Git" scheme="https://luyi10year.github.io/tags/Git/"/>
    
      <category term="服务器" scheme="https://luyi10year.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>谈谈</title>
    <link href="https://luyi10year.github.io/2016/12/20/diary-2016-1220-1430/"/>
    <id>https://luyi10year.github.io/2016/12/20/diary-2016-1220-1430/</id>
    <published>2016-12-20T06:29:27.000Z</published>
    <updated>2016-12-21T03:32:39.668Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=135355&auto=0&height=66"></iframe>


<a id="more"></a>
<p><img src="/assets/blogImg/timeout.gif" alt="dpr"></p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=135355&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://luyi10year.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>1px != 1px -- 移动端适配浅析</title>
    <link href="https://luyi10year.github.io/2016/12/19/rem-layout/"/>
    <id>https://luyi10year.github.io/2016/12/19/rem-layout/</id>
    <published>2016-12-19T09:28:08.000Z</published>
    <updated>2016-12-29T10:08:34.181Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/rem-dpr.png" alt="dpr"><br>css中我们一般使用px作为单位<br>在pc上css中的1个像素往往对应着电脑屏幕中的1个物理像素<br>这可能会给我们造成一个错觉<br>css中的像素等于设备的物理像素<br>但实际情况却并非如此<br>css中的像素只是一个抽象的单位<br>在不同的设备或不同的环境中<br>css中的1px所代表的设备物理像素是不同的<br><a id="more"></a><br>典型的就是retina屏</p>
<p>首先我们先了解几个概念</p>
<h5 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h5><p>viewport 是用户网页的可视区域<br>pc中就是屏幕宽度<br>移动设备中viewport(这个虚拟窗口)比屏幕宽 一般为980<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=<span class="string">"viewport"</span> <span class="built_in">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</div><div class="line">移动端布局viewport的宽度设为理想宽度</div><div class="line">layout viewport 默认的viewport 比屏幕宽 document.documentElement.clientWidth</div><div class="line">visual viewport  浏览器可视区域的大小 window.innerWidth</div><div class="line">ideal viewport 最适合移动设备的viewport</div><div class="line"><span class="built_in">width</span>：控制 viewport 的大小，可以指定的一个值，如果 <span class="number">600</span>，或者特殊的值，如 device-<span class="built_in">width</span> 为设备的宽度（单位为缩放为 <span class="number">100</span><span class="symbol">%</span> 时的 CSS 的像素）。</div><div class="line"><span class="built_in">height</span>：和 <span class="built_in">width</span> 相对应，指定高度。</div><div class="line">initial-<span class="built_in">scale</span>：初始缩放比例，也即是当页面第一次 <span class="built_in">load</span> 的时候缩放比例。</div><div class="line">maximum-<span class="built_in">scale</span>：允许用户缩放到的最大比例。</div><div class="line">minimum-<span class="built_in">scale</span>：允许用户缩放到的最小比例。</div><div class="line">user-scalable：用户是否可以手动缩放。</div></pre></td></tr></table></figure></p>
<h5 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h5><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元<br>在操作系统的调度下<br>每一个设备像素都有自己的颜色值和亮度值。</p>
<h5 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h5><p>设备独立像素(也叫密度无关像素)<br>可以认为是计算机坐标系统中得一个点<br>这个点代表一个可以由程序使用的虚拟像素(比如: css像素)<br>简单点就是屏幕宽高</p>
<h5 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h5><p>设备像素比 ＝ 物理像素 / 设备独立像素<br>5,6的dpr=2，1个css像素等于2个物理像素<br>6p的dpr=3,1个css像素等于3个物理像素</p>
<p>那首先我们在移动端布局，viewport肯定不能是默认的值<br>最终viewport宽度等于应该等于设备的宽度<br>我们的布局视图应该是 按照物理像素来布局<br>设备独立像素可获得<br>设备像素比 window.devicePixelRatio<br>现在假设 在iphone6上布局</p>
<p>此时dpr = 2,<br>dip = 375<br>物理像素应该是 dpr * dip = 750<br>div{<br>    border-top:1px solid #000;<br>}<br>现在在页面上要实现一个1px的上边框<br>由于移动端布局viewport缩成设备宽度<br>而分辨率没有变<br>所以这时的1px会有2px的效果</p>
<p>这个时候可以手动将viewport 宽度设成物理像素的宽度，然后将整个页面缩小 dpr 倍</p>
<meta name="viewport" content="dpr*dip, initial-scale= 1/dpr ,maximum-scale= 1/dpr ,minimum-scale=1/dpr ,user-scalable=no">

<p>1px 的问题解决了，那如何解决在不同手机显示设计稿中的一个100x100的div<br>设计稿 750<br>其中div 100x100<br>750的设计稿对应的是iPhone6<br>结合上面viewport的缩放<br>div{<br>    width:100px;<br>    height:100px;<br>}<br>在6上跟设计稿是完全相同的<br>而在5(640)上会变大</p>
<p>这个时候可以通过rem在不同设备上动态计算出比例值</p>
<p>假设在750设计稿中 1rem = 100px<br>那么在640设计稿中 1rem = 640/750*100px<br>此时1rem 不管在5上还是6上显示都完全跟在设计稿中显示效果相同<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html</span></div><div class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">//动态计算rem</span></div><div class="line"><span class="keyword">var</span> domDocEL = <span class="built_in">window</span>.<span class="built_in">document</span>.documentElement,</div><div class="line">    mateViewPort = <span class="built_in">window</span>.<span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'meta[name="viewport"]'</span>),</div><div class="line">    nBasePsdWidth = <span class="number">750</span> / <span class="number">100</span>,</div><div class="line">    nDpr = <span class="built_in">window</span>.devicePixelRatio,</div><div class="line">    nScale = <span class="number">1</span> / nDpr,</div><div class="line">    nLayout = domDocEL.clientWidth,</div><div class="line">    nRem = nLayout * nDpr / nBasePsdWidth;</div><div class="line"></div><div class="line">domDocEL.style.fontSize = rem +<span class="string">'px'</span>;</div><div class="line">mateViewPort.setAttribute(<span class="string">'content'</span>,<span class="string">'width='</span>+nDpr*nLayout+<span class="string">',initial-scale='</span>+nScale+<span class="string">',maximum-scale='</span>+nScale+<span class="string">',minimum-scale='</span>+nScale+<span class="string">',user-scalable=no'</span>);</div></pre></td></tr></table></figure></p>
<p>对于字体可以用写个mixin方法<br>根据不同的dpr设置字号<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> px2rem(<span class="variable">$name</span>,<span class="variable">$px</span>) &#123;</div><div class="line">   <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</div><div class="line">     #&#123;<span class="variable">$name</span>&#125;: <span class="variable">$px</span>*<span class="number">2</span>/<span class="number">2</span>+px;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>移动端布局将viewport设成物理像素的大小,然后在缩放为dpr的倒数倍。<br>dpr不存在？<br>简单点~~~<br>那就指定为1！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/rem-dpr.png&quot; alt=&quot;dpr&quot;&gt;&lt;br&gt;css中我们一般使用px作为单位&lt;br&gt;在pc上css中的1个像素往往对应着电脑屏幕中的1个物理像素&lt;br&gt;这可能会给我们造成一个错觉&lt;br&gt;css中的像素等于设备的物理像素&lt;br&gt;但实际情况却并非如此&lt;br&gt;css中的像素只是一个抽象的单位&lt;br&gt;在不同的设备或不同的环境中&lt;br&gt;css中的1px所代表的设备物理像素是不同的&lt;br&gt;
    
    </summary>
    
    
      <category term="Rem" scheme="https://luyi10year.github.io/tags/Rem/"/>
    
      <category term="H5" scheme="https://luyi10year.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="https://luyi10year.github.io/2016/12/18/react/"/>
    <id>https://luyi10year.github.io/2016/12/18/react/</id>
    <published>2016-12-18T05:50:35.000Z</published>
    <updated>2016-12-22T07:04:19.209Z</updated>
    
    <content type="html"><![CDATA[<p>整理整理思绪</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理整理思绪&lt;/p&gt;

    
    </summary>
    
    
      <category term="react" scheme="https://luyi10year.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://luyi10year.github.io/2016/12/17/vue/"/>
    <id>https://luyi10year.github.io/2016/12/17/vue/</id>
    <published>2016-12-17T05:50:25.000Z</published>
    <updated>2016-12-22T07:02:52.315Z</updated>
    
    <content type="html"><![CDATA[<p>整理整理思绪</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理整理思绪&lt;/p&gt;

    
    </summary>
    
    
      <category term="vue" scheme="https://luyi10year.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://luyi10year.github.io/2016/12/16/webpack/"/>
    <id>https://luyi10year.github.io/2016/12/16/webpack/</id>
    <published>2016-12-16T06:29:27.000Z</published>
    <updated>2016-12-28T03:51:27.389Z</updated>
    
    <content type="html"><![CDATA[<p>关于webpack的教程网上一抓一大把<br>就不班门弄斧了<br>这里只是总结一些webpack的实用配置以及个人心得</p>
<a id="more"></a>
<h5 id="entry-amp-output"><a href="#entry-amp-output" class="headerlink" title="entry&amp;output"></a>entry&amp;output</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">enpty:&#123;</div><div class="line">    <span class="attr">index</span>:<span class="string">'./index.js'</span>,</div><div class="line">    <span class="attr">more</span>:[<span class="string">'./more2.js'</span>,<span class="string">'./more.js'</span>],</div><div class="line">    <span class="attr">vendor</span>: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-router'</span>]</div><div class="line">&#125;</div><div class="line">putput:&#123;</div><div class="line">    <span class="attr">path</span>:<span class="string">'./build'</span>,</div><div class="line">    <span class="attr">filename</span>:<span class="string">'[name]-[id].js'</span>,</div><div class="line">    <span class="attr">publicPath</span>:<span class="string">'/assets/'</span>,</div><div class="line">    <span class="attr">chunkFilename</span>:<span class="string">'[name]-[chunkhash]'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//[id], chunk的id</span></div><div class="line"><span class="comment">//[name] ,chunk名</span></div><div class="line"><span class="comment">//[hash], 编译哈希值</span></div><div class="line"><span class="comment">//[chunkhash] , chunk的hash值  根据模块内容</span></div><div class="line"><span class="comment">//output.publicPath：设置为想要的资源访问路径。</span></div><div class="line"><span class="comment">//访问时，则需要通过类似http://localhost:8080/asstes/index-1.js来访问资源，</span></div><div class="line"><span class="comment">//如果没有设置，则默认从站点根目录加载。</span></div><div class="line"></div><div class="line"><span class="comment">//filename应该比较好理解，就是对应于entry里面生成出来的文件名。比如：</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="string">"index"</span>: <span class="string">"pages/index.jsx"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].min.js"</span>,</div><div class="line">        <span class="attr">chunkFilename</span>: <span class="string">"[name].min.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//生成出来的文件名为index.min.js。</span></div><div class="line"><span class="comment">//chunkname我的理解是未被列在entry中，</span></div><div class="line"><span class="comment">//却又需要被打包出来的文件命名配置。</span></div><div class="line"><span class="comment">//什么场景需要呢？我们项目就遇到过，在按需加载（异步）模块的时候，</span></div><div class="line"><span class="comment">//这样的文件是没有被列在entry中的，如使用CommonJS的方式异步加载模块：</span></div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"modules/tips.jsx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"modules/tips.jsx"</span>);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;, <span class="string">'tips'</span>);</div><div class="line"><span class="comment">//异步加载的模块是要以文件形式加载哦，</span></div><div class="line"><span class="comment">//所以这时生成的文件名是以chunkname配置的，</span></div><div class="line"><span class="comment">//生成出的文件名就是tips.min.js。</span></div><div class="line"><span class="comment">//（require.ensure() API的第三个参数是给这个模块命名，</span></div><div class="line"><span class="comment">//否则 chunkFilename: "[name].min.js" 中的 [name] 是一个自动分配的、可读性很差的id，</span></div><div class="line"><span class="comment">//这是我在文档很不起眼的地方788发现的。。。）</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">          <span class="attr">names</span>: [<span class="string">'vendor'</span>],</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">test: </span>/\.(gif|jpg|png)$/,</div><div class="line">loader: 'url-loader?limit=1024&amp;name=img/[name].[ext]'</div><div class="line">//小于1024字节 采用base64</div><div class="line">//大于1024字节 正常打包到output目录下img文件夹中</div></pre></td></tr></table></figure>
<h5 id="js-loader"><a href="#js-loader" class="headerlink" title="js-loader"></a>js-loader</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//babel</span></div><div class="line"> <span class="comment">//配置 .babelrc</span></div><div class="line"> <span class="comment">//.rc run command 程序启动阶段被调用</span></div><div class="line"> <span class="comment">//执行babal-loader时自动执行</span></div><div class="line"></div><div class="line"> &#123;</div><div class="line">   <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">   <span class="string">"plugins"</span>: [</div><div class="line">     <span class="string">"transform-class-properties"</span>,</div><div class="line">     <span class="string">"transform-runtime"</span></div><div class="line">   ]</div><div class="line"> &#125;</div><div class="line"> <span class="comment">//webpack.config.js</span></div><div class="line"> &#123;</div><div class="line">    test: <span class="regexp">/\.js$/</span>,</div><div class="line">    <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">    loader:<span class="string">'babel'</span></div><div class="line"> &#125;,</div><div class="line"></div><div class="line"><span class="comment">//不使用.babelrc</span></div><div class="line"> &#123;</div><div class="line">   test: <span class="regexp">/\.js$/</span>,</div><div class="line">   <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">   loader: <span class="string">'babel'</span>,</div><div class="line">   query: &#123;</div><div class="line">       presets: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">       plugins: [</div><div class="line">           <span class="string">"transform-class-properties"</span>,</div><div class="line">           <span class="string">"transform-runtime"</span></div><div class="line">           ]</div><div class="line">        &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure>
<h5 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attribute">test</span>: /\.js$/,</div><div class="line">   loader: <span class="string">'babel'</span>,</div><div class="line">   exclude: /node_modules/,</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">   <span class="attribute">test</span>:/\.vue$/,</div><div class="line">   loader:<span class="string">'vue'</span>,</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">babel</span>: &#123;</div><div class="line">        <span class="attribute">presets</span>: [<span class="string">'es2015'</span>],</div><div class="line">        plugins: [<span class="string">"transform-class-properties"</span>,</div><div class="line">                  <span class="string">"transform-runtime"</span>]</div><div class="line">&#125;,</div><div class="line"><span class="selector-tag">vue</span>:&#123;</div><div class="line">    <span class="attribute">loaders</span>:&#123;</div><div class="line">       js:<span class="string">'babel'</span>,</div><div class="line">       scss:[<span class="string">'vue-style-loader'</span>,<span class="string">'css'</span>,<span class="string">'sass'</span>].<span class="built_in">join</span>(<span class="string">'!'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h5 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h5><p>loader 采取管道流<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loader: [<span class="string">'style'</span>,<span class="string">'css'</span>,<span class="string">'scss'</span>].<span class="keyword">join</span>(<span class="string">'!'</span>)</div></pre></td></tr></table></figure></p>
<p> 提取样式到单独文件<br> 插件 extract-text-webpack-plugin<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line">&#123;</div><div class="line">   <span class="attr">test</span>: <span class="regexp">/\.(scss|sass|css)$/</span>,</div><div class="line">   <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">plugins: [</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>)</div><div class="line">        <span class="comment">//output目录下</span></div><div class="line">  ],</div></pre></td></tr></table></figure></p>
<p> css样式自动 fix<br> 插件 autoprefixer(postcss插件)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.(scss|sass|css)$/</span>,</div><div class="line">    <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, [<span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span>])</div><div class="line"> &#125;</div><div class="line"><span class="keyword">const</span> AUTOPREFIXER_BROWSERS = [</div><div class="line">    <span class="string">'Android &gt;= 4'</span>,</div><div class="line">    <span class="string">'Chrome &gt;= 35'</span>,</div><div class="line">    <span class="string">'Firefox &gt;= 31'</span>,</div><div class="line">    <span class="string">'Explorer &gt;= 9'</span>,</div><div class="line">    <span class="string">'iOS &gt;= 7'</span>,</div><div class="line">    <span class="string">'Opera &gt;= 12'</span>,</div><div class="line">    <span class="string">'Safari &gt;= 7.1'</span></div><div class="line">]</div><div class="line"> postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> [autoprefixer(&#123; <span class="attr">browsers</span>: AUTOPREFIXER_BROWSERS &#125;)];</div><div class="line">   &#125;,</div></pre></td></tr></table></figure>
<h5 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="attribute">test</span>: /\.(woff|svg|eot|ttf).$/,</div><div class="line">      loader: <span class="string">"file-loader?name=fonts/[name].[ext]"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var moment = require(<span class="string">'moment'</span>);</div><div class="line"><span class="comment">//编译很慢 也就是说，请求的是 moment 的源码。</span></div><div class="line"><span class="comment">//实际上，通过 NPM 安装 moment 的时候会同时安装 moment 的源码和压缩后的代码</span></div><div class="line"><span class="comment">//var moment = require('moment/min/moment-with-locales.min.js');</span></div><div class="line"><span class="comment">//只不过这样改，可读性会有所下降，</span></div><div class="line"><span class="comment">//而且每一个用到 moment 的地方都得这么写。</span></div><div class="line"><span class="comment">//另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。</span></div><div class="line"><span class="comment">//下面来看看用 Webpack 怎么解决这个问题。</span></div><div class="line"><span class="symbol"> resolve:</span> &#123;</div><div class="line"><span class="symbol">     alias:</span> &#123;</div><div class="line"><span class="symbol">         moment:</span> <span class="string">"moment/min/moment-with-locales.min.js"</span></div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//可以用 alias 指定从非npm引入的库，如</span></div><div class="line"><span class="string">jquery:</span> path.resolve(__dirname, <span class="string">'./bower_components/jquery/dist/jquery.js'</span>) ，</div><div class="line">这样在 <span class="keyword">import</span> 时可以替换引用路径</div><div class="line"></div><div class="line"><span class="comment">// require时省略的扩展名，如：require('app') 不需要app.js</span></div><div class="line"><span class="string">extensions:</span> [<span class="string">''</span>,<span class="string">'.js'</span>,<span class="string">'.vue'</span>,<span class="string">'.scss'</span>],</div></pre></td></tr></table></figure>
<h5 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h5><p>module.noParse 是 webpack 的另一个很有用的配置项，<br>如果你 确定一个模块中没有其它新的依赖 就可以配置这项，<br>webpack 将不再扫描这个文件中的依赖。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">module</span>: &#123;</div><div class="line">   <span class="attribute">noParse</span>: [/moment-with-locales/]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h5 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h5><p>通常，JavaScript的解释器会告诉你，第几行第几列代码出错。<br>但是，这对于转换后的代码毫无用处。<br>举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。<br>你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。<br>这就是Source map想要解决的问题。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">devtool:</span> <span class="string">'#source-map'</span></div></pre></td></tr></table></figure></p>
<h5 id="hot-reload"><a href="#hot-reload" class="headerlink" title="hot reload"></a>hot reload</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package.json</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline"</span>,</div><div class="line">    &#125;,</div><div class="line">--content-base 内容基本路径 不加默认当前目录</div><div class="line">--colors       输出加颜色</div><div class="line"><span class="symbol">path:</span> <span class="string">"./dist"</span>,</div><div class="line"><span class="symbol">filename:</span> <span class="string">"[name].js"</span>,</div><div class="line"><span class="symbol">publicPath:</span> <span class="string">"abababab"</span>,</div><div class="line">publicPath 必须设置 这里设置什么名 html里引用就写什么名字</div><div class="line"><span class="params">&lt;script src="/abababab/main.js"&gt;</span><span class="params">&lt;/script&gt;</span></div><div class="line"></div><div class="line">npm run dev</div></pre></td></tr></table></figure>
<h5 id="webpack-w"><a href="#webpack-w" class="headerlink" title="webpack -w"></a>webpack -w</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//webstrom 会在临时文件夹中创建一个文件用来保存(好像没有出发实际文件的变更)</div><div class="line">setting</div><div class="line">Appearance &amp; Behavior</div><div class="line">System Settings</div><div class="line"><span class="keyword">Use</span> <span class="string">"safe write"</span>(<span class="keyword">save</span> changes <span class="keyword">to</span> a <span class="keyword">temporary</span> <span class="keyword">file</span> <span class="keyword">first</span>) 勾去掉</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于webpack的教程网上一抓一大把&lt;br&gt;就不班门弄斧了&lt;br&gt;这里只是总结一些webpack的实用配置以及个人心得&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://luyi10year.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>学点运维，配个服务器</title>
    <link href="https://luyi10year.github.io/2016/12/15/aliyun/"/>
    <id>https://luyi10year.github.io/2016/12/15/aliyun/</id>
    <published>2016-12-15T09:08:08.000Z</published>
    <updated>2016-12-22T07:04:25.926Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://imgs.ebrun.com/resources/2016_11/2016_11_23/2016112329114798900788972.png" alt="aliyun"></p>
<p>前段时间和同事合租了一个阿里云服务器，60几块钱一个月。<br>服务器上的资源环境很多都是他配的，<br>作为前端，只是在上面放点静态的东西，也没太大兴趣在这方面去摸索<br>然后这货今天离职了。</p>
<a id="more"></a>
<p>走之前，悠悠然发了我一个连接<br>阿里云搞活动 <a href="http://click.aliyun.com/m/8360/" target="_blank" rel="external">传送门</a> 服务器免费赠送6个月</p>
<p>果断入手(要买个9块钱的套餐)</p>
<p>然后<br>买域名<br>解析DNS<br>配nginx<br>装git<br>搭node</p>
<p>也算是小入门了</p>
<hr>
<p>But 我想说的是<br>作为一个开发人员and 一个合格的开发人员<br>首先具备的应该是解决问题，查找问题的能力</p>
<p>而不是一有问题不假思索的问别人<br>有时候多学一样本领,就早说一句求人的话</p>
<p>作为我们作为初学者<br>总会碰到各种各样的问题<br>那么，怎么解决？</p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>linux git的安装</p>
<p>忽略前面下载解压过程</p>
<blockquote>
<p>./configure –prefix=/usr/local<br>make &amp; make install</p>
</blockquote>
<p>果断报错。。<br>OK 下载各种依赖<br>报错<br>继续<br>安装成功<br>git –version<br>嗯 有版本号<br>easy嘛<br>然后 来 git clone ..<br>error:fatal: Unable to find remote helper for ‘https’<br>又报错，奔溃</p>
<p>这是因为Git环境没有安装完全，需要重新安装</p>
<blockquote>
<p>./configure –prefix=/usr/local<br>make all doc<br>make install install-doc install-man install-html</p>
</blockquote>
<p>继续 OK<br>问题解决</p>
<p>那么这解决问题的过程 就比解决问题来的跟有用<br>前提是问题是你自己解决的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://imgs.ebrun.com/resources/2016_11/2016_11_23/2016112329114798900788972.png&quot; alt=&quot;aliyun&quot;&gt;&lt;/p&gt;
&lt;p&gt;前段时间和同事合租了一个阿里云服务器，60几块钱一个月。&lt;br&gt;服务器上的资源环境很多都是他配的，&lt;br&gt;作为前端，只是在上面放点静态的东西，也没太大兴趣在这方面去摸索&lt;br&gt;然后这货今天离职了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://luyi10year.github.io/tags/Linux/"/>
    
      <category term="Git" scheme="https://luyi10year.github.io/tags/Git/"/>
    
      <category term="服务器" scheme="https://luyi10year.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>In city</title>
    <link href="https://luyi10year.github.io/2016/12/14/in-city/"/>
    <id>https://luyi10year.github.io/2016/12/14/in-city/</id>
    <published>2016-12-14T10:40:08.000Z</published>
    <updated>2016-12-22T07:04:36.524Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/city.jpg" alt="City"></p>
<p>悠然<br>随心<br>随性<br>随缘<br><a id="more"></a><br>杭州，省会<br>美丽的西湖（我也只去过西湖。。）<br>一年前，在这<br>我开启了前端之旅</p>
<p>那谁说过，在风口，是只猪也能飞起来。<br>何况是在杭州这样的互联网台风中。。</p>
<p>但是风过了，依然在飞的却是鹰</p>
<p>麻雀从不担心树枝会断<br>因为他相信的不是树枝<br>而是自己的翅膀</p>
<p>身处互联网大时代<br>机会很多，机遇很多<br>首先飞起来<br>然后去充实自己<br>不断学习不断进步</p>
<p>最后<br>风即使过了<br>我们也进化成了鹰</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/city.jpg&quot; alt=&quot;City&quot;&gt;&lt;/p&gt;
&lt;p&gt;悠然&lt;br&gt;随心&lt;br&gt;随性&lt;br&gt;随缘&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://luyi10year.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Node</title>
    <link href="https://luyi10year.github.io/2016/12/13/node/"/>
    <id>https://luyi10year.github.io/2016/12/13/node/</id>
    <published>2016-12-13T10:41:55.000Z</published>
    <updated>2016-12-26T04:22:21.829Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/node.jpg" alt="node"></p>
<blockquote>
<p>Node<br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>哈哈 先占上<br>到时候再补</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/node.jpg&quot; alt=&quot;node&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node&lt;br&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://luyi10year.github.io/tags/Node/"/>
    
  </entry>
  
</feed>
