<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis Blog</title>
  <subtitle>Louis/十年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//blog.fenghou.site/"/>
  <updated>2018-03-01T07:15:15.170Z</updated>
  <id>//blog.fenghou.site/</id>
  
  <author>
    <name>Louis</name>
    <email>wjf550@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>查看Nginx日志</title>
    <link href="//blog.fenghou.site/2018/02/03/2018-02-03-nginx-log/"/>
    <id>//blog.fenghou.site/2018/02/03/2018-02-03-nginx-log/</id>
    <published>2018-02-03T09:35:27.000Z</published>
    <updated>2018-03-01T07:15:15.170Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 日志分析<br><a id="more"></a></p>
<h3 id="日志组成"><a href="#日志组成" class="headerlink" title="日志组成"></a>日志组成</h3><p>nginx的默认日记位置<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#error_log  logs/<span class="meta-keyword">error</span>.log;</span></div><div class="line"><span class="meta">#error_log  logs/<span class="meta-keyword">error</span>.log  notice;</span></div><div class="line"><span class="meta">#error_log  logs/<span class="meta-keyword">error</span>.log  info;</span></div></pre></td></tr></table></figure></p>
<p>nginx的默认日志配置文件</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                        <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                       <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line">                       </div><div class="line"><span class="attribute">access_log</span>  logs/access.log  main;</div></pre></td></tr></table></figure>
<p>位置和格式都可以在 nginx.conf配置中设置</p>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>实时监控</p>
<blockquote>
<p>tail -f filename  </p>
</blockquote>
<p>获取对应格式(访问的ip)</p>
<blockquote>
<p>awk ‘{print $1}’</p>
</blockquote>
<p>过滤信息(16点到17点的日志)</p>
<blockquote>
<p>grep “03/Feb/2018:1[6-7]” filename<br>-o 只输出匹配的内容</p>
</blockquote>
<p>组合</p>
<blockquote>
<p>tail -f filename | grep “03/Feb/2018:1[6-7]” filename | awk ‘{print $1}’</p>
</blockquote>
<h3 id="翻阅"><a href="#翻阅" class="headerlink" title="翻阅"></a>翻阅</h3><p>(awk处理nginx日志)[<a href="http://blog.csdn.net/KimmKing/article/details/52727845" target="_blank" rel="external">http://blog.csdn.net/KimmKing/article/details/52727845</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx 日志分析&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="//blog.fenghou.site/tags/linux/"/>
    
      <category term="nginx" scheme="//blog.fenghou.site/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>巧用数组存储</title>
    <link href="//blog.fenghou.site/2017/12/11/2017-12-11-array-storage-memory/"/>
    <id>//blog.fenghou.site/2017/12/11/2017-12-11-array-storage-memory/</id>
    <published>2017-12-11T01:43:41.000Z</published>
    <updated>2018-03-01T07:10:08.375Z</updated>
    
    <content type="html"><![CDATA[<p>多重数组赋值<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cates = [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">label</span>:<span class="string">''</span>,</div><div class="line">      <span class="attr">value</span>:<span class="string">''</span>,</div><div class="line">      <span class="attr">cates</span>:[</div><div class="line">        &#123;</div><div class="line">          <span class="attr">label</span>:<span class="string">''</span>,</div><div class="line">          <span class="attr">value</span>:<span class="string">''</span>,</div><div class="line">          <span class="attr">cates</span>:[</div><div class="line">           &#123;</div><div class="line">              <span class="attr">label</span>:<span class="string">'me'</span>,</div><div class="line">              <span class="attr">value</span>:<span class="string">''</span>,</div><div class="line">              <span class="attr">cates</span>:[]</div><div class="line">           &#125;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      ]  </div><div class="line">    &#125;</div><div class="line"> ]</div><div class="line"><span class="comment">//现在我想给label='me'的cates 复制怎么做</span></div><div class="line"><span class="comment">//假如我知道他的结构层级是[0,0,0]</span></div><div class="line">cates[<span class="number">0</span>].cates[<span class="number">0</span>].cates[<span class="number">0</span>].cates = []</div><div class="line"><span class="keyword">let</span> _item = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> _arr = []</div><div class="line">_item.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">    _arr = cates[item]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">let</span> arr = cates[<span class="number">0</span>].cates[<span class="number">0</span>].cates[<span class="number">0</span>].cates</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多重数组赋值&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
      <category term="vue" scheme="//blog.fenghou.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>根据图片色调生成渐变背景</title>
    <link href="//blog.fenghou.site/2017/12/01/2017-12-01-canvas-image-node-color/"/>
    <id>//blog.fenghou.site/2017/12/01/2017-12-01-canvas-image-node-color/</id>
    <published>2017-12-01T02:00:00.000Z</published>
    <updated>2017-12-01T07:17:10.260Z</updated>
    
    <content type="html"><![CDATA[<p>有这么个需求<br>有个容器 容器里面有个图片<br>容器的背景需要根据图片的颜色渐变显示<br>让整个风格不突兀<br><a id="more"></a></p>
<h3 id="What-Color"><a href="#What-Color" class="headerlink" title="What Color"></a>What Color</h3><p>首先很明确 怎么提取图片中的颜色<br>canvas getImageData 可以获取图片中每个像素点的rgb值<br>通过一系列的 计算可以获取到 出现最多的几种颜色<br>此处省略好多字(代码下次补)</p>
<h3 id="And-Then"><a href="#And-Then" class="headerlink" title="And Then"></a>And Then</h3><p>假设我们拿到颜色了 结束</p>
<p>但是如果没拿到呢</p>
<p>总所周知 canvas 的getImageData 是不能处理跨域图片<br>当然如果图片的服务器 指定了 Access-Control-Allow-Origin *<br>那么 通过 img.crossOrigin = “Anonymous” 就可以获取</p>
<p>但是我的项目 需要的图片是某云音乐里拉出来图片<br>妥妥的跨域<br>好在 我的项目是通过node部署的<br>所以我是通过node中间转了一层<br>由node服务去请求 图片 然后再 返给前端<br>这样就不存在跨域的 行为了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有这么个需求&lt;br&gt;有个容器 容器里面有个图片&lt;br&gt;容器的背景需要根据图片的颜色渐变显示&lt;br&gt;让整个风格不突兀&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
      <category term="canvas" scheme="//blog.fenghou.site/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Git命令行</title>
    <link href="//blog.fenghou.site/2017/11/21/2017-11-21-git-cmd/"/>
    <id>//blog.fenghou.site/2017/11/21/2017-11-21-git-cmd/</id>
    <published>2017-11-21T05:33:37.000Z</published>
    <updated>2017-12-25T05:50:51.258Z</updated>
    
    <content type="html"><![CDATA[<p>Git命令行操作-收纳<br><a id="more"></a></p>
<h3 id="About-分支"><a href="#About-分支" class="headerlink" title="About 分支"></a>About 分支</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> checkout &lt;<span class="keyword">branchName&gt; </span>切换分支</div><div class="line"></div><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>&lt;<span class="keyword">branchName&gt; </span>新建分支</div><div class="line"></div><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-a 本地分支列表</div><div class="line"></div><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-r 远程分支列表</div><div class="line"></div><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-D &lt;<span class="keyword">branchName&gt; </span>删除本地分支</div><div class="line"></div><div class="line"><span class="symbol">Git</span> <span class="built_in">v1</span>.<span class="number">7</span>.<span class="number">0</span> 之后</div><div class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin --delete &lt;<span class="keyword">branchName&gt; </span>删除远程分支</div><div class="line"></div><div class="line">之前</div><div class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin :&lt;<span class="keyword">branchName&gt;</span></div><div class="line"></div><div class="line"><span class="symbol">git</span> merge &lt;<span class="keyword">branchName&gt; </span>合并分支到当前分支</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git命令行操作-收纳&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="//blog.fenghou.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>HTML标签语义</title>
    <link href="//blog.fenghou.site/2017/11/20/2017-11-20-html-tag/"/>
    <id>//blog.fenghou.site/2017/11/20/2017-11-20-html-tag/</id>
    <published>2017-11-20T10:09:08.000Z</published>
    <updated>2018-01-04T06:41:50.374Z</updated>
    
    <content type="html"><![CDATA[<p>HTML语义化整理<br><a id="more"></a><br>块级元素 常见的div p ul<br>行内元素 常见的span a </p>
<p>元素间的嵌套<br>什么是语义化<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--会变成--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--h1~h6 p 块级元素内不能再内嵌块级元素--&gt;</span></div></pre></td></tr></table></figure></p>
<p>行内元素内 原则上不应该内嵌块级元素 但没有强制限制</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML语义化整理&lt;br&gt;
    
    </summary>
    
    
      <category term="html" scheme="//blog.fenghou.site/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>vue-about</title>
    <link href="//blog.fenghou.site/2017/11/17/2017-11-17-vue-about/"/>
    <id>//blog.fenghou.site/2017/11/17/2017-11-17-vue-about/</id>
    <published>2017-11-17T06:30:23.000Z</published>
    <updated>2018-01-05T03:50:16.083Z</updated>
    
    <content type="html"><![CDATA[<p>VUE-ABOUT</p>
<a id="more"></a>
<h3 id="vue中-scope的实现"><a href="#vue中-scope的实现" class="headerlink" title=".vue中 scope的实现"></a>.vue中 scope的实现</h3><p>vue文件可以实现当前文件的css作用域<br>实现手法是通过vue-loader后生成一个<br>随机字符串属性 通过内置css属性选择器实现<br>like that<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scope-div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.scope-div</span>&#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--打包处理后--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.scope-div</span><span class="selector-attr">[data-v-7af99ee4]</span>&#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scope-div"</span> <span class="attr">data-v-7af99ee4</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>Vuex 中模块的划分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></div><div class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"><span class="keyword">import</span> ware <span class="keyword">from</span> <span class="string">'./module/wareModule'</span></div><div class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  <span class="attr">state</span>: &#123;</div><div class="line">    <span class="attr">viewImageConfig</span>:&#123;</div><div class="line">      <span class="attr">isShow</span>:<span class="literal">false</span>,</div><div class="line">      <span class="attr">url</span>:<span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  mutations,  <span class="comment">// 修改store方法</span></div><div class="line">  actions,    <span class="comment">// 调用修改store方法</span></div><div class="line">  modules: &#123;</div><div class="line">    ware</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"><span class="comment">//actions.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    demoAction(&#123;commit&#125;)&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//ware.js</span></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">demoWareStore</span>:<span class="string">'345'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> getters = &#123;</div><div class="line">  <span class="attr">getDemoWareStore</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.demoWareStore</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">  demoWareAction(&#123;commit,state&#125;,rs)&#123;</div><div class="line">    <span class="built_in">console</span>.log(rs)</div><div class="line">    commit(<span class="string">'DEMO_WARE_MUT'</span>,rs)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  DEMO_WARE_MUT(state,rs)&#123;</div><div class="line">    <span class="built_in">console</span>.log(rs)</div><div class="line">    state.demoWareStore = <span class="string">'123'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  state,</div><div class="line">  getters,</div><div class="line">  actions,</div><div class="line">  mutations</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>vuex 实例会混入vue的实例中<br>通过this.$store<br>而模块中引入的 action mutations getters 都会和全局混合在一起<br>this.$store._actions[demoWareAction,demoAction]<br>而state会根据module分割<br>this.$store.store.viewImageConfig<br>this.$store.store.ware.demoWareStore</p>
<h3 id="Vue中路由-层级的渲染"><a href="#Vue中路由-层级的渲染" class="headerlink" title="Vue中路由 层级的渲染"></a>Vue中路由 层级的渲染</h3><p>首先Router和route 会混入到vue的实例中去<br>vue-router 提供了 一个 router-view 的组件<br>如果是嵌套的路由 vue-router 是怎么实现对应的显示<br>首先在 在显示 当前组件时 vue-router 会根据当前路由<br>生成一个 已经匹配过的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$route = &#123;</div><div class="line">    <span class="attr">path</span>:<span class="string">'/part'</span>,</div><div class="line">    <span class="attr">matched</span>:[</div><div class="line">        &#123;</div><div class="line">            <span class="attr">path</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">name</span>:<span class="string">'Home'</span>,</div><div class="line">            ...</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">path</span>:<span class="string">'/part'</span>,</div><div class="line">            <span class="attr">name</span>:<span class="string">'Part'</span>,</div><div class="line">            ...</div><div class="line">        &#125;,</div><div class="line">    ],</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>渲染 vue-router 时 会去判断 当前组件的层级<br>然后对应去 这个 matched 中取层级下标对应的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> route = parent.$route</div><div class="line"><span class="keyword">let</span> depth = <span class="number">0</span></div><div class="line"><span class="keyword">let</span> inactive = <span class="literal">false</span></div><div class="line"><span class="keyword">while</span> (parent &amp;&amp; parent._routerRoot !== parent) &#123;</div><div class="line">      <span class="keyword">if</span> (parent.$vnode &amp;&amp; parent.$vnode.data.routerView) &#123;</div><div class="line">        depth++</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (parent._inactive) &#123;</div><div class="line">        inactive = <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">      parent = parent.$parent </div><div class="line">&#125;</div><div class="line"> <span class="keyword">const</span> matched = route.matched[depth]</div><div class="line"> <span class="comment">//此时mathed 就是匹配到要渲染的 组件</span></div></pre></td></tr></table></figure></p>
<p>举例说明<br>路由配置如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</div><div class="line">    <span class="attr">routes</span>:[</div><div class="line">       &#123;</div><div class="line">            <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'Home'</span>,</div><div class="line">            <span class="attr">component</span>: Home,</div><div class="line">            <span class="attr">children</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">path</span>: <span class="string">'/part'</span>,</div><div class="line">                    <span class="attr">name</span>: <span class="string">'Part'</span>,</div><div class="line">                    <span class="attr">component</span>: Part,</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">           </div><div class="line">       &#125; </div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--App--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--Home--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"readyMenu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">v-head</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">v-menu</span>&gt;</span><span class="tag">&lt;/<span class="name">v-menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"move"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">v-load</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">v-toast</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--Part--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    Part</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 路由为 localhost:8010/#/时 </span></div><div class="line">$route = &#123;</div><div class="line">    <span class="attr">path</span>:<span class="string">'/'</span>,</div><div class="line">    <span class="attr">matched</span>:[</div><div class="line">        &#123;</div><div class="line">            <span class="attr">path</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">name</span>:<span class="string">'Home'</span>,</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="comment">// 此时</span></div><div class="line">depth = <span class="number">0</span></div><div class="line"><span class="keyword">const</span> matched = route.matched[depth]</div><div class="line"></div><div class="line"><span class="comment">// 路由为 localhost:8010/#/part时 </span></div><div class="line">$route = &#123;</div><div class="line">    <span class="attr">path</span>:<span class="string">'/part'</span>,</div><div class="line">    <span class="attr">matched</span>:[</div><div class="line">        &#123;</div><div class="line">            <span class="attr">path</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">name</span>:<span class="string">'Home'</span>,</div><div class="line">            ...</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">path</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">name</span>:<span class="string">'Part'</span>,</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="comment">//先渲染Home之后</span></div><div class="line">depth = <span class="number">1</span></div><div class="line"><span class="keyword">const</span> matched = route.matched[depth]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VUE-ABOUT&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="//blog.fenghou.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>node-webpack</title>
    <link href="//blog.fenghou.site/2017/11/16/2017-11-16-webpack-rules/"/>
    <id>//blog.fenghou.site/2017/11/16/2017-11-16-webpack-rules/</id>
    <published>2017-11-16T03:29:13.000Z</published>
    <updated>2018-02-26T08:44:33.612Z</updated>
    
    <content type="html"><![CDATA[<p>webpack - 笔记<br><a id="more"></a></p>
<h3 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h3><p>webpack可以做的<br>预处理语言转换 (scss-loader等)<br>提取样式表文件 (extract-text-webpack-plugin)<br>补全浏览器前缀 (postcss-loader autoprefixer)<br>打包压缩</p>
<p>webpack 加载器的加载规则<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">model:&#123;</div><div class="line">   <span class="attr">rules</span>:[</div><div class="line">    &#123;</div><div class="line">       <span class="attr">test</span>:<span class="string">''</span>, <span class="comment">//多个loader建议配置</span></div><div class="line">       use:[</div><div class="line">        &#123;</div><div class="line">          <span class="attr">loader</span>:<span class="string">''</span>,</div><div class="line">          <span class="attr">options</span>:&#123;&#125;  </div><div class="line">        &#125;,</div><div class="line">        &#123;&#125;</div><div class="line">       ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">       <span class="attr">test</span>:<span class="string">''</span>,<span class="comment">//单个loader建议配置</span></div><div class="line">       loader:<span class="string">''</span>,</div><div class="line">       <span class="attr">options</span>:&#123;&#125;</div><div class="line">    &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于要抽离出来的css文件的配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</div><div class="line">rules:[</div><div class="line">    &#123;</div><div class="line">            <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</div><div class="line">            <span class="attr">use</span>: ExtractTextPlugin.extract(<span class="string">'css-loader'</span>,<span class="string">'style-loader'</span>)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">           <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</div><div class="line">           <span class="attr">use</span>: ExtractTextPlugin.extract(&#123;</div><div class="line">               <span class="attr">use</span>:[</div><div class="line">                   &#123;</div><div class="line">                       <span class="attr">loader</span>:<span class="string">'css-loader'</span>,</div><div class="line">                       <span class="attr">options</span>:&#123;</div><div class="line">                          <span class="attr">sourceMap</span>:<span class="literal">true</span></div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               ]</div><div class="line">           &#125;)</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>使用postcss-loader时需要配置 .postcssrc.js<br>安装 autoprefixer 并且指定兼容(package.json中配置)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.postcssrc.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">"plugins"</span>: &#123;</div><div class="line">    <span class="comment">// to edit target browsers: use "browserlist" field in package.json</span></div><div class="line">    <span class="string">"autoprefixer"</span>: &#123;&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//package.json</span></div><div class="line"><span class="string">"browserslist"</span>: [</div><div class="line">    <span class="string">"&gt; 1%"</span>,</div><div class="line">    <span class="string">"last 2 versions"</span>,</div><div class="line">    <span class="string">"not ie &lt;= 8"</span></div><div class="line">  ]</div><div class="line"><span class="comment">/*</span></div><div class="line">last 2 versions: the last 2 versions for each browser.</div><div class="line">最后2个版本：每个浏览器的最后2个版本。</div><div class="line"></div><div class="line">last 2 Chrome versions: the last 2 versions of Chrome browser.</div><div class="line">最后2个chrome版本：chrome浏览器的最后2个版本。</div><div class="line"></div><div class="line">&gt; 5%: versions selected by global usage statistics. &gt;=, &lt; and &lt;= work too.</div><div class="line">&gt; 5％：由全局使用统计选择的版本。&gt; =，&lt;和&lt;=也工作。</div><div class="line"></div><div class="line">&gt; 5% in US: uses USA usage statistics. It accepts two-letter country code.</div><div class="line">&gt; 5% in US: 使用美国使用统计。它接受两个字母的国家代码。</div><div class="line"></div><div class="line">&gt; 5% in alt-AS: uses Asia region usage statistics. List of all region codes can be found at caniuse-lite/data/regions.</div><div class="line">&gt; 5% in alt-AS: 使用亚洲地区使用情况统计。所有地区代码清单可在caniuse-lite / data / regions中找到。</div><div class="line"></div><div class="line">&gt; 5% in my stats: uses custom usage data.</div><div class="line">&gt; 5% in my stats: 使用自定义使用数据</div><div class="line"></div><div class="line">extends browserslist-config-mycompany: take queries from browserslist-config-mycompany npm package.</div><div class="line">扩展browserslist-config-mycompany: 从browserslist-config-mycompany npm包中获取查询。</div><div class="line"></div><div class="line">ie 6-8: selects an inclusive range of versions.</div><div class="line">ie 6-8: 选择包含范围的版本</div><div class="line"></div><div class="line">Firefox &gt; 20: versions of Firefox newer than 20. &gt;=, &lt; and &lt;= work too.</div><div class="line">Firefox &gt; 20: Firefox的版本比20更新。&gt; =，&lt;和&lt;=也可以。</div><div class="line"></div><div class="line">iOS 7: the iOS browser version 7 directly.</div><div class="line">iOS 7: 直接使用ios浏览器版本7</div><div class="line"></div><div class="line">Firefox ESR: the latest [Firefox ESR] version.</div><div class="line">Firefox esr：最新的[firefox esr]版本。</div><div class="line"></div><div class="line">unreleased versions or unreleased Chrome versions: alpha and beta versions.</div><div class="line">未发布的版本或未发布的Chrome版本：alpha和beta版本。</div><div class="line"></div><div class="line">last 2 major versions or last 2 iOS major versions: all minor/patch releases of last 2 major versions.</div><div class="line">最后2个主要版本或最后2个主要版本: 最后2个主要版本的所有次要/补丁版本  </div><div class="line"></div><div class="line">since 2015 or last 2 years: all versions released since year 2015 (also since 2015-03 and since 2015-03-10).</div><div class="line">自2015年或最近2年以来: 自2015年以来发布的所有版本（自2015-03和2015-03-10以来）   </div><div class="line"></div><div class="line">dead: browsers from last 2 version query, but with less than 0.5% in global usage statistics and without official support or updates for 24 months. Right now it is IE 10, IE_Mob 10, BlackBerry 10, and BlackBerry 7.</div><div class="line">dead: 来自上次2版本查询的浏览器，但全球使用情况统计信息少于0.5％，并且24个月没有官方支持或更新</div><div class="line"></div><div class="line">defaults: Browserslist’s default browsers (&gt; 0.5%, last 2 versions, Firefox ESR, not dead). </div><div class="line">defaults://默认配置</div><div class="line"></div><div class="line">not ie &lt;= 8: exclude browsers selected by previous queries. </div><div class="line">not ie &lt;= 8: 排除先前查询选择的浏览器 </div><div class="line">*/</div></pre></td></tr></table></figure></p>
<p>使用 optimize-css-assets-webpack-plugin 插件压缩css<br>可以考虑 将 css-loader 相关的加载处理抽出来处理<br>webpack 说到底就是一份配置文件<br>完全可以自由的拼拆(webpack-merge)</p>
<blockquote>
<p>extract-text-webpack-plugin<br>抽取样式 请配合 plugins使用<br>抽取样式 请配合 plugins使用<br>抽取样式 请配合 plugins使用 三遍<br>new ExtractTextPlugin(‘style.css’)</p>
</blockquote>
<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>关于es6 babel的转换<br>transform-runtime 转换语法 ES6 的语法转换成ES5的<br>通俗理解为 转换语法糖<br>不转换新增API Map Set。。。includes等<br>如果需要实现 则需要通过引入 babel-polyfill来实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">a.push(<span class="string">'5'</span>)</div><div class="line"><span class="built_in">console</span>.log(a.includes(<span class="string">'5'</span>))</div><div class="line"></div><div class="line"><span class="comment">// 如上代码 会转换成</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">a.push(<span class="string">'5'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.includes(<span class="string">'5'</span>));</div></pre></td></tr></table></figure></p>
<h3 id="公共模块抽离"><a href="#公共模块抽离" class="headerlink" title="公共模块抽离"></a>公共模块抽离</h3><p>webpack抽离公共的模块</p>
<blockquote>
<p>name 打包的名称<br>  minChunks: number|Infinity|function(module, count) -&gt; boolean,<br>  // 在传入  公共chunk(commons chunk) 之前所需要包含的最少数量的 chunks 。<br>  // 数量必须大于等于2，或者少于等于 chunks的数量<br>  // 传入 <code>Infinity</code> 会马上生成 公共chunk，但里面没有模块。<br>  // 你可以传入一个 <code>function</code> ，以添加定制的逻辑（默认是 chunk 的数量）<br>      并且调用函数时会传入 module 和 count 参数。<br>      module 参数代表每个 chunks 里的模块，这些 chunks 是你通过 name/names 参数传入的<br>      module.context: The directory that stores the file. For example: ‘/my_project/node_modules/example-dependency’<br>      module.resource: The name of the file being processed. For example: ‘/my_project/node_modules/example-dependency/index.js’<br>      count 参数表示 module 被使用的 chunk 数量</p>
</blockquote>
<p>可以通过传参minChunks来控制你希望重复出现几次的module 被提取出来打包。<br>也就是说你自己可以控制当一个模块被引入几次可以被打包到共用的chunk中，<br>还可以规定如果这个公共模块小于一个值 minSize，<br>就不被提取出来这些都可以帮助你控制你想要的粒度。<br>当你改的不是公共模块的代码，理论上webpack 打包的时候本来就不会影响其他代码。<br>但是webpack 在使用 CommoChunkPlugin会生成一段 runtime 代码，<br>而哪怕你不改变common 里的代码这个 runtime 仍然是会跟随着打包变化的并且打入你的common 中，<br>所以你的common 的hash 就会开始变化了。<br>但是也有办法，就是独立把生成的runtime 代码抽出来。<br>（manifest）像下面一样，这个是从 vue-cli 中学习而来</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'vendor'</span>,</div><div class="line">      <span class="attr">minChunks</span>: <span class="function"><span class="keyword">function</span> (<span class="params">module, count</span>) </span>&#123;</div><div class="line">        <span class="comment">// any required modules inside node_modules are extracted to vendor</span></div><div class="line">        <span class="keyword">return</span> (<span class="built_in">module</span>.resource &amp;&amp; <span class="regexp">/\.js$/</span>.test(<span class="built_in">module</span>.resource) &amp;&amp; <span class="built_in">module</span>.resource.indexOf(path.join(__dirname, <span class="string">'../node_modules'</span>)) === <span class="number">0</span></div><div class="line">        )</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line"> <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">       <span class="attr">name</span>: <span class="string">'mainfest'</span>,</div><div class="line">       <span class="attr">chunks</span>: [<span class="string">'vendor'</span>]</div><div class="line">     &#125;)</div></pre></td></tr></table></figure>
<h3 id="模块异步加载"><a href="#模块异步加载" class="headerlink" title="模块异步加载"></a>模块异步加载</h3><p>第一个参数 依赖的文件 第二个参数回调 第三个参数 命名名称<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    <span class="attr">path</span>: config.build.assetsRoot,</div><div class="line">    <span class="attr">filename</span>: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>),</div><div class="line">    <span class="attr">chunkFilename</span>: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">require</span>.ensure([], <span class="built_in">require</span> =&gt; &#123;</div><div class="line">        <span class="built_in">require</span>(<span class="string">'../Component/Index'</span>)</div><div class="line">    &#125;,<span class="string">'Index'</span>)</div><div class="line"><span class="comment">// 传入第三个参数的  js/Index.xxxxxxxx.js</span></div><div class="line"><span class="comment">// 不传的           js/id.xxxxxxxx.js</span></div><div class="line"><span class="comment">// 第三个参数相同的会打包到一个js 中</span></div></pre></td></tr></table></figure></p>
<p>Vue中路由实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Home = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>.ensure([],()=&gt;&#123;resolve(<span class="built_in">require</span>(<span class="string">'@/components/common/Home'</span>))&#125;)</div><div class="line">Home = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>.ensure([],()=&gt;&#123;resolve(<span class="built_in">require</span>(<span class="string">'@/components/common/Home'</span>)),<span class="string">'Home'</span>&#125;)</div><div class="line">Home = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/components/common/Home'</span>], resolve)</div></pre></td></tr></table></figure></p>
<p>react中路由实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Home = <span class="function">(<span class="params">location, resolve</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">require</span>.ensure([], <span class="built_in">require</span> =&gt; &#123;</div><div class="line">        resolve(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'../Component/Home'</span>).default)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> Home = <span class="function">(<span class="params">location, resolve</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">require</span>.ensure([], <span class="built_in">require</span> =&gt; &#123;</div><div class="line">        resolve(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'../Component/Home'</span>).default)</div><div class="line">    &#125;,<span class="string">'Home'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>普通js实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">load = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">require</span>.ensure([], <span class="built_in">require</span> =&gt; &#123;</div><div class="line">              <span class="built_in">require</span>(<span class="string">'@/assets/js/demo'</span>)</div><div class="line">             &#125;)</div><div class="line">&#125;</div><div class="line">load()</div><div class="line"></div><div class="line"><span class="comment">//demo.js         </span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'I load'</span>)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">V</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'I will V'</span>)</div><div class="line">&#125;</div><div class="line">V()</div></pre></td></tr></table></figure></p>
<h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><p>关于webpack的devServer<br>如下配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">devServer:&#123;</div><div class="line">        <span class="attr">contentBase</span>:path.resolve(__dirname,<span class="string">'../static'</span>),</div><div class="line">        <span class="attr">publicPath</span>:<span class="string">'/'</span>,</div><div class="line">        <span class="attr">port</span>:<span class="number">8888</span>,</div><div class="line">        <span class="attr">open</span>:<span class="literal">true</span>,</div><div class="line">        <span class="attr">host</span>:<span class="string">'192.168.0.246'</span>,</div><div class="line">        <span class="attr">hot</span>:<span class="literal">true</span>,</div><div class="line">    &#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">* Project is running at http://192.168.0.246:8888/</div><div class="line">* webpack output is served from /</div><div class="line">* Content not from webpack is served from E:\github\firework\static</div><div class="line">* */</div></pre></td></tr></table></figure></p>
<p>contentBase 指定的是 页面中引用的不是通过webpack打包的文件的 获取目录<br>publicPath  指定的是 页面中引用的是通过webpack打包的文件的获取目录</p>
<p>hot 指的是是否开启热重载<br>需要搭配 new webpack.HotModuleReplacementPlugin() 插件一起使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack - 笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
      <category term="webpack" scheme="//blog.fenghou.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>node-sms-boom</title>
    <link href="//blog.fenghou.site/2017/11/13/2017-11-13-node-sms-boom/"/>
    <id>//blog.fenghou.site/2017/11/13/2017-11-13-node-sms-boom/</id>
    <published>2017-11-13T01:27:44.000Z</published>
    <updated>2017-11-13T09:58:42.051Z</updated>
    
    <content type="html"><![CDATA[<h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><p>安装<br>ERROR: Failed to download Chromium r508693! Set “PUPPETEER_SKIP_CHROMIUM_DOWNLOAD” env variable to skip download.</p>
<p>原因 安装 puppeteer 时会去下载 chromium（实验版chrome），但是由于网络的原因，下载失败了</p>
<p>解决<br>win npm config set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true<br>linux export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD = true</p>
<p>linux centos 7.3 下载chromium 失败 待解决</p>
<p><a href="http://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html" target="_blank" rel="external">http://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html</a><br>从这里下载 <a href="http://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Linux_x64/515411/" target="_blank" rel="external">http://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Linux_x64/515411/</a><br>/admin/fenghou/www/chrome/chrome-linux/chrome</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;puppeteer&quot;&gt;&lt;a href=&quot;#puppeteer&quot; class=&quot;headerlink&quot; title=&quot;puppeteer&quot;&gt;&lt;/a&gt;puppeteer&lt;/h3&gt;&lt;p&gt;安装&lt;br&gt;ERROR: Failed to download Chromium r
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>node-npm</title>
    <link href="//blog.fenghou.site/2017/11/08/2017-11-08-node-npm/"/>
    <id>//blog.fenghou.site/2017/11/08/2017-11-08-node-npm/</id>
    <published>2017-11-08T08:25:10.000Z</published>
    <updated>2017-12-27T08:38:07.658Z</updated>
    
    <content type="html"><![CDATA[<p>NPM - 笔记<br><a id="more"></a></p>
<h3 id="切换npm源"><a href="#切换npm源" class="headerlink" title="切换npm源"></a>切换npm源</h3><p><a href="https://registry.npmjs.org/" target="_blank" rel="external">https://registry.npmjs.org/</a><br>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a><br>npm config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="external">https://npm.taobao.org/dist</a><br>npm config delete registry<br>npm config delete disturl<br>npm config list<br>npm config edit</p>
<h3 id="sass安装出错"><a href="#sass安装出错" class="headerlink" title="sass安装出错"></a>sass安装出错</h3><p>SASS_BINARY_SITE=<a href="https://npm.taobao.org/mirrors/node-sass/" target="_blank" rel="external">https://npm.taobao.org/mirrors/node-sass/</a> npm install node-sass –save-dev</p>
<h3 id="更新node版本"><a href="#更新node版本" class="headerlink" title="更新node版本"></a>更新node版本</h3><p>window 官网下载.msi文件 安装覆盖老版本</p>
<h3 id="npm-版本"><a href="#npm-版本" class="headerlink" title="npm 版本"></a>npm 版本</h3><p>npm版本5.5.1<br>会生成 package-lock.json 锁定当前安装的 package 包<br>rm -rf package-lock.json<br>管理员身份 npm install 还有有问题 没解决  版本回退到5之前</p>
<h3 id="npm-publish"><a href="#npm-publish" class="headerlink" title="npm publish"></a>npm publish</h3><p>登录 npm addUser<br>源切换 <a href="https://registry.npmjs.org/" target="_blank" rel="external">https://registry.npmjs.org/</a><br>不然会 <code>no_perms Private mode enable, only admin can publish this module</code></p>
<h3 id="关于–save-dev"><a href="#关于–save-dev" class="headerlink" title="关于–save-dev"></a>关于–save-dev</h3><p>publish上去的包中的devDependencies中依赖的包 下载时不会被安装</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NPM - 笔记&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Css-Specification</title>
    <link href="//blog.fenghou.site/2017/11/07/2017-11-07-css-Specification/"/>
    <id>//blog.fenghou.site/2017/11/07/2017-11-07-css-Specification/</id>
    <published>2017-11-07T07:08:16.000Z</published>
    <updated>2017-11-10T09:02:57.304Z</updated>
    
    <content type="html"><![CDATA[<p>css规范笔记<br><a id="more"></a><br><a href="http://www.ayqy.net/doc/css2-1/cover.html#minitoc" target="_blank" rel="external">css规范文档</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123; </div><div class="line">  <span class="attribute">font-weight</span>: bold; </div><div class="line">  <span class="attribute">font-size</span>: <span class="number">12pt</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">14pt</span>; </div><div class="line">  <span class="attribute">font-family</span>: Helvetica; </div><div class="line">  <span class="attribute">font-variant</span>: normal;</div><div class="line">  <span class="attribute">font-style</span>: normal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font</span>: bold <span class="number">12pt</span>/<span class="number">14pt</span> Helvetica &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css规范笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="//blog.fenghou.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css-Box-Model</title>
    <link href="//blog.fenghou.site/2017/11/07/2017-11-07-css-box-model/"/>
    <id>//blog.fenghou.site/2017/11/07/2017-11-07-css-box-model/</id>
    <published>2017-11-07T01:56:43.000Z</published>
    <updated>2017-11-10T09:03:45.688Z</updated>
    
    <content type="html"><![CDATA[<p>css-box 总结<br><a id="more"></a></p>
<h3 id="盒模型的计算"><a href="#盒模型的计算" class="headerlink" title="盒模型的计算"></a>盒模型的计算</h3><p>盒模型 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式 </p>
<p>盒模型 宽高的计算<br>box-sizing 属性可以通俗的理解为 给box设置的宽高从哪里开始计算<br>盒模型的真实宽高 = border-box + padding-box + content-box</p>
<p>box-sizing: content-box(标准盒模型)  表示设置的宽高是 content-box的宽高 那渲染在页面上真实的宽高还要加上 padding-box 和 border-box<br>width(真实) = width(content-box设置的width) + padding-box + border-box</p>
<p>box-sizing: border-box(IE盒模型)   表示设置的宽高是 border-box的宽高 那渲染在页面上真实的宽高就是 设置的宽高<br>width(真实) = width(设置的width) </p>
<p>box-sizing: inherit 从父元素继承 </p>
<h3 id="BFC-amp-amp-IFC"><a href="#BFC-amp-amp-IFC" class="headerlink" title="BFC &amp;&amp; IFC"></a>BFC &amp;&amp; IFC</h3><p>BFC 块级格式化上下文<br>可以通过构建BFC 解决margin 重合 清除浮动<br>float的值不为none<br>position的值不为static或者relative<br>display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个<br>overflow的值不为visible</p>
<p>IFC 内联格式化上下文<br>默认对齐方式 vertical-align:baseline 所以同时存在有内容的内联元素和没内容的内联元素 有内容的 会往下掉<br>vertical-align:top</p>
<h3 id="背景的起始"><a href="#背景的起始" class="headerlink" title="背景的起始"></a>背景的起始</h3><p>background-clip 表示背景在盒模型中显示的位置<br>border-box  从border-box开始有背景<br>padding-box 从padding-box开始有背景<br>content-box 从content-box开始有背景<br>background-origin 表示背景在盒模型中开始渲染的位置<br>border-box 背景从border-box 处开始渲染<br>padding-box 背景从padding-box 处开始渲染<br>content-box 背景从content-box 处开始渲染</p>
<p>background-position 表示从这张背景图片的什么位置 开始渲染在 元素背景上<br>background-position:X% Y%(百分比值) 表示会把图片 横向X% 纵向的Y% 的点与 元素 横向X% 纵向的Y%点对齐<br>background-position:Xpx Ypx(数值)  表示图片距离背景起始绘制点的距离   </p>
<p>background-position: <background-origin> <background-clip> <background-position>/<background-size></background-size></background-position></background-clip></background-origin></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css-box 总结&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="//blog.fenghou.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>从源码看webpack</title>
    <link href="//blog.fenghou.site/2017/10/25/2017-10-25-webpack-source-code/"/>
    <id>//blog.fenghou.site/2017/10/25/2017-10-25-webpack-source-code/</id>
    <published>2017-10-25T02:21:01.000Z</published>
    <updated>2017-10-30T10:19:45.277Z</updated>
    
    <content type="html"><![CDATA[<p>研究研究 源码<br>总结总结 心得<br><a id="more"></a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>webpack 这边的配置<br>主要还是根据项目来灵活的配置<br>大的项目根据运行环境来区分 开发 测试 线上<br>本地的调试通过node来搭建<br>小的项目可以通过命令行的形式直接敲命令</p>
<blockquote>
<p>devServer</p>
</blockquote>
<p>devServer可以用来配置热加载 请求代理 静态资源访问等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 可以配置在webpack配置对象里的devServer里面</span></div><div class="line">devServer: &#123;</div><div class="line">        <span class="attr">hot</span>:<span class="literal">true</span>,</div><div class="line">        <span class="attr">contentBase</span>:path.resolve(__dirname,<span class="string">'../'</span>),</div><div class="line">        <span class="attr">publicPath</span>:path.resolve(__dirname,<span class="string">'../assets/'</span>)</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 或者在调用的时候传入</span></div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> WebpackDevServer(compiler,devServer)</div></pre></td></tr></table></figure></p>
<p>通过 <code>webpack-dev-server</code>的源码可以看到<br>热加载是通过 <code>sockjs</code>来实现的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现原理 server.js</span></div><div class="line"><span class="keyword">var</span> sockjs_opts = &#123;<span class="attr">sockjs_url</span>: <span class="string">"http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js"</span>&#125;;</div><div class="line"><span class="keyword">var</span> sockjs = sockjs.createServer(sockjs_opts);</div><div class="line">sockjs.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">conn</span>) </span>&#123;</div><div class="line">    conn.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">        conn.write(message); <span class="comment">// 向客户端 发送</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> app = express(); </div><div class="line"><span class="keyword">var</span> server = http.createServer(app);</div><div class="line">sockjs.installHandlers(server, &#123;<span class="attr">prefix</span>:<span class="string">'/demo'</span>&#125;);</div><div class="line"><span class="comment">// client.js</span></div><div class="line"><span class="keyword">var</span> sockjs_url = <span class="string">'/demo'</span>;</div><div class="line"><span class="keyword">var</span> sockjs = <span class="keyword">new</span> SockJS(sockjs_url);</div><div class="line">sockjs.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="comment">// e.data</span></div><div class="line">    <span class="built_in">window</span>.location.reload()</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这也是为什么 要在 entry中将 <code>webpack-dev-server/client?http://localhost:8080/</code>引进来的原因</p>
<p>devServer的proxy是依赖<code>http-proxy-middleware</code>实现</p>
<p>而 devServer中的publicPath指定的是根据 dev-server服务请求中的静态资源的目录</p>
<blockquote>
<p>devtool</p>
</blockquote>
<p>source-map 几种模式 主要还是解决 多模块文件的调试和明确报错提示</p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>webpack 的启动可以通过命令行调用</p>
<blockquote>
<p><code>webpack --w --config --progress --color</code></p>
</blockquote>
<p>通过这个命令可以启动webpack 监听 配置文件config路径 以及进程和颜色<br>具体的实现过程 输入命令行后会 执行 <code>node_modules/.bin/webpack</code> 这个脚本<br>然后会启动 <code>node_modules/webpack/bin/webpack.js</code><br>通过 yargs 这个node插件可以获取 在命令行中输入的参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//config-yargs.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">yargs</span>) </span>&#123;</div><div class="line">    yargs</div><div class="line">        .help(<span class="string">"help"</span>)</div><div class="line">    	.alias(<span class="string">"help"</span>, <span class="string">"h"</span>)</div><div class="line">    	.version()</div><div class="line">    	.alias(<span class="string">"version"</span>, <span class="string">"v"</span>)</div><div class="line">    	.options(&#123;</div><div class="line">            <span class="string">"watch"</span>: &#123;</div><div class="line">            	<span class="attr">type</span>: <span class="string">"boolean"</span>,</div><div class="line">            	<span class="attr">alias</span>: <span class="string">"w"</span>,</div><div class="line">            	<span class="attr">describe</span>: <span class="string">"Watch the filesystem for changes"</span>,</div><div class="line">            	<span class="attr">group</span>: BASIC_GROUP</div><div class="line">            &#125;,</div><div class="line">            ...</div><div class="line">    	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//webpack.js</span></div><div class="line"><span class="keyword">var</span> options = <span class="built_in">require</span>(<span class="string">"./convert-argv"</span>)(yargs, argv);</div><div class="line"><span class="comment">//通过convert-argv.js 进行加工 返回一个混合配置文件的最终 options</span></div><div class="line">processOptions(options);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processOptions</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"../lib/webpack.js"</span>);</div><div class="line">    <span class="keyword">var</span> compiler = webpack(options);</div><div class="line">    <span class="keyword">if</span>(options.watch) &#123;</div><div class="line">    	compiler.watch(watchOptions, compilerCallback);</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    	compiler.run(compilerCallback);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>通过vue-cli构建的vue项目 开发是依赖 webpack<br>他是通过自己启动服务 将webpack作为中间件来运行<br>然后通过各种插件实现 代理 热加载等功能<br>通过express 来实现热加载 是依赖 <code>webpack-hot-middleware</code>实现<br>通过webpack构建的实例是继承<code>tapable</code>的<br><code>tapable</code> 用于事件发布执行的插件<br>通过 <code>plugin</code>注册事件<br>通过<code>applyPlugin</code>等响应事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</div><div class="line"><span class="keyword">var</span> compiler = webpack(webpackConfig)</div><div class="line"><span class="keyword">var</span> hotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler,&#123;</div><div class="line">    <span class="attr">log</span>:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//通过 html-webpack-plugin-after-emit 来触发 行为</span></div><div class="line">compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">compilation</span>) </span>&#123;</div><div class="line">    compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, cb</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'------------'</span>)</div><div class="line">        hotMiddleware.publish(&#123; <span class="attr">action</span>: <span class="string">'reload'</span> &#125;)</div><div class="line">        cb()</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//client</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'eventsource-polyfill'</span>)</div><div class="line"><span class="keyword">var</span> hotClient = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>)</div><div class="line"><span class="comment">// 响应 刷新页面</span></div><div class="line">hotClient.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (event.action === <span class="string">'reload'</span>) &#123;</div><div class="line">    <span class="built_in">window</span>.location.reload()</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过webpack的源码可以看到 webpack启动时 根据watch参数和回调来判断是否开启监听<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> mergeConfig = merge(webpackConfig,&#123;</div><div class="line">    <span class="attr">watch</span>:<span class="literal">true</span></div><div class="line">&#125;)</div><div class="line">webpack(mergeConfig)  <span class="comment">//监听</span></div><div class="line">webpack(mergeConfig,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">//监听</span></div><div class="line"><span class="comment">// 没有 回调 没有watch 执行watch</span></div><div class="line">compiler = webpack(mergeConfig)</div><div class="line">compiler.watch()</div></pre></td></tr></table></figure></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>可以看到<code>webpack</code>的流程都是基于<code>tapable</code>订阅和发布机制来实现<br>而<code>tapable</code>的设计思想 是面向切面的编程设计aop<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//例子 统计A方法的调用次数</span></div><div class="line"><span class="comment">// 直接写在A方法里 耦合了A的业务逻辑</span></div><div class="line"><span class="comment">// 通过回调参数解决 增加后期维护难度</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'执行A的逻辑'</span>)   </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'执行B的逻辑'</span>)  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//AOP</span></div><div class="line"><span class="built_in">Function</span>.prototype.logCount = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _self = <span class="keyword">this</span></div><div class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)</div><div class="line">        <span class="keyword">return</span> _self.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> A_log = A.logCount(B)</div><div class="line">A_log()</div><div class="line"><span class="comment">// 业务解耦 面向切面进行拓展</span></div><div class="line"></div><div class="line"><span class="string">`tapable`</span>就是一句这种思想进行设计</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComP</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>._plugins = &#123;&#125;</div><div class="line">&#125;</div><div class="line">ComP.prototype.plugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">ComP.prototype.applyPlugins = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//webpack 的plugins 提供一个 apply 方法作为插件的入口</span></div><div class="line"><span class="comment">//并在这个方法中 发布时间</span></div><div class="line"><span class="comment">//在webpack构建时 调用apply方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WebP</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> compiler = <span class="keyword">new</span> ComP();</div><div class="line">    compiler.apply.apply(compiler,options.plugins)</div><div class="line">    compiler.run();</div><div class="line">&#125;</div><div class="line"><span class="comment">// options.plugins 是个数组 这里使用apply的技巧 第二个参数接受数组 在调用的方法里转成列表</span></div><div class="line">ComP.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">            <span class="built_in">arguments</span>[i].apply(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plugDemo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//plugDemo 订阅emit事件 当webpack的构建流程到emit时执行</span></div><div class="line">plugDemo.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>)</span>&#123;</div><div class="line">    compiler.plugin(<span class="string">"emit"</span>, (callback) =&gt; &#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'第一次执行'</span>)</div><div class="line">            callback()</div><div class="line">        &#125;,<span class="number">1500</span>)</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> _obj = &#123;</div><div class="line">    <span class="attr">plugins</span>:[</div><div class="line">        <span class="keyword">new</span> plugDemo()</div><div class="line">    ],</div><div class="line">&#125;</div><div class="line">WebP(_obj)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;研究研究 源码&lt;br&gt;总结总结 心得&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="//blog.fenghou.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>canvas 图片裁剪</title>
    <link href="//blog.fenghou.site/2017/10/10/2017-10-10-canvas-clip-image/"/>
    <id>//blog.fenghou.site/2017/10/10/2017-10-10-canvas-clip-image/</id>
    <published>2017-10-10T08:50:07.000Z</published>
    <updated>2017-11-02T02:59:34.228Z</updated>
    
    <content type="html"><![CDATA[<p>心血来潮想实现一个图片编辑器<br><a id="more"></a></p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>实现图片根据选择区域裁剪<br>选择区域大小可以拖动改变</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><blockquote>
<p>裁切drawImage(image,x,y,w,h,_x,_y,_w,_h)</p>
</blockquote>
<p>x 裁切图片中x坐标<br>y 裁切图片中y坐标<br>w 裁切图片中的宽<br>h 裁切图片中的高<br>_x canvas中显示的x坐标<br>_y canvas中显示的y坐标<br>_w canvas中显示的宽<br>_h canvas中显示的高</p>
<p>所以思路是 在图片上显示一个选择区域 可以拖动 获取相对于图片的位置 在canvas中加载图片</p>
<blockquote>
<p>拉伸大小</p>
</blockquote>
<p>宽度拉伸 可以通过在选择区域中绝对定位一个元素来模拟边框 监听它上面的move事件来处理<br>这里注意事件的执行机制<br>事件的执行机制分为冒泡型和捕获型<br>冒泡型事件 从当前节点开始执行 一路传递给绑定当前事件的父元素 知道根节点为止<br>捕获型事件 从最外层绑定该事件的元素往子元素传递<br>addEventListener第三个参数默认false true表示冒泡事件 false表示捕获事件<br>可以通过<br>event.stopPropagation()<br>来阻止事件的冒泡<br>event.preventDefault()<br>这个是用来阻止事件的默认操作</p>
<blockquote>
<p>旋转</p>
</blockquote>
<p>通过控制Img旋转来控制<br>一开始的想法是通过旋转选择区域来选取，但这样选择区域的获取图片数据会很繁琐而且意义不大<br>旋转通过样式transform:rotate(0deg)<br>在js获取样式时 要通过getComputedStyle这个API来获取<br>style获取的是元素style属性中的样式 可读可写<br>所以通过style设置的元素回出现在元素的style属性中<br>getComputedStyle 获取的是最终作用在节点上的样式 只读<br>currentStyle IE自娱自乐产物 语法跟style类似 功能跟 getComputedStyle类似</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clipV = <span class="built_in">window</span>.getComputedStyle(clip,<span class="literal">null</span>)</div><div class="line"><span class="keyword">var</span> clipTrans = clip.getPropertyValue(<span class="string">'transform'</span>)</div><div class="line"><span class="comment">// or var clipTrans = clip.transform</span></div><div class="line"><span class="comment">// 这时候获取的是一个二维矩阵</span></div><div class="line"><span class="comment">// 型如 matrix(20, 10, 10, 10, 0, 0)</span></div></pre></td></tr></table></figure>
<blockquote>
<p>关于matrix</p>
</blockquote>
<p>matrix(a,b,c,d,e,f)<br>e,f 控制 x, y轴的偏移位置</p>
<p>a,b,c,d 控制旋转 旋转的角度(θ) matrix(cosθ,sinθ,-sinθ,cosθ,0,0)</p>
<p>角度计算 angle = Math.round(Math.atan2(b, a) <em> (180 / Math.PI))<br>缩放计算<br><code>有旋转时</code><br>x轴缩放  scaleX = Math.sqrt(a </em> a + b <em> b)<br>y轴缩放  scaleY = Math.sqrt(c </em> c + d * d)<br><code>无旋转时</code><br>x轴缩放  scaleX = a<br>y轴缩放  scaleY = b</p>
<p>matrix(1,tan(θy),tan(θx),1,0,0)<br>拉伸计算<br>x轴拉伸角度 skewX = Math.atan(c)<br>y轴拉伸角度 skewX = Math.atan(b)</p>
<blockquote>
<p>css动画界三巨头 transform transitions animation<br>举个例子<br>王者农药 新出一个英雄 <code>浪</code><br><code>一技能(transition)</code> 标记敌人 设置过度效果<br><code>二技能(transform)</code> 命中敌人 变化敌人<br><code>三技能(animation)</code> 命中目标 设置过度效果 变化敌人并带有过度效果(只产生效果)<br><code>被动(style.)</code>   二技能命中标记一技能的目标 会使二技能有过度效果；普攻第三次 变化敌人</p>
<p>硝烟弥漫的峡谷中 刚刚结束一场战斗 我方四名英雄死于敌方小兵之手<br>这时。。。<br>我方<code>浪</code>出现在中路 对线敌方诸葛亮 李白 红蓝双buff在手<br>一技能 成功标记诸葛亮(李白逃脱)  transition:transform 100ms linear<br>反手 一个二技能  transform:translate(0px,100px)(移动到我方中路一塔下) 命中对方诸葛亮 和 李白<br>李白唰一下出现在我方塔下(效果如闪现) 诸葛亮也慢跑到塔下…<br><code>浪</code> double kill<br>对面鲁班 苏烈过来支援 反手一个 大招  animation:scale_leg(腿缩短至十分之一) 100ms 4  alternate linear<br>只见 鲁班 苏烈一会变高 一会变矮 …<br><code>浪</code> quadra kill<br>木兰从草丛杀出 一技能 怼脸上  transition:display 100ms linear 蓝条空了<br>普攻 普攻 丝血 闪现接普攻 触发被动<br>缓缓的消失吧，木兰！！ document.querySelector(‘花木兰’).style.display = ‘none’<br><code>浪</code> penta kill</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>css相关的还是要经常温故温故 不然真的容易忘了</p>
<blockquote>
<p>参考<br><a href="http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/" target="_blank" rel="external">获取元素CSS值之getComputedStyle方法熟悉</a><br><a href="http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/" target="_blank" rel="external">理解CSS3 transform中的Matrix(矩阵)</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;心血来潮想实现一个图片编辑器&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="//blog.fenghou.site/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Js类型</title>
    <link href="//blog.fenghou.site/2017/09/19/2017-09-19-js-input-check/"/>
    <id>//blog.fenghou.site/2017/09/19/2017-09-19-js-input-check/</id>
    <published>2017-09-19T02:02:58.000Z</published>
    <updated>2017-10-23T06:16:49.433Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些输入框中类型的判断<br><a id="more"></a></p>
<p>列举几个常用判断为空的情况<code>以下等于(==)不等于(!=)</code></p>
<table>
<thead>
<tr>
<th>对象</th>
<th>不等于</th>
<th>等于</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>‘’ false 0 []</td>
<td>null</td>
</tr>
<tr>
<td>null</td>
<td>‘’ false 0 []</td>
<td>undefined</td>
</tr>
<tr>
<td>‘’</td>
<td>null undefined</td>
<td>false 0 []</td>
</tr>
<tr>
<td>0</td>
<td>null undefined</td>
<td>false ‘’ []</td>
</tr>
<tr>
<td>false</td>
<td>null undefined</td>
<td>0 ‘’ []</td>
</tr>
<tr>
<td>[]</td>
<td>null undefined</td>
<td>false 0 ‘’</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span> || <span class="literal">null</span> || <span class="string">''</span> || <span class="number">0</span> || <span class="literal">false</span></div><div class="line"><span class="keyword">if</span>(!a)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'会执行'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = a || <span class="string">'test'</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// test</span></div><div class="line"><span class="comment">//判断是否输入了</span></div><div class="line"><span class="comment">//转成string 一来replace可以调用 而来 如果数据是一开始写入的0</span></div><div class="line"><span class="keyword">var</span> _s = (inputVal+<span class="string">''</span>).replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>,<span class="string">''</span>)</div><div class="line"><span class="keyword">if</span>(_s)&#123;</div><div class="line">    <span class="comment">//输入有效</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一些输入框中类型的判断&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Node-Session</title>
    <link href="//blog.fenghou.site/2017/08/20/2017-08-20-node-session-cookie/"/>
    <id>//blog.fenghou.site/2017/08/20/2017-08-20-node-session-cookie/</id>
    <published>2017-08-20T02:20:32.000Z</published>
    <updated>2017-11-02T03:24:53.180Z</updated>
    
    <content type="html"><![CDATA[<p>Node中使用Session<br><a id="more"></a></p>
<blockquote>
<p>server.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bodyParser  =  <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)()</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./models/user'</span>)</div><div class="line"></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</div><div class="line">app.use(session(&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'SESSION'</span>,</div><div class="line">    <span class="attr">secret</span>: <span class="string">'recommand 128 bytes random string'</span>,</div><div class="line">    <span class="attr">cookie</span>: &#123; <span class="attr">maxAge</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> &#125;</div><div class="line">&#125;));</div><div class="line">app.use(<span class="string">'/'</span>, router);</div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>./models/user.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> userControl = <span class="built_in">require</span>(<span class="string">'../controller/user'</span>)</div><div class="line">router.post(<span class="string">'/user/login'</span>,userControl.login)</div><div class="line">router.post(<span class="string">'/user/check'</span>,userControl.check)</div><div class="line">router.post(<span class="string">'/user/create'</span>,userControl.createUser)</div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
<blockquote>
<p>../controller/user.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userService = <span class="built_in">require</span>(<span class="string">'../service/user'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">login</span>: <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        userService.login(req,res)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">check</span>: <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        userService.check(req,res)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">createUser</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</div><div class="line">        userService.createUser(req,res)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>../service/user.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">'./../dataBase/user'</span>)</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">login</span>:<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="keyword">const</span> name = req.body.name,</div><div class="line">            pwd = req.body.pwd</div><div class="line">        <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">            <span class="attr">name</span>:name,</div><div class="line">            <span class="attr">password</span>:pwd</div><div class="line">        &#125;)</div><div class="line">        user.findUser(user.name,user.password)</div><div class="line">            .then(<span class="function">(<span class="params">rs</span>)=&gt;</span>&#123;</div><div class="line">                <span class="keyword">let</span> _data = &#123;&#125;</div><div class="line">                <span class="keyword">if</span>(rs.length)&#123;</div><div class="line">                    _data = &#123;</div><div class="line">                        <span class="attr">code</span>:<span class="number">200</span>,</div><div class="line">                        <span class="attr">data</span>:rs[<span class="number">0</span>]</div><div class="line">                    &#125;</div><div class="line">                    req.session.user = rs[<span class="number">0</span>].id;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    _data = &#123;</div><div class="line">                        <span class="attr">code</span>:<span class="number">500</span>,</div><div class="line">                        <span class="attr">msg</span>:<span class="string">'用户名或密码不正确'</span>,</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                res.send(_data)</div><div class="line">            &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">check</span>:<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> _data = &#123;&#125;</div><div class="line">        <span class="keyword">if</span>(req.session.user)&#123;</div><div class="line">            _data = &#123;</div><div class="line">                <span class="attr">code</span>:<span class="number">200</span>,</div><div class="line">                <span class="attr">data</span>:<span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            _data = &#123;</div><div class="line">                <span class="attr">code</span>:<span class="number">200</span>,</div><div class="line">                <span class="attr">data</span>:<span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res.send(_data)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">createUser</span>:<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="keyword">const</span> name = req.body.name,</div><div class="line">            pwd = req.body.pwd</div><div class="line">        <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">            <span class="attr">name</span>:name,</div><div class="line">            <span class="attr">password</span>:pwd</div><div class="line">        &#125;)</div><div class="line">        user.createUser(user.name,user.password)</div><div class="line">            .then(<span class="function">(<span class="params">rs</span>)=&gt;</span>&#123;</div><div class="line">                <span class="keyword">let</span> _data = &#123;&#125;</div><div class="line">                _data = &#123;</div><div class="line">                    <span class="attr">code</span>:<span class="number">200</span>,</div><div class="line">                    <span class="attr">data</span>:rs[<span class="number">0</span>]</div><div class="line">                &#125;</div><div class="line">                req.session.user = rs[<span class="number">0</span>].id;</div><div class="line">                res.send(_data)</div><div class="line">            &#125;)</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node中使用Session&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Linux 使用 Mysql</title>
    <link href="//blog.fenghou.site/2017/08/18/2017-08-18-linux-mysql/"/>
    <id>//blog.fenghou.site/2017/08/18/2017-08-18-linux-mysql/</id>
    <published>2017-08-18T02:20:08.000Z</published>
    <updated>2017-11-01T09:39:29.341Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 中使用 Mysql<br>记录<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>关于安装 完全按着教程走 没有什么大问题<br>具体的教程 按照 安装的 mysql版本 自行搜索<br><a href="https://www.baidu.com/s?wd=linux%20mysql%20%E5%AE%89%E8%A3%85" target="_blank" rel="external">linux mysqlx.x.x 安装</a></p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>基本都是数据库原理里面有交的<br>学校学的时候一开始还用过命令行<br>后来都是用可视化工具了<br>全忘光了</p>
<blockquote>
<p><code>mysql -uroot -p</code>  //输入密码后 操作mysql<br><code>show databases;</code>  //查看库<br><code>create database 库名;</code> //新建数据库<br><code>use 库名;</code>  // 打开数据库<br><code>show tables;</code>  // 显示表<br><code>describe 表名;</code> // 查看表结构<br><code>drop database 库名;</code> //删除库<br><code>drop table 表名;</code> //删除表<br>//新建库的话 直接导入来的快一点<br><code>mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql</code> 导入</p>
</blockquote>
<p>不涉及复杂操作的话 这些命令基本够用了 </p>
<blockquote>
<p>参考<br><a href="http://www.jb51.net/article/90317.htm" target="_blank" rel="external">最全的mysql 5.7.13 安装配置方法图文教程(linux) 强烈推荐!</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 中使用 Mysql&lt;br&gt;记录&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="//blog.fenghou.site/tags/linux/"/>
    
      <category term="mysql" scheme="//blog.fenghou.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>浏览器中js事件运行机制</title>
    <link href="//blog.fenghou.site/2017/08/08/2017-08-08-js-event-loop/"/>
    <id>//blog.fenghou.site/2017/08/08/2017-08-08-js-event-loop/</id>
    <published>2017-08-08T08:28:27.000Z</published>
    <updated>2017-11-02T08:48:38.456Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下 浏览器中js事件运行机制<br><a id="more"></a><br>起因是女票今天问我一个问题<br>问题如下</p>
<h3 id="alert引起的争论"><a href="#alert引起的争论" class="headerlink" title="alert引起的争论"></a>alert引起的争论</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>,</div><div class="line">    domProcess = <span class="built_in">document</span>.querySelector(<span class="string">'#process'</span>),</div><div class="line">    inter = <span class="literal">null</span></div><div class="line">inter = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(count == <span class="number">100</span>)&#123;</div><div class="line">        domProcess.innerText = count+<span class="string">'%'</span></div><div class="line">        <span class="built_in">console</span>.log(count)</div><div class="line">        alert(<span class="string">'加载完成'</span>)</div><div class="line">        clearInterval(inter)</div><div class="line">    &#125;</div><div class="line">&#125;,<span class="number">100</span>)</div><div class="line"><span class="comment">//弹框时 为什么页面上process显示的是99%？</span></div></pre></td></tr></table></figure>
<p>因为前段时间了解过Event-Loop的机制 知道怎么去解决它<br>但是要跟女票讲清楚 还是得在总结总结 毕竟自己也是了解的不深</p>
<h3 id="单线程-amp-amp-任务队列-amp-amp-Event-Loop"><a href="#单线程-amp-amp-任务队列-amp-amp-Event-Loop" class="headerlink" title="单线程 &amp;&amp; 任务队列 &amp;&amp; Event-Loop"></a>单线程 &amp;&amp; 任务队列 &amp;&amp; Event-Loop</h3><blockquote>
<p><img src="/assets/blogImg/2017-08-08-js-event-loop.png" alt="eventLoop"><br>图片来自Philip Roberts的演讲《Help, I’m stuck in an event-loop》<br><a href="http://v.youku.com/v_show/id_XMjY5MTkwMDYzNg==.html" target="_blank" rel="external">Help, I’m stuck in an event-loop优酷地址</a></p>
</blockquote>
<p>首先Js是单线程的 异步是浏览器的事(宿主环境)<br>主线程运行的时候 产生堆(heap)和栈(stack)<br>主线程将运行中碰到的事件推入 执行栈中 开始执行<br>执行结束后 弹出执行栈 推入下一个事件<br>当执行到webAPI时 会将它当做任务源(相当于是分发任务)来执行 并且弹出<br>这时候会产生一个待执行的任务<br>当这个任务满足执行条件时 会进入到任务队列当中<br>当执行栈 为空时 主线程会不断的去调取任务队列中任务 推入 执行栈中执行 这个运行机制就是 Event-Loop<br>而任务队列 可以分为 宏任务队列(macro-task) 和 微任务队列(micro-task)<br>当执行栈为空时 主线程会先去micro-task中调取任务 micro-task为空时才会去 macro-task调取任务执行</p>
<blockquote>
<p>触发任务的webAPI<br>DOM(DOCUMENT),AJAX,setTimeOut,setInterval,Promise,process.nextTick,setImmediate<br>其中 加入宏队列中任务 DOM(DOCUMENT),AJAX,setTimeOut,setInterval,setImmediate<br>加入微任务队列中的任务 Promise,process.nextTick</p>
</blockquote>
<h3 id="真相"><a href="#真相" class="headerlink" title="真相"></a>真相</h3><p>所以 上面的js在执行中<br>遇到 <code>document.querySelector(&#39;#process&#39;).innerText = count+&#39;%&#39;</code><br>推入执行栈 由于是DOM操作判定为任务源 推出执行栈<br>满足执行条件 加入到 宏任务队列<br>遇到 <code>console.log(count)</code><br>推入执行栈 控制台输出 100 推出执行栈<br>遇到 <code>alert(&#39;加载完成&#39;)</code><br>推入执行栈 开始执行 主线程挂起 等待弹框确认<br>弹窗确认后 推出执行栈<br>遇到 <code>clearInterval(inter)</code><br>推入执行栈 执行 推出执行栈<br>此时执行栈为空 开始调用 任务队列<br>微任务队列为空 直接调用宏任务队列<br>将 <code>document.querySelector(&#39;#process&#39;).innerText = count+&#39;%&#39;</code> dom操作分发的执行任务推入执行栈<br>渲染页面数据 推出执行栈</p>
<p>所以要解决这个问题 只需要加个setTimeout就能解决问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="string">'加载完成'</span>) </div><div class="line">&#125;,<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>这里有个问题就是 碰到这个webAPI时 并不是把 这些webAPI推入任务队列<br>在执行栈中 这些webAPI还是立即执行的 是把它分发的任务 推入任务队列<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//譬如</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'log'</span>)</div><div class="line">&#125;,<span class="number">1000</span>)</div><div class="line"><span class="comment">//setTimeOut 会立即进入执行栈 并且执行</span></div><div class="line"><span class="comment">//它的第一个参数就是他要分发的任务 会在满足它的分发条件后进入任务队列 </span></div><div class="line"><span class="comment">// 上例就是1000ms后进入任务队列</span></div></pre></td></tr></table></figure></p>
<p>再看下面的两个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//demo 1</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">8</span>);&#125;,<span class="number">0</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="number">7</span>);</div><div class="line">    &#125;)</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</div><div class="line">&#125;,<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">reslove</span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">     reslove()</div><div class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="number">4</span>)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">//demo 2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="number">2.2</span>+x)</div><div class="line">   &#125;,<span class="number">0</span>)</div><div class="line">   <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="number">2.1</span>+x);</div><div class="line">   &#125;)</div><div class="line">   <span class="built_in">console</span>.log(<span class="number">1</span>+x)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    A(<span class="string">'B'</span>)</div><div class="line">&#125;</div><div class="line">A(<span class="string">'A'</span>)</div><div class="line">B()</div></pre></td></tr></table></figure></p>
<p>联系上面的分析<br>第一题的输出 应该是 1 2 3 4 5 6 7 8</p>
<p>第二题的输出 应该是 1A 1B 2.1A 2.1B 2.2A 2.2B</p>
<p>写在一块输出 应该是 1 2 1A 1B 3 4 2.1A 2.1B 5 6 7 2.2A 2.2B 8</p>
<blockquote>
<p>参考文章<br><a href="http://www.cnblogs.com/woodyblog/p/6061671.html" target="_blank" rel="external">js的单线程和异步</a><br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external">JavaScript 运行机制详解：再谈Event Loop</a><br><a href="http://www.jianshu.com/p/12b9f73c5a4f" target="_blank" rel="external">前端基础进阶（十二）：深入核心，详解事件循环机制</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下 浏览器中js事件运行机制&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Js异步编程</title>
    <link href="//blog.fenghou.site/2017/08/02/2017-08-02-js-promise/"/>
    <id>//blog.fenghou.site/2017/08/02/2017-08-02-js-promise/</id>
    <published>2017-08-02T02:19:25.000Z</published>
    <updated>2017-11-11T02:24:10.440Z</updated>
    
    <content type="html"><![CDATA[<p>异步 总结(整理中)<br><a id="more"></a></p>
<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>通过简易实现 promise 了解原理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> PENDING = <span class="string">'PENDING'</span></div><div class="line">    <span class="keyword">const</span> FULFILLED = <span class="string">'FULFILLED'</span></div><div class="line">    <span class="keyword">const</span> REJECTED = <span class="built_in">Symbol</span>();</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TP</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> state = PENDING</div><div class="line">        <span class="keyword">let</span> value = <span class="literal">null</span></div><div class="line">        <span class="keyword">let</span> handel = []</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">            state = FULFILLED</div><div class="line">            value = result</div><div class="line">            handel.forEach(next)</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">result,idx</span>)</span>&#123;</div><div class="line">            <span class="keyword">let</span> then = result &amp;&amp; result.then &amp;&amp; <span class="keyword">typeof</span> result.then == <span class="string">'function'</span> ? result.then : <span class="literal">null</span>;</div><div class="line">            <span class="comment">// let then = typeof result</span></div><div class="line">            <span class="keyword">if</span> (then) &#123;</div><div class="line">                then.bind(result)(resolve)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            fulfill(result)</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">// console.log(result)</span></div><div class="line">            <span class="comment">// console.log('resolve~~~',idx)</span></div><div class="line">            <span class="comment">// fulfill(result)</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">&#123;onFulfill&#125;,idx</span>)</span>&#123;</div><div class="line">            <span class="comment">// console.log('next~~~',idx)</span></div><div class="line">            <span class="keyword">switch</span> (state)&#123;</div><div class="line">                <span class="keyword">case</span> FULFILLED:</div><div class="line">                    onFulfill &amp;&amp; onFulfill(value)</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">case</span> PENDING:</div><div class="line">                    handel.push(&#123;onFulfill&#125;)</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfill,idx</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TP(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</div><div class="line">                <span class="comment">// console.log('then~~~',idx)</span></div><div class="line">                next(&#123;</div><div class="line">                    <span class="attr">onFulfill</span>:<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</div><div class="line">                        resolve(onFulfill(val),idx)</div><div class="line">                    &#125;</div><div class="line">                &#125;,idx)</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        fn(resolve)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">new</span> TP(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</div><div class="line">        <span class="comment">// console.log('TP-1')</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            resolve(<span class="string">'TP-Resolve1'</span>,<span class="number">0</span>)</div><div class="line">        &#125;,<span class="number">2000</span>)</div><div class="line">    &#125;).then(<span class="function">(<span class="params">s</span>)=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'TP-1'</span>,s)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TP(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                resolve(<span class="string">'TP-Resolve2'</span>,<span class="number">0</span>)</div><div class="line">            &#125;,<span class="number">2000</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;,<span class="number">1</span>).then(<span class="function">(<span class="params">s</span>)=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'TP-2'</span>,s)</div><div class="line">    &#125;,<span class="number">2</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'---END---'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到 promise 回调是通过调用 promise中的 rosolve去触发回调函数的<br>关于promise状态的改变 只会触发一次 由pedding 变为 resolve 或者 reject<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</div><div class="line">    reslove()</div><div class="line">    reject()</div><div class="line">&#125;)</div><div class="line"><span class="comment">//即只会执行 reslove</span></div></pre></td></tr></table></figure></p>
<p>关于异常的捕获 在声明时的异常可以在 reject或者catch中捕获<br>而在then中的异常只能在catch中捕获<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'我能在Reject中和catch中捕获'</span>)</div><div class="line">&#125;)</div><div class="line">start.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'我能在catch中捕获'</span>)</div><div class="line">&#125;,()=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'我只能捕获new Promise()中的异常'</span>)</div><div class="line">&#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'我能捕获所有异常 如果在reject中捕获了 那我就不捕获了'</span>)    </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Promise的嵌套 then可以返回的个promise对象支持链式回调<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> A = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</div><div class="line">    resolve(<span class="string">'A'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> B = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</div><div class="line">    resolve(<span class="string">'B'</span>)</div><div class="line">&#125;)</div><div class="line">A.then(<span class="function">(<span class="params">rs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(rs)</div><div class="line">    <span class="keyword">return</span> B</div><div class="line">&#125;).then(<span class="function">(<span class="params">rs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(rs)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//而不是</span></div><div class="line">A.then(<span class="function">(<span class="params">rs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(rs)</div><div class="line">    B.then(<span class="function">(<span class="params">rs</span>)=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(rs)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genT</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>,_len = arr.length;i&lt;_len;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> arr[i] === <span class="string">'number'</span>)&#123;</div><div class="line">            <span class="keyword">yield</span> arr[i]</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">yield</span>* genT(arr[i])</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> _arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> g <span class="keyword">of</span> genT(_arr))&#123;</div><div class="line">    <span class="built_in">console</span>.log(g)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h3><p>可以理解为generator 的语法糖<br>实现过程将generator 的表述移到语法内部实现(await)<br>async函数返回一个 Promise 对象，可以使用then方法添加回调函数<br>await 后面一般跟promise 如果不是的话会执行promise.reslove()<br>await 只能作用在 async方法中</p>
<p>譬如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">await</span> start()</div><div class="line">&#125;)</div><div class="line">[].forEach(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">await</span> start()</div><div class="line">&#125;)</div><div class="line"><span class="comment">//都会报错</span></div></pre></td></tr></table></figure></p>
<p>await 返回的应该是 一个promise.resolve()中返回的数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> awaitLoad = <span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">    reslove(arr)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> start = <span class="keyword">async</span> ()=&gt;&#123;</div><div class="line">    <span class="keyword">var</span> load = <span class="keyword">await</span> awaitLoad()</div><div class="line">    <span class="built_in">console</span>.log(load)</div><div class="line">    <span class="comment">//[1,2,3,4,5]</span></div><div class="line">    <span class="keyword">return</span> load</div><div class="line">&#125;</div><div class="line">start().then(<span class="function">(<span class="params">rs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(rs)</div><div class="line">    <span class="comment">//[1,2,3,4,5]</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>关于异常返回从处理<br>如果 await 后面的promise异常执行了reject name 后面的命令不再执行<br>因此要把问题抛出来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> start = <span class="keyword">async</span> ()=&gt;&#123;</div><div class="line">    <span class="comment">//一种写法</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">await</span> fn()</div><div class="line">    &#125; <span class="keyword">catch</span>(err)&#123;</div><div class="line">        <span class="built_in">console</span>.log(err)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//第二种</span></div><div class="line">    <span class="keyword">await</span> fn().catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(err)</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异步 总结(整理中)&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vue事件</title>
    <link href="//blog.fenghou.site/2017/07/20/2017-07-20-vue-event/"/>
    <id>//blog.fenghou.site/2017/07/20/2017-07-20-vue-event/</id>
    <published>2017-07-20T02:18:56.000Z</published>
    <updated>2017-09-30T03:35:49.219Z</updated>
    
    <content type="html"><![CDATA[<p>vue 中通过[$on]注册事件[$emit]来触发事件<br>这里来模拟一下它内部的实现机制<br>超简易<br><a id="more"></a></p>
<h3 id="初始化Vue"><a href="#初始化Vue" class="headerlink" title="初始化Vue"></a>初始化Vue</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">V</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>._init()</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMixin</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">    v.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        initEvent(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">initMixin(V)</div></pre></td></tr></table></figure>
<h3 id="初始化事件"><a href="#初始化事件" class="headerlink" title="初始化事件"></a>初始化事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initEvent</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">    v._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="混合事件"><a href="#混合事件" class="headerlink" title="混合事件"></a>混合事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventsMixin</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">    v.prototype.$on = <span class="function"><span class="keyword">function</span>(<span class="params">name,fn</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>._events[name] = fn</div><div class="line">    &#125;</div><div class="line">    v.prototype.$emit = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> cbs = <span class="keyword">this</span>._events[event]</div><div class="line">        <span class="keyword">let</span> args = toArray(<span class="built_in">arguments</span>,<span class="number">1</span>)</div><div class="line">        cbs.apply(<span class="keyword">this</span>,args)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">eventsMixin(V)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span> (<span class="params">list, start</span>) </span>&#123;</div><div class="line">    start = start || <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> i = list.length - start</div><div class="line">    <span class="keyword">const</span> ret = <span class="keyword">new</span> <span class="built_in">Array</span>(i)</div><div class="line">    <span class="keyword">while</span> (i--) &#123;</div><div class="line">        ret[i] = list[i + start]</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> V()</div><div class="line">v.$on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(msg)</div><div class="line">&#125;)</div><div class="line">v.$emit(<span class="string">'click'</span>,<span class="string">'emit'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue 中通过[$on]注册事件[$emit]来触发事件&lt;br&gt;这里来模拟一下它内部的实现机制&lt;br&gt;超简易&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
      <category term="vue" scheme="//blog.fenghou.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置https</title>
    <link href="//blog.fenghou.site/2017/07/12/2017-07-12-nginx-ssl/"/>
    <id>//blog.fenghou.site/2017/07/12/2017-07-12-nginx-ssl/</id>
    <published>2017-07-12T09:40:27.000Z</published>
    <updated>2017-11-02T03:13:52.499Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚续费阿里云服务器，肉疼中。。。<br>今天先尝试了下 把http改成https 在这里记录一下<br><a id="more"></a></p>
<h3 id="Http和Https"><a href="#Http和Https" class="headerlink" title="Http和Https"></a>Http和Https</h3><p>关于http和https的差别 就不说了<br>反正不是只多了个s就对了~~</p>
<h3 id="Linux中配置nginx"><a href="#Linux中配置nginx" class="headerlink" title="Linux中配置nginx"></a>Linux中配置nginx</h3><p>服务器上的项目是通过nginx跑起来的<br>所以主要还是围绕着nginx配置展开</p>
<blockquote>
<p>ssl on ;<br>我服务器上nginx配置编译的时候没有把ssl的模块编译进去<br>所以在这里报了缺少ssl指令的错误</p>
</blockquote>
<p>so 需要重新编译nginx<br>找到nginx下载目录 没了就就重新下~~</p>
<blockquote>
<p>./configure –with-http_ssl_module<br>很好 如果服务器上面已经安装了openssl 那么基本可以编译通过<br>yum install openssl openssl-devel<br>恩 如果编译的时候没有加载默认的 那么就需要手动配置<br>./configure –with-http_ssl_module –with-openssl=/usr/bin/openssl<br>敲黑板 这么写 编译的时候openssl会去从–with-openssl 那里取<br>所以这里必须是源码目录 不应该安装目录</p>
</blockquote>
<p>补充：填了安装目录 编译失败 竟然也找到了编译通过的方法。。<br>修改方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># vi auto/lib/openssl/conf</div><div class="line">CORE_INCS="$CORE_INCS $OPENSSL/openssl/include"</div><div class="line">CORE_DEPS="$CORE_DEPS $OPENSSL/openssl/include/openssl/ssl.h"</div><div class="line">CORE_LIBS="$CORE_LIBS $OPENSSL/openssl/lib/libssl.a"</div><div class="line">CORE_LIBS="$CORE_LIBS $OPENSSL/openssl/lib/libcrypto.a"</div><div class="line">改为：</div><div class="line">CORE_INCS="$CORE_INCS $OPENSSL/include"</div><div class="line">CORE_DEPS="$CORE_DEPS $OPENSSL/include/openssl/ssl.h"</div><div class="line">CORE_LIBS="$CORE_LIBS $OPENSSL/lib/libssl.a"</div><div class="line">CORE_LIBS="$CORE_LIBS $OPENSSL/lib/libcrypto.a"</div></pre></td></tr></table></figure></p>
<p>但是 make 的时候还是会报错 </p>
<p>make 打包成功后会在nginx源码目录的objs下生成nginx</p>
<blockquote>
<p>cp objs/nginx nginx配置目录/sbin<br>拷贝覆盖 即可</p>
</blockquote>
<p>然后配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">listen <span class="number">443</span>;</div><div class="line">ssl on;</div><div class="line">ssl_certificate /---------------------.pem;</div><div class="line">ssl_certificate_key /-----------------.key;</div><div class="line">ssl_session_timeout <span class="number">5</span>m;</div><div class="line">ssl_ciphers -----------------------------------------------;</div><div class="line">ssl_protocols ------------------------;</div><div class="line">ssl_prefer_server_ciphers on;</div></pre></td></tr></table></figure></p>
<p>配置ssl证书 基本就ok了</p>
<blockquote>
<p>sbin/nginx -t<br>  nginx: [emerg] getpwnam(“www”) failed</p>
</blockquote>
<p>错误的原因是没有创建www这个用户 解决办法</p>
<blockquote>
<p>1 在nginx.conf中 把user nobody的注释去掉既可<br>2 /usr/sbin/groupadd -f www<br>    /usr/sbin/useradd -g www www</p>
</blockquote>
<h3 id="关于证书"><a href="#关于证书" class="headerlink" title="关于证书"></a>关于证书</h3><p>生成步骤 百度。。。</p>
<blockquote>
<p>startSSL</p>
</blockquote>
<p>注册申请 生成ctr…<br>捣腾许久 终于配置成功 微信打开失败 不被认证</p>
<blockquote>
<p>Symantec Ltd</p>
</blockquote>
<p>在阿里云 免费申请ssl证书<br>nginx如果配置是全局https<br>受认证只能是 申请ssl时填写的域名<br>xx.xx 申请<br>xx.xx.xx 不被认证</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>不想搞运维的前端不是个好架构</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>今天下班 被分配到 小黑屋封闭开发<br>没空调。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刚续费阿里云服务器，肉疼中。。。&lt;br&gt;今天先尝试了下 把http改成https 在这里记录一下&lt;br&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="//blog.fenghou.site/tags/nginx/"/>
    
      <category term="https" scheme="//blog.fenghou.site/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我的vue项目</title>
    <link href="//blog.fenghou.site/2017/06/25/2017-06-25-vue-modules/"/>
    <id>//blog.fenghou.site/2017/06/25/2017-06-25-vue-modules/</id>
    <published>2017-06-25T12:17:35.000Z</published>
    <updated>2017-11-02T03:14:21.985Z</updated>
    
    <content type="html"><![CDATA[<p>Vue相关-整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue相关-整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="//blog.fenghou.site/tags/vue/"/>
    
      <category term="vuex" scheme="//blog.fenghou.site/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>XX云音乐</title>
    <link href="//blog.fenghou.site/2017/06/20/2017-06-20-node-simple-netease-cloud-music/"/>
    <id>//blog.fenghou.site/2017/06/20/2017-06-20-node-simple-netease-cloud-music/</id>
    <published>2017-06-20T08:30:19.000Z</published>
    <updated>2018-01-05T02:19:58.440Z</updated>
    
    <content type="html"><![CDATA[<p>整理中<br><a id="more"></a></p>
<p>前端 React<br>数据库 暂时不用<br>服务端 express —&gt; koa 迁移<br>API    (网易云Node音乐API)[<a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/" target="_blank" rel="external">https://binaryify.github.io/NeteaseCloudMusicApi/#/</a>]</p>
<p>redux 中的 dispatch 行为会被所有的reducer 捕获<br>react-redux 的 connect 中 传入的 state 会混合在 组件的 props<br>传入的action 如果有值 会 传入调用 调用dispatch()的方法 如果不传 则会 传入 dispatch方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</div><div class="line">    <span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">let</span> &#123;count&#125; = state.User</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            count</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    (dispatch) =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> type  = &#123; <span class="attr">type</span>: <span class="string">'CAT'</span> &#125;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">onIncreaseClick</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(type)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">)(Index)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; count, onIncreaseClick &#125; = <span class="keyword">this</span>.props</div><div class="line">       </div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;span&gt;&#123;count&#125;&lt;/span&gt;</div><div class="line">                &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/button&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        )</div><div class="line">        <span class="comment">//如果不传第二个参数</span></div><div class="line">        <span class="keyword">const</span> &#123; count, dispatch &#125; = <span class="keyword">this</span>.props</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> (</div><div class="line">                    &lt;div&gt;</div><div class="line">                        &lt;span&gt;&#123;count&#125;&lt;/span&gt;</div><div class="line">                        &lt;button onClick=&#123;()=&gt;&#123;</div><div class="line">                            const type  = &#123; type: 'CAT' &#125;</div><div class="line">                            dispatch(type)</div><div class="line">                        &#125;&#125;&gt;Increase&lt;/button&gt;</div><div class="line">                  &lt;/div&gt;</div><div class="line">                )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>react 中 默认props<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//way A</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> defaultProps = &#123; <span class="attr">demo</span> : <span class="number">12</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// way B</span></div><div class="line">Index.defaultProps = &#123; <span class="attr">demo</span> : <span class="number">12</span> &#125;</div></pre></td></tr></table></figure></p>
<p>react 中的 props 验证<br>React.PropTypes 自 React v15.5 起已弃用。请使用 prop-types 库代替<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Demo.propTypes = &#123;</div><div class="line">    <span class="attr">name</span>:  PropTypes.string.isRequired</div><div class="line">&#125;</div><div class="line"><span class="comment">// 是propTypes 不是PropTypes 也不是 propsTypes</span></div><div class="line"><span class="comment">// 是propTypes 不是PropTypes 也不是 propsTypes</span></div><div class="line"><span class="comment">// 是propTypes 不是PropTypes 也不是 propsTypes</span></div></pre></td></tr></table></figure></p>
<h3 id="关于路由"><a href="#关于路由" class="headerlink" title="关于路由"></a>关于路由</h3><p>react-router 版本 &gt; 4.0<br>exact 全匹配<br>Switch 匹配一个后不向下匹配</p>
<p><link to="/a/b"> 下面两个都会匹配</p>
<p><route path="/a"></route></p>
<p><route path="/a/b"></route><br>可以通过 exact 和 Switch 解决</p>
<p>strict 匹配链接的斜杠<br>true  /one 只匹配 /one<br>false /one 匹配  /one /one/ /one/two<br>Route component={XXX} render={()=&gt; XXX}</p>
<p>children 不管path是否被匹配 都会映射</p>
<p>默认是链接渲染</p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>react react-router react-redux </p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>koa express pm2</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
      <category term="react" scheme="//blog.fenghou.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端的请求</title>
    <link href="//blog.fenghou.site/2017/05/17/2017-05-17-content-type/"/>
    <id>//blog.fenghou.site/2017/05/17/2017-05-17-content-type/</id>
    <published>2017-05-17T03:28:09.000Z</published>
    <updated>2017-11-03T02:25:03.669Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="request-amp-amp-response"><a href="#request-amp-amp-response" class="headerlink" title="request &amp;&amp; response"></a>request &amp;&amp; response</h3><h3 id="content-type"><a href="#content-type" class="headerlink" title="content-type"></a>content-type</h3><blockquote>
<p>参考<br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;request-amp-amp-response&quot;&gt;&lt;a href=&quot;#request-amp-amp-response&quot; class=&quot;headerlink&quot; title=&quot;request &amp;amp;&amp;amp; respons
    
    </summary>
    
    
      <category term="http" scheme="//blog.fenghou.site/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>浅析vue数据响应</title>
    <link href="//blog.fenghou.site/2017/04/15/2017-04-15-vue-observe-watch/"/>
    <id>//blog.fenghou.site/2017/04/15/2017-04-15-vue-observe-watch/</id>
    <published>2017-04-15T12:16:29.000Z</published>
    <updated>2017-10-31T09:49:41.887Z</updated>
    
    <content type="html"><![CDATA[<p>Vue相关-整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue相关-整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="//blog.fenghou.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Nginx在前端</title>
    <link href="//blog.fenghou.site/2017/03/31/2017-03-31-nginx-proxy-vue/"/>
    <id>//blog.fenghou.site/2017/03/31/2017-03-31-nginx-proxy-vue/</id>
    <published>2017-03-31T01:55:58.000Z</published>
    <updated>2017-11-02T03:39:36.364Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些我碰到的Nginx在前端的应用<br><a id="more"></a></p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>nginx可以用来当做静态文件的服务器<br>如 本文所在的博客 就是通过nginx来部署的<br>通过root来指定 访问的静态资源的目录<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">       listen <span class="number">443</span>;</div><div class="line">       ssl on;</div><div class="line">       ssl_certificate /admin/ali-ssl/fenghou_site.pem;</div><div class="line">       ssl_certificate_key /admin/ali-ssl/fenghou_site.key;</div><div class="line">       ssl_session_timeout <span class="number">5</span>m;</div><div class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</div><div class="line">       ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</div><div class="line">       ssl_prefer_server_ciphers on;</div><div class="line">       server_name fenghou.site;</div><div class="line">       root /admin/fenghou/www/aliyun-blog/hexo;         </div><div class="line">       location / &#123;</div><div class="line">                index index.html;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>前后端分离的项目中<br>nginx除了起到服务器的作用<br>还可以用来做请求代理 解决一系列的跨域问题<br>说道代理 有的叫正向代理 有的叫反向代理<br>那么是怎么区分的呢？ 很简单<br>正向代理 服务器不知道 真实的用户<br>反向代理 用户不知道 真实的服务器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">       listen <span class="number">80</span>;</div><div class="line">       server_name demo.fenghou.site;</div><div class="line">       root /admin/fenghou/www/demo/view/dist;</div><div class="line">        location / &#123;</div><div class="line">            index index.html;</div><div class="line">        &#125;</div><div class="line">        location /demoAPI/ &#123;</div><div class="line">            proxy_pass http:<span class="comment">//localhost:4000;</span></div><div class="line">        &#125;</div><div class="line">        location /logAPI/ &#123;</div><div class="line">            proxy_pass http:<span class="comment">//localhost:5000/;</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一些我碰到的Nginx在前端的应用&lt;br&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="//blog.fenghou.site/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>骗到手的第八年@陈妞妞@我才是香坊大呲花</title>
    <link href="//blog.fenghou.site/2017/03/23/2017-03-23-love/"/>
    <id>//blog.fenghou.site/2017/03/23/2017-03-23-love/</id>
    <published>2017-03-23T02:22:59.000Z</published>
    <updated>2017-07-12T10:44:31.324Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=406346853&auto=0&height=66"></iframe><br><a id="more"></a></p>
<p>八年<br>九十六个月<br>两千九百二十二天</p>
<p><img src="/assets/blogImg/love/IMG_0053.PNG" alt="love"></p>
<p>那会还很瘦的陈妞妞(当然现在也不怎么胖)<br><img src="/assets/blogImg/love/IMG_0045.JPG" alt="love"></p>
<p><img src="/assets/blogImg/love/IMG_0051.JPG" alt="love"><br>(是的，陈妞妞现在的形象)</p>
<p>当陈妞妞意识到自己变胖了以后<br>深深的自责，忏悔着<br>but~~</p>
<p><img src="/assets/blogImg/love/IMG_0040.JPG" alt="love"></p>
<p>高中那会<br>我跟陈妞妞说<br>你负责貌美如花<br>我负责赚钱养家</p>
<p><img src="/assets/blogImg/love/IMG_0047.JPG" alt="love"><br>(I Love You)</p>
<p>现在<br>我正在努力<br>陈妞妞不仅仅是花<br>还兼职当上了小仙女<br>~~~</p>
<p><img src="/assets/blogImg/love/IMG_0054.GIF" alt="love"></p>
<p>多年后<br>幼儿园<br>很多小朋友争得面红耳赤<br>“我妈是老师！”<br>“我爸是警察！”<br>“我爸是局长！”</p>
<p>而我家小孩</p>
<p>云淡风轻 一脸不屑<br>“呵，我妈可是仙女！”</p>
<p><img src="/assets/blogImg/love/IMG_0042.JPG" alt="love"><br>(该打赏打赏，都别客气)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86
src=&quot;https://music.163.com/outchain/player?type=2&amp;id=406346853&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="//blog.fenghou.site/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>此去经年@我才是香坊大呲花</title>
    <link href="//blog.fenghou.site/2017/03/22/2017-03-21-diary/"/>
    <id>//blog.fenghou.site/2017/03/22/2017-03-21-diary/</id>
    <published>2017-03-22T06:05:31.000Z</published>
    <updated>2017-07-12T10:44:45.177Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=187908&auto=0&height=66"></iframe><br><a id="more"></a></p>
<p>昨天跟同事一起去打球<br>还没开始打，热身阶段投了会儿球<br>完了，跟跑完1000米一样一样的<br>后来还硬是打了快俩小时<br>今天全身酸爽的不行<br>连走路都走不顺</p>
<p>唉 老是真的老了<br>想想上次打球<br>还是去年毕业前最后的寝室南北对抗赛</p>
<p><img src="/assets/blogImg/2017-03-21-basekitball.jpg" alt="脆皮鸡"><br>(拍照那小子，问什么不把我照进去)</p>
<p>那会虽然体重跟现在差了略微几斤<br>但是照样能跑能跳</p>
<p>大学不是一点儿好处没有<br>它能洗去人的浮华<br>同时让人意志消磨<br>多愁善感<br>酒量大增(有吗)</p>
<p><img src="/assets/blogImg/2017-03-21-study.jpg" alt="脆皮鸡"></p>
<p><img src="/assets/blogImg/2017-03-21-IMG_0048.jpg" alt="脆皮鸡"><br>真正的成长或许就是<br>你开始低下了头<br>无论在行走还是坐着的时候<br>当头颅微微低下成为你日常生活中的主要姿势<br>你就真的长大了<br>总仰着脑袋的一定小屁孩<br>以为自己很牛x<br>其实差远了<br><img src="/assets/blogImg/2017-03-21-IMG_0050.jpg" alt="脆皮鸡"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86
src=&quot;https://music.163.com/outchain/player?type=2&amp;id=187908&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随想" scheme="//blog.fenghou.site/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>基于Vue的CPS后台</title>
    <link href="//blog.fenghou.site/2017/02/27/2017-02-27-%E5%9F%BA%E4%BA%8EVue%E7%9A%84CPS%E5%90%8E%E5%8F%B0/"/>
    <id>//blog.fenghou.site/2017/02/27/2017-02-27-基于Vue的CPS后台/</id>
    <published>2017-02-27T11:17:43.000Z</published>
    <updated>2017-03-15T11:22:58.483Z</updated>
    
    <content type="html"><![CDATA[<p>上周结束了在想去的最后一个项目<br>公众号联盟的推广后台<br><a id="more"></a></p>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>vue<br>应该不需要介绍<br>vuex<br>巴拉巴拉巴拉<br>vue-router<br>。。。。<br>webpack<br>这次用的版本是2.x跟1.x的配置还是有点出入</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>将整个后台按功能抽离成单独的模块<br>header 模块<br>footer 模块<br>menu 模块<br>page 分页模块<br>and 具体功能模块<br>balabalabalabala~~~<br>其实也没什么好说的。。。</p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>还是有不少值得注意的地方的</p>
<blockquote>
<p>路由切换中页面的刷新<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//监听路由变化</span></div><div class="line">watch: &#123;</div><div class="line">      <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (to.fullPath !== <span class="keyword">from</span>.fullPath) &#123;</div><div class="line">          <span class="keyword">this</span>.pageInt() <span class="comment">// 刷新处理</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>store交互数据的延迟<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回异步操作</span></div><div class="line"><span class="comment">//actions</span></div><div class="line">getOrder (&#123;commit&#125;, data) &#123;</div><div class="line">    <span class="keyword">const</span> opts = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">      <span class="attr">url</span>: <span class="string">'/union/order/list'</span>,</div><div class="line">      <span class="attr">data</span>: data</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fetchLoading(commit, <span class="string">'SET_ORDER'</span>, opts)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> fetchLoading = <span class="function">(<span class="params">commit, fn, opts</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    beginLoading(commit)</div><div class="line">    Util.fetch(opts)</div><div class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">        stopLoading(commit)</div><div class="line">        <span class="keyword">if</span> (fn) &#123;</div><div class="line">          commit(fn, response)</div><div class="line">          resolve()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          resolve(response)</div><div class="line">        &#125;</div><div class="line">      &#125;, error =&gt; &#123;</div><div class="line">        stopLoading(commit)</div><div class="line">        <span class="keyword">const</span> config = &#123;</div><div class="line">          <span class="attr">isShow</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">isToast</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">toastConfig</span>: &#123;</div><div class="line">            <span class="attr">toastMsg</span>: <span class="string">'系统繁忙,请稍后再试'</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        commit(<span class="string">'SET_POP'</span>, config)</div><div class="line">        <span class="built_in">console</span>.error(error)</div><div class="line">      &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//模块中调用actions中方法</span></div><div class="line"><span class="keyword">this</span>.getOrder(opts)</div><div class="line">          .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.getPaging(opts)</div><div class="line">          &#125;)</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>估计这周就离职了<br>额，就这样吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周结束了在想去的最后一个项目&lt;br&gt;公众号联盟的推广后台&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="//blog.fenghou.site/tags/webpack/"/>
    
      <category term="vue" scheme="//blog.fenghou.site/tags/vue/"/>
    
      <category term="es6" scheme="//blog.fenghou.site/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Weex</title>
    <link href="//blog.fenghou.site/2017/02/21/2017-02-21-Weex/"/>
    <id>//blog.fenghou.site/2017/02/21/2017-02-21-Weex/</id>
    <published>2017-02-21T11:17:14.000Z</published>
    <updated>2017-10-31T09:48:34.651Z</updated>
    
    <content type="html"><![CDATA[<p>整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="weex" scheme="//blog.fenghou.site/tags/weex/"/>
    
  </entry>
  
  <entry>
    <title>Rax</title>
    <link href="//blog.fenghou.site/2017/02/17/2017-02-17-Rax/"/>
    <id>//blog.fenghou.site/2017/02/17/2017-02-17-Rax/</id>
    <published>2017-02-17T11:16:59.000Z</published>
    <updated>2017-10-31T09:48:23.308Z</updated>
    
    <content type="html"><![CDATA[<p>整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="rax" scheme="//blog.fenghou.site/tags/rax/"/>
    
  </entry>
  
  <entry>
    <title>PReact</title>
    <link href="//blog.fenghou.site/2017/02/13/2017-02-13-PReact/"/>
    <id>//blog.fenghou.site/2017/02/13/2017-02-13-PReact/</id>
    <published>2017-02-13T11:16:39.000Z</published>
    <updated>2017-10-31T09:48:23.290Z</updated>
    
    <content type="html"><![CDATA[<p>React相关-整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React相关-整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="PReact" scheme="//blog.fenghou.site/tags/PReact/"/>
    
  </entry>
  
  <entry>
    <title>wx签名出错-URL</title>
    <link href="//blog.fenghou.site/2017/02/13/2017-02-13-wx%E7%AD%BE%E5%90%8D%E5%87%BA%E9%94%99-URL/"/>
    <id>//blog.fenghou.site/2017/02/13/2017-02-13-wx签名出错-URL/</id>
    <published>2017-02-13T11:16:16.000Z</published>
    <updated>2017-03-15T11:26:35.691Z</updated>
    
    <content type="html"><![CDATA[<p>上周调试wx收货地址的时候<br>碰到一个签名出错的问题<br>invalid signature<br><a id="more"></a></p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>为了增强用户体验<br>在下单页选择收货地址的时候<br>如果是微信用户<br>新增添加微信地址的功能</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>调用wxAPI获取地址信息<br>转换地址信息格式<br>将新地址保存</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>wx.openAddress方法中<br>cancel回调是取消选项</p>
<p>wx地址选择中北京天津等自治区<br>新增县选项<br>北京市 北京市 朝阳区<br>北京市 县 密云县</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>因为方便测试<br>打开页面的方式都是通过<br>打开指定连接的形式<br><a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a><br>一切OK<br>但是从商品详情页进入<br>在选择SKU下单的时候<br>wx.openAddress会调用不了<br>也就是 直接打开 <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a> 正常<br>先进商品详情页 ==&gt; <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a> 异常<br>invalid signature</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>直接打开链接<br>wx浏览器会对url连接进行转码(encode)<br>wx浏览器内部连接跳转<br>不会对url进行转码处理</p>
<p>wx验证签名信息的时候<br>会将当前页面的链接进行转码处理(encode)</p>
<p>所以<br>直接打开 <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060</a>] = 1<br>wx的验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1</a><br>服务端验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1</a></p>
<p>间接打开的 <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a><br>wx的验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap%5Bq90060%5D=1</a><br>服务端验证的URL = <a href="http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1" target="_blank" rel="external">http://www.xiangqu.com/order/submit/view?skuMap[q90060]=1</a></p>
<p>解决方法很简单<br>在跳转的时候<br>js先对链接进行转码</p>
<h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p>在处理url编码问题的时候<br>最好的方法就是Javascript先对URL进行编码<br>不通过浏览器编码<br>保证输出结果和服务器得到数据的一致</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周调试wx收货地址的时候&lt;br&gt;碰到一个签名出错的问题&lt;br&gt;invalid signature&lt;br&gt;
    
    </summary>
    
    
      <category term="wx" scheme="//blog.fenghou.site/tags/wx/"/>
    
  </entry>
  
  <entry>
    <title>react-redux</title>
    <link href="//blog.fenghou.site/2017/02/05/2017-02-05-react-redux/"/>
    <id>//blog.fenghou.site/2017/02/05/2017-02-05-react-redux/</id>
    <published>2017-02-05T11:15:42.000Z</published>
    <updated>2017-10-31T09:48:23.299Z</updated>
    
    <content type="html"><![CDATA[<p>React相关-整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React相关-整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="//blog.fenghou.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-flux</title>
    <link href="//blog.fenghou.site/2017/02/04/2017-02-04-react-flux/"/>
    <id>//blog.fenghou.site/2017/02/04/2017-02-04-react-flux/</id>
    <published>2017-02-04T11:15:20.000Z</published>
    <updated>2017-10-31T09:48:23.272Z</updated>
    
    <content type="html"><![CDATA[<p>React相关-整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React相关-整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="//blog.fenghou.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-immutable</title>
    <link href="//blog.fenghou.site/2017/02/03/2017-02-03-react-immutable/"/>
    <id>//blog.fenghou.site/2017/02/03/2017-02-03-react-immutable/</id>
    <published>2017-02-03T11:14:58.000Z</published>
    <updated>2017-10-31T09:47:54.639Z</updated>
    
    <content type="html"><![CDATA[<p>React相关-整理中<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React相关-整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="//blog.fenghou.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--毛笔字书法</title>
    <link href="//blog.fenghou.site/2017/01/21/2017-01-21-Canvas%E6%AF%9B%E7%AC%94%E5%AD%97%E4%B9%A6%E6%B3%95/"/>
    <id>//blog.fenghou.site/2017/01/21/2017-01-21-Canvas毛笔字书法/</id>
    <published>2017-01-21T11:14:18.000Z</published>
    <updated>2017-03-15T11:31:18.251Z</updated>
    
    <content type="html"><![CDATA[<p>继续Canvas<br>这次记录移动端手写书法的实现<br><a id="more"></a></p>
<h3 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h3><p>canvas在移动端应用书法<br>需要解决两个问题<br>1.笔锋问题<br>2.连贯问题</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先分析一下<br>毛笔字是有笔锋的<br>又粗有细有勾有钩<br>通过点击时间长短决定画笔大小<br>来模拟毛笔力度</p>
<p>通过touchmove事件获取连续移动的两个点<br>计算两点间的直线距离<br>通过循环在canvas画图</p>
<h3 id="代码上"><a href="#代码上" class="headerlink" title="代码上"></a>代码上</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> domCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#Calligraphy'</span>),</div><div class="line">        context = domCanvas.getContext(<span class="string">'2d'</span>),</div><div class="line">        CONFIG = &#123;</div><div class="line">            <span class="attr">lineMin</span>:<span class="number">8</span>,</div><div class="line">            <span class="attr">lineMax</span>:<span class="number">20</span>,</div><div class="line">            <span class="attr">radius</span>:<span class="number">0</span></div><div class="line">        &#125;;</div><div class="line">    <span class="keyword">let</span> Calligraphy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.touchFlog = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.hasEvent = [];  <span class="comment">//move数组</span></div><div class="line">        <span class="keyword">this</span>.upEvent = <span class="literal">null</span>; <span class="comment">//当前操作</span></div><div class="line">        <span class="keyword">this</span>.limitDis = <span class="number">80</span>; <span class="comment">//移动最少距离</span></div><div class="line">        <span class="keyword">this</span>.radius = CONFIG.radius;</div><div class="line">        <span class="keyword">this</span>.lineMin = CONFIG.lineMin;</div><div class="line">        <span class="keyword">this</span>.lineMax = CONFIG.lineMax;</div><div class="line">    &#125;</div><div class="line">    Calligraphy.prototype = &#123;</div><div class="line">        <span class="attr">start</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//开始执行监听事件</span></div><div class="line">            <span class="keyword">this</span>.bindEventDown = <span class="keyword">this</span>.eventDown.bind(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">this</span>.bindEventMove = <span class="keyword">this</span>.eventMove.bind(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">this</span>.bindEventUp= <span class="keyword">this</span>.eventUp.bind(<span class="keyword">this</span>);</div><div class="line">            domCanvas.addEventListener(<span class="string">'touchstart'</span>,<span class="keyword">this</span>.eventDown)</div><div class="line">            domCanvas.addEventListener(<span class="string">'touchmove'</span>,<span class="keyword">this</span>.bindEventMove)</div><div class="line">            domCanvas.addEventListener(<span class="string">'touchend'</span>,<span class="keyword">this</span>.bindEventUp)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eventDown</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Down'</span>)</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="keyword">let</span> target = e.changedTouches[e.changedTouches.length<span class="number">-1</span>];</div><div class="line">            <span class="keyword">this</span>.touchFlog = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">this</span>.hasEvent = [];  <span class="comment">//</span></div><div class="line">            <span class="keyword">this</span>.upEvent = <span class="keyword">this</span>.getPoint(target); <span class="comment">//当前操作</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eventMove</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Move'</span>);</div><div class="line">            <span class="keyword">let</span> target = e.changedTouches[e.changedTouches.length<span class="number">-1</span>];</div><div class="line">            <span class="keyword">this</span>.drawFont(<span class="keyword">this</span>.getPoint(target))</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eventUp</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Up'</span>);</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="keyword">this</span>.moveFlog = <span class="literal">false</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">drawFont</span>:<span class="function"><span class="keyword">function</span>(<span class="params">point</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.touchFlog)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">let</span> moEvent = point,</div><div class="line">                upEvent = <span class="keyword">this</span>.upEvent,</div><div class="line">                upRadius = <span class="keyword">this</span>.radius,</div><div class="line">                dis = <span class="number">0</span>, <span class="comment">//连续点距离</span></div><div class="line">                time = <span class="number">0</span>; <span class="comment">//时间</span></div><div class="line">            <span class="keyword">this</span>.hasEvent.unshift(&#123;<span class="attr">time</span>:<span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),<span class="attr">dis</span>:<span class="keyword">this</span>.getDistance(upEvent,moEvent)&#125;);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; <span class="keyword">this</span>.hasEvent.length<span class="number">-1</span>; n++) &#123;</div><div class="line">                dis += <span class="keyword">this</span>.hasEvent[n].dis;</div><div class="line">                time += <span class="keyword">this</span>.hasEvent[n].time-<span class="keyword">this</span>.hasEvent[n+<span class="number">1</span>].time;</div><div class="line">                <span class="keyword">if</span> (dis&gt;<span class="keyword">this</span>.limitDis)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">let</span> radius = <span class="built_in">Math</span>.min(time/dis+<span class="keyword">this</span>.lineMin,<span class="keyword">this</span>.lineMax)/<span class="number">2</span>; <span class="comment">//计算这次画笔半径</span></div><div class="line">            <span class="keyword">this</span>.radius = radius;</div><div class="line">            <span class="keyword">this</span>.upEvent = moEvent;</div><div class="line">            <span class="keyword">let</span> len = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.hasEvent[<span class="number">0</span>].dis/<span class="number">2</span>)+<span class="number">1</span>;</div><div class="line">            <span class="comment">//跟上次画笔半径渐变</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">                <span class="keyword">let</span> x = upEvent.x + (moEvent.x-upEvent.x)/len* i,</div><div class="line">                    y = upEvent.y + (moEvent.y-upEvent.y)/len* i,</div><div class="line">                    r = upRadius + (radius-upRadius)/len*i;</div><div class="line">                context.beginPath();</div><div class="line">                context.arc(x,y,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">true</span>);</div><div class="line">                context.fill();</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">getPoint</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">x</span>: e.clientX - domCanvas.offsetLeft + (<span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft),</div><div class="line">                <span class="attr">y</span>: e.clientY - domCanvas.offsetTop + (<span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollTop),</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">getDistance</span>: <span class="function"><span class="keyword">function</span>(<span class="params">pre,next</span>)</span>&#123;</div><div class="line">            <span class="keyword">let</span> x = next.x - pre.x,</div><div class="line">                y = next.y - pre.y;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(x*x + y*y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> calligrapgy = <span class="keyword">new</span> Calligraphy();</div><div class="line">    calligrapgy.start();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续Canvas&lt;br&gt;这次记录移动端手写书法的实现&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="//blog.fenghou.site/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--黑凤梨</title>
    <link href="//blog.fenghou.site/2017/01/20/2017-01-20-Canvas%E9%BB%91%E5%87%A4%E6%A2%A8/"/>
    <id>//blog.fenghou.site/2017/01/20/2017-01-20-Canvas黑凤梨/</id>
    <published>2017-01-20T11:13:46.000Z</published>
    <updated>2017-03-15T11:34:33.356Z</updated>
    
    <content type="html"><![CDATA[<p>之前很火的黑凤梨生成性格图片<br>相信大家印象深刻<br>短时间拉了大量粉丝，同时自个儿也被微信封了<br><a id="more"></a><br>我们公司当时也做了一个类似的活动<br>想去治病！</p>
<h3 id="活动流程"><a href="#活动流程" class="headerlink" title="活动流程"></a>活动流程</h3><p><img src="http://xqproduct.xiangqu.com/FqDKF5UELtMrxWcGd33YSKEVM3Xq?imageView2/2/w/250/q/90/format/jpg/1352x1580/" alt="黑凤梨"><br>通过输入生日年月，确定星座<br>每个新座对应几个不同的病症<br>每个病症对应几段不同的文案和商品<br>诊断结果可以分享</p>
<h3 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h3><p>前端通过canvas实现结果图片<br>通过toDataURL转成Image<br>用微信浏览器自带保存图片功能</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>设计师希望采用第三方字体<br>那显然在前端实现这有点坑用户流量<br>中文不是就26个字母<br>常用词汇加起来2500 大概7M左右<br>这还是一种字体<br>要实现设计稿要求<br>至少需要三种字体</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将字体资源放到服务器<br>有服务端实现生成图片<br>前端上传生成格式和内容</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>在代码实现上前端没有什么大问题<br>主要是数据格式的规定上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> XZ = &#123;</div><div class="line">    <span class="string">'1'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">19</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'MJ'</span>,<span class="string">'SP'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'2'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">18</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SP'</span>,<span class="string">'SY'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'3'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">20</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SY'</span>,<span class="string">'BY'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'4'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">19</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'BY'</span>,<span class="string">'JN'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'5'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">20</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'JN'</span>,<span class="string">'SdZ'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'6'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">21</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SdZ'</span>,<span class="string">'JX'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'7'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'JX'</span>,<span class="string">'SlZ'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'8'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SlZ'</span>,<span class="string">'CN'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'9'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'CN'</span>,<span class="string">'TC'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'10'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">23</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'TC'</span>,<span class="string">'TX'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'11'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">22</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'TX'</span>,<span class="string">'SS'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'12'</span>:&#123;</div><div class="line">        <span class="attr">division</span>:<span class="number">21</span>,</div><div class="line">        <span class="attr">items</span>:[<span class="string">'SS'</span>,<span class="string">'MJ'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//星座的判别</span></div><div class="line"><span class="keyword">let</span> oXz = XZ[domInputMonth];</div><div class="line">    sXz = domInputDate &lt;= oXz.division ? oXz.item[<span class="number">0</span>] : oXz.item[<span class="number">1</span>];</div><div class="line"><span class="comment">//病症描述的格式规定</span></div><div class="line">[<span class="string">'$+@70@&amp;方正兰亭特黑简体&amp;**+$$+@50@&amp;方正兰亭特黑简体&amp;想发个朋友圈+$'</span>,<span class="string">'结果..$+@50@&amp;方正兰亭特黑简体&amp;俩小时+$过去了...'</span>,<span class="string">'还在$+@110@&amp;方正兰亭特黑简体&amp;选照片+$'</span>]</div><div class="line">文案分行采取数组形式</div><div class="line">$+ +$ 包含有特殊字体文本</div><div class="line">&amp; &amp;   特殊字体</div><div class="line">@ @   字号</div><div class="line">**    替换文案(姓名)</div><div class="line"><span class="comment">//生成文案在显示位置</span></div><div class="line">通过本地Canvas模拟生成的图片</div><div class="line">(字体用系统字体代替)</div><div class="line">context.ctx.font = nSize+<span class="string">'px arial'</span>;</div><div class="line">context.measureText(sContext).width 来获取长度</div><div class="line">通过指定宽度容器的比较获取x,y坐标</div><div class="line"><span class="comment">//小技巧</span></div><div class="line"><span class="comment">//数组的随机</span></div><div class="line"><span class="built_in">Array</span>.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">            <span class="keyword">let</span> len = <span class="keyword">this</span>.length,num = n ? <span class="built_in">Math</span>.min(n,len) : len,index,</div><div class="line">                arr = <span class="keyword">this</span>.slice(<span class="number">0</span>),temp,</div><div class="line">                lib = &#123;&#125;;</div><div class="line">            lib.range = <span class="function"><span class="keyword">function</span>(<span class="params">min,max</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> min + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>))</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">                index = lib.range(i,len<span class="number">-1</span>);</div><div class="line">                temp = arr[i];</div><div class="line">                arr[i] = arr[index];</div><div class="line">                arr[index] = temp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> arr.slice(<span class="number">0</span>,num);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//两个数组的合并</span></div><div class="line">[a].concat([b])  返回结果新数组</div><div class="line">[].push.apply([a],[b]);返回结果[a]</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然好像跟canvas关系不大<br>但是，好像也没有但是。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前很火的黑凤梨生成性格图片&lt;br&gt;相信大家印象深刻&lt;br&gt;短时间拉了大量粉丝，同时自个儿也被微信封了&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="//blog.fenghou.site/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--星空</title>
    <link href="//blog.fenghou.site/2017/01/19/2017-01-19-Canvas%E6%98%9F%E7%A9%BA/"/>
    <id>//blog.fenghou.site/2017/01/19/2017-01-19-Canvas星空/</id>
    <published>2017-01-19T11:13:18.000Z</published>
    <updated>2017-03-15T11:36:26.420Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas 星空效果<br>嗯 是的 就是左上方的星空效果<br><a id="more"></a></p>
<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>其实星空在实现上很简单<br>一个星星就是一个星星对象实例<br>有属性x坐标，y坐标，半径，移动速度和透明度<br>有方法生成坐标，绘制星星</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 配置选项</div><div class="line">        * width:画布宽</div><div class="line">        * height:画布高</div><div class="line">        * splitHeight:星星密集分割</div><div class="line">        * stars:星星数量</div><div class="line">        * maxStar:星星最大半径</div><div class="line">        * minStar:星星最小半径</div><div class="line">        * maxSpeed:星星最大移动速度</div><div class="line">        * minSpeed:星星最小移动速度</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> SkySetting = &#123;</div><div class="line">                <span class="attr">width</span>:<span class="number">800</span>,</div><div class="line">                <span class="attr">height</span>:<span class="number">300</span>,</div><div class="line">                <span class="attr">splitHeight</span>:<span class="number">200</span>,</div><div class="line">                <span class="attr">stars</span>:<span class="number">400</span>,</div><div class="line">                <span class="attr">maxStar</span>:<span class="number">1.2</span>,</div><div class="line">                <span class="attr">minStar</span>:<span class="number">0.6</span>,</div><div class="line">                <span class="attr">maxSpeed</span>:<span class="number">0.1</span>,</div><div class="line">                <span class="attr">minSpeed</span>:<span class="number">0.02</span>,</div><div class="line">        &#125;,</div><div class="line">            domCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#Star'</span>),</div><div class="line">            context = domCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 画布实例</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> starSky = <span class="function"><span class="keyword">function</span>(<span class="params">width,height,stars</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.width = width;</div><div class="line">            <span class="keyword">this</span>.height = height;</div><div class="line">            <span class="keyword">this</span>.stars = stars;</div><div class="line">            <span class="keyword">this</span>.aStars = [];</div><div class="line">        &#125;</div><div class="line">        starSky.prototype = &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 入口</div><div class="line">            * */</div><div class="line">            start:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                domCanvas.width = <span class="keyword">this</span>.width;</div><div class="line">                domCanvas.height = <span class="keyword">this</span>.height;</div><div class="line">                context.fillStyle = <span class="string">'rgba(0,0,0,1)'</span>;</div><div class="line">                context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                <span class="keyword">this</span>.render();</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 重绘</div><div class="line">            * */</div><div class="line">            redraw:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                context.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                context.fillStyle = <span class="string">'rgba(0,0,0,1)'</span>;</div><div class="line">                context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 新建星星实例</div><div class="line">            * 绘制星星</div><div class="line">            * window.requestAnimationFrame 动画函数</div><div class="line">            * */</div><div class="line">            render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.redraw();</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.aStars.length &lt;= <span class="keyword">this</span>.stars)&#123;</div><div class="line">                    <span class="keyword">let</span> star = <span class="keyword">new</span> Star();</div><div class="line">                    <span class="keyword">this</span>.aStars.push(star);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.aStars.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">star</span>)</span>&#123;</div><div class="line">                    star.draw();</div><div class="line">                &#125;)</div><div class="line">                <span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.render();</div><div class="line">                &#125;);</div><div class="line">            &#125;,</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 星星构造器</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> Star = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.randomPoint();</div><div class="line">        &#125;</div><div class="line">        Star.prototype = &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 随机星星数据</div><div class="line">            * */</div><div class="line">            randomPoint:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">let</span> _x = <span class="built_in">Math</span>.random()*SkySetting.width,</div><div class="line">                    _r = SkySetting.minStar + <span class="built_in">Math</span>.random()*(SkySetting.maxStar - SkySetting.minStar),</div><div class="line">                    _ran = <span class="built_in">Math</span>.random()*<span class="number">10</span>,</div><div class="line">                    _rx = <span class="built_in">Math</span>.random()*(SkySetting.maxSpeed-SkySetting.minSpeed) + SkySetting.minSpeed,</div><div class="line">                    _y = _ran &gt; <span class="number">2</span> ? <span class="built_in">Math</span>.random()*SkySetting.splitHeight: <span class="built_in">Math</span>.random()*SkySetting.height,</div><div class="line">                    _alphaMax = <span class="built_in">Math</span>.random()*<span class="number">0.8</span> + <span class="number">0.2</span>,</div><div class="line">                    _alphaMin = <span class="number">0.2</span>,</div><div class="line">                    _alpha = <span class="number">0</span>;</div><div class="line">                <span class="keyword">this</span>.x = _x;</div><div class="line">                <span class="keyword">this</span>.y = _y;</div><div class="line">                <span class="keyword">this</span>.r = _r;</div><div class="line">                <span class="keyword">this</span>.rx = _rx;</div><div class="line">                <span class="keyword">this</span>.alpha = _alpha;</div><div class="line">                <span class="keyword">this</span>.alphaMax = _alphaMax;</div><div class="line">                <span class="keyword">this</span>.alphaMin = _alphaMin;</div><div class="line">                <span class="keyword">this</span>.alphaAction = <span class="literal">true</span>;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 绘制星星</div><div class="line">            * 星星变化</div><div class="line">            * */</div><div class="line">            draw:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.x += <span class="keyword">this</span>.rx;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.x + <span class="keyword">this</span>.r &gt;= SkySetting.width)&#123;</div><div class="line">                    <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.alphaAction)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.alpha &lt; <span class="keyword">this</span>.alphaMax)&#123;</div><div class="line">                        <span class="keyword">this</span>.alpha += <span class="number">0.05</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.alphaAction = <span class="literal">false</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.alphaAction)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.alpha &gt; <span class="keyword">this</span>.alphaMin)&#123;</div><div class="line">                        <span class="keyword">this</span>.alpha -= <span class="number">0.02</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.alphaAction = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                context.beginPath();</div><div class="line">                context.fillStyle = <span class="string">'rgba(255,255,255,'</span>+<span class="keyword">this</span>.alpha.toString()+<span class="string">')'</span>;</div><div class="line">                context.arc(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y,<span class="keyword">this</span>.r,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</div><div class="line">                context.closePath();</div><div class="line">                context.fill();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 构造星空实例</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> sky = <span class="keyword">new</span> starSky(SkySetting.width,SkySetting.height,SkySetting.stars);</div><div class="line">        sky.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Canvas 星空效果&lt;br&gt;嗯 是的 就是左上方的星空效果&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="//blog.fenghou.site/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas--刮刮卡</title>
    <link href="//blog.fenghou.site/2017/01/18/2017-01-18-Canvas%E5%88%AE%E5%88%AE%E5%8D%A1/"/>
    <id>//blog.fenghou.site/2017/01/18/2017-01-18-Canvas刮刮卡/</id>
    <published>2017-01-18T11:12:27.000Z</published>
    <updated>2017-03-15T11:38:58.172Z</updated>
    
    <content type="html"><![CDATA[<p>到年底了，去回顾了下做过的项目<br>发现有很多跟Canvas有关的<br>这里简单记录一点心得<br>方便日后查阅<br><a id="more"></a></p>
<h2 id="一个模拟刮奖的活动"><a href="#一个模拟刮奖的活动" class="headerlink" title="一个模拟刮奖的活动"></a>一个模拟刮奖的活动</h2><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>获奖结果上实现一个遮层<br>手指滑动位置遮层对应位置色值清空<br>判断清空数据达到设定值，清除遮层</p>
<h3 id="必备API"><a href="#必备API" class="headerlink" title="必备API"></a>必备API</h3><p>getContext()<br>getImageData() //获取画布像素数据 每个像素包含RGBA四个值<br>fill() //填充<br>rect() //矩形<br>arc() //圆<br>globalCompositeOperation //设置或返回如何将一个源（新的）图像绘制到目标（已有）的图像上</p>
<h3 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h3><p>touchstart<br>touchmove<br>touchend<br>changedTouches:touchlist。<br>对于 touchstart 事件, 这个 TouchList 对象列出在此次事件中新增加的触点<br>对于 touchmove 事件，列出和上一次事件相比较，发生了变化的触点<br>对于 touchend ，列出离开触摸平面的触点（这些触点对应已经不接触触摸平面的手指）</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="keyword">let</span> domCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#GGL'</span>),</div><div class="line">            context = domCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*</span></div><div class="line">        * 构建对象</div><div class="line">        * width</div><div class="line">        * height</div><div class="line">        * filter 取消遮罩百分比</div><div class="line">        * */</div><div class="line">        <span class="keyword">let</span> clipImage = <span class="function"><span class="keyword">function</span>(<span class="params">height,width,filter</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.width = width;</div><div class="line">            <span class="keyword">this</span>.height = height;</div><div class="line">            <span class="keyword">this</span>.filter = filter;</div><div class="line">            domCanvas.width = <span class="keyword">this</span>.width;</div><div class="line">            domCanvas.height = <span class="keyword">this</span>.height;</div><div class="line">        &#125;</div><div class="line">        clipImage.prototype = &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 函数入口</div><div class="line">            * 开始监听事件</div><div class="line">            * */</div><div class="line">            start:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                context.fillStyle = <span class="string">'gray'</span>;</div><div class="line">                context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                context.globalCompositeOperation = <span class="string">'destination-out'</span>;</div><div class="line">                <span class="keyword">this</span>.bindEventMove = <span class="keyword">this</span>.eventMove.bind(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">this</span>.bindEventUp= <span class="keyword">this</span>.eventUp.bind(<span class="keyword">this</span>);</div><div class="line">                domCanvas.addEventListener(<span class="string">'touchstart'</span>,<span class="keyword">this</span>.eventDown)</div><div class="line">                domCanvas.addEventListener(<span class="string">'touchmove'</span>,<span class="keyword">this</span>.bindEventMove)</div><div class="line">                domCanvas.addEventListener(<span class="string">'touchend'</span>,<span class="keyword">this</span>.bindEventUp)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">eventDown</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Down'</span>)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">eventMove</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Move'</span>);</div><div class="line">                <span class="keyword">let</span> target = e.changedTouches[e.changedTouches.length<span class="number">-1</span>];</div><div class="line">                <span class="keyword">this</span>.clearMove(target)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">eventUp</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Up'</span>);</div><div class="line">                <span class="keyword">this</span>.clearMask();</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 清除划过画布</div><div class="line">            * */</div><div class="line">            clearMove:<span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">                <span class="keyword">let</span> nX = target.clientX,</div><div class="line">                    nY = target.clientY;</div><div class="line">                context.beginPath();</div><div class="line">                context.arc(nX,nY,<span class="number">15</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">                context.fill();</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 判断像素点清除数是否到达指定百分比</div><div class="line">            * */</div><div class="line">            clearMask:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">let</span> nNum = <span class="number">0</span>,</div><div class="line">                    aImageData = context.getImageData(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height).data,</div><div class="line">                    nLength = aImageData.length;</div><div class="line">                aImageData.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(item == <span class="number">0</span>)&#123;</div><div class="line">                        nNum++;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="keyword">if</span>(nNum &gt;= nLength * <span class="keyword">this</span>.filter)&#123;</div><div class="line">                    <span class="keyword">this</span>.finish();</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * 完成刮奖</div><div class="line">            * */</div><div class="line">            finish:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                context.beginPath();</div><div class="line">                context.rect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</div><div class="line">                context.fill();</div><div class="line">                domCanvas.removeEventListener(<span class="string">'touchstart'</span>,<span class="keyword">this</span>.eventDown);</div><div class="line">                domCanvas.removeEventListener(<span class="string">'touchmove'</span>,<span class="keyword">this</span>.bindEventMove);</div><div class="line">                domCanvas.removeEventListener(<span class="string">'touchend'</span>,<span class="keyword">this</span>.bindEventUp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> clip = <span class="keyword">new</span> clipImage(<span class="number">400</span>,<span class="number">400</span>,<span class="number">.3</span>);</div><div class="line">        clip.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到年底了，去回顾了下做过的项目&lt;br&gt;发现有很多跟Canvas有关的&lt;br&gt;这里简单记录一点心得&lt;br&gt;方便日后查阅&lt;br&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="//blog.fenghou.site/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>谈谈js的继承</title>
    <link href="//blog.fenghou.site/2017/01/03/2017-01-03-%E8%B0%88%E8%B0%88js%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>//blog.fenghou.site/2017/01/03/2017-01-03-谈谈js的继承/</id>
    <published>2017-01-03T11:11:44.000Z</published>
    <updated>2017-03-15T11:44:30.709Z</updated>
    
    <content type="html"><![CDATA[<p>继承在JavaScript中不像在别的面向对象语言中那样简单<br>JavaScript使用的是基于对象的继承<br>它可以用来模仿基于类的继承<br><a id="more"></a><br>Es6中，新增了Class和extends关键字来支持类的继承<br>在这里记录各种继承的实现方式</p>
<h3 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h3><p>JavaScript对象可以模仿Java中的对象<br>通过函数来声明类<br>用关键字new来创建实例<br>这种方式包括两个步骤<br>1.用一个类的声明定义对象的结构<br>2.实例化该类创建一个新对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类的实例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sName);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Person(<span class="string">'Ls'</span>);</div><div class="line">Ls.sayName();</div></pre></td></tr></table></figure></p>
<p>这种类式继承的方式可以分为五种<br>对象冒充，Call，Apply，原型链和混合模式</p>
<h3 id="对象冒充"><a href="#对象冒充" class="headerlink" title="对象冒充"></a>对象冒充</h3><p>构造函数使用 this 关键字给所有属性和方法赋值<br>因为构造函数只是一个函数<br>所以可使Person构造函数成为Author的方法，然后调用它<br>Author就会收到Person的构造函数中定义的属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.book = book;</div><div class="line">        <span class="keyword">this</span>.Person = Person;</div><div class="line">        <span class="keyword">this</span>.Person(name);</div><div class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.Person;</div><div class="line">        <span class="keyword">this</span>.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.book)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure></p>
<h3 id="apply-amp-amp-call继承"><a href="#apply-amp-amp-call继承" class="headerlink" title="apply&amp;&amp;call继承"></a>apply&amp;&amp;call继承</h3><p>call和apply方法通过改变函数上下文实现继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.book = book;</div><div class="line">        Person.call(<span class="keyword">this</span>,name);</div><div class="line">        Person.apply(<span class="keyword">this</span>,[name]);</div><div class="line">        <span class="keyword">this</span>.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.book)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">    Ls.sayName();</div><div class="line">    Ls.sayBook();</div></pre></td></tr></table></figure></p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>使子类原型对象指向父类的实例以实现继承,即重写类的原型对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype.sName = <span class="string">''</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sName);</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">book</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.book = book;</div><div class="line">&#125;</div><div class="line">Author.prototype = <span class="keyword">new</span> Person();</div><div class="line">Author.prototype.sayBook= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'My book'</span>);</div><div class="line">Ls.sName = <span class="string">'Ls'</span>;</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure></p>
<p>这种模式无法使用带参数的构造函数，不支持多重继承</p>
<h3 id="混合模式继承"><a href="#混合模式继承" class="headerlink" title="混合模式继承"></a>混合模式继承</h3><p>用对象冒充继承构造函数的属性，用原型链继承 prototype 对象的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name);</div><div class="line">    <span class="keyword">this</span>.book = book;</div><div class="line">&#125;</div><div class="line">Author.prototype = <span class="keyword">new</span> Person();</div><div class="line">Author.prototype.constructor = Author;</div><div class="line">Author.prototype.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure></p>
<p>为了简化类的声明，可以把派生子类的整个过程包装在一个名为extend的函数中<br>空函数F，这样可以避免创建Person的新实例,因为它可能会比较庞大<br>增加superclass这个属性弱化Author与Person之间的耦合<br>并且确保constructor属性被正确设置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">subClass.superClass</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    F.prototype = superClass.prototype;</div><div class="line">    subClass.prototype = <span class="keyword">new</span> F();</div><div class="line">    subClass.prototype.constructor = subClass;</div><div class="line">    subClass.superclass = superClass.prototype;</div><div class="line">    <span class="keyword">if</span>(subClass.prototype.constructor == <span class="built_in">Object</span>.prototype.constructor)&#123;</div><div class="line">        subClass.prototype.constructor = subClass;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">    Author.superclass.constructor.call(<span class="keyword">this</span>,name);</div><div class="line">    <span class="keyword">this</span>.book = book;</div><div class="line">&#125;</div><div class="line">extend(Author,Person)</div><div class="line">Author.prototype.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div></pre></td></tr></table></figure></p>
<p>JavaScript中的类式继承仅仅是对正正基于类的继承的一种模仿</p>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>原型式继承与类式继承截然不同<br>它并不需要用类来定义对象结构，只需要创建一个对象<br>这个对象可以被新的对象重用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'default name'</span>,</div><div class="line">    <span class="attr">sayName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Author = clone(Person);</div><div class="line">Author.book = <span class="string">'default book'</span>;</div><div class="line">Author.sayBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = clone(Author);</div><div class="line">Ls.name = <span class="string">'Ls'</span>;</div><div class="line">Ls.book = <span class="string">'My Book'</span>;</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div><div class="line"><span class="comment">//clone 通过把F的prototype属性设置为作为参数obj传去的原型对象</span></div><div class="line"><span class="comment">//函数返回的结果是一个以给定对象为原型对象的空对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = obj;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Es6-extends"><a href="#Es6-extends" class="headerlink" title="Es6 extends"></a>Es6 extends</h3><p>Es6中引入了Class 和extends关键字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name)&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">        sayName()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name,book)&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">            <span class="keyword">this</span>.book = book;</div><div class="line">        &#125;</div><div class="line">        sayBook()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.book);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Ls = <span class="keyword">new</span> Author(<span class="string">'Ls'</span>,<span class="string">'My Book'</span>);</div><div class="line">Ls.sayName();</div><div class="line">Ls.sayBook();</div><div class="line">Ls.__proto__ === Author.prototype; <span class="comment">//true</span></div><div class="line">Author.prototype.__proto__ === Person.prototype; <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继承在JavaScript中不像在别的面向对象语言中那样简单&lt;br&gt;JavaScript使用的是基于对象的继承&lt;br&gt;它可以用来模仿基于类的继承&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解Js中的作用域和上下文</title>
    <link href="//blog.fenghou.site/2016/12/30/2016-12-30-%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Js%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>//blog.fenghou.site/2016/12/30/2016-12-30-彻底理解Js中的作用域和上下文/</id>
    <published>2016-12-30T11:11:06.000Z</published>
    <updated>2017-11-02T07:37:48.773Z</updated>
    
    <content type="html"><![CDATA[<p>笔记 - 总结 - 心得<br>函数的每次调用都有与之紧密相关的作用域和上下文<br>这俩者是完全不同的<br>作用域(Scope) 是基于函数的<br>作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的<br>而上下文(Context)是基于对象的<br>上下文始终是this关键字的值，它是拥有(控制)当前所执行代码的对象的引用。<br><a id="more"></a></p>
<h3 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h3><p>首先只有函数具有作用域<br>也就是说，在一个函数内部声明的变量在函数外部无法访问<br>JavaScript的作用域是词法性质的<br>这这意味着函数运行在定义它的作用域中<br>而不是在调用它的作用域中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        a *= <span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> baz = foo();</div><div class="line">baz(); <span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<p>Es6之前 局部变量只能存在于函数体中<br>Es6开始支持let声明变量 局部变量能存在于块级作用域<br>通过var声明的变量会出现变量提升的问题</p>
<blockquote>
<p>变量的 声明周期<br>  声明阶段(Declaration phase)<br>  初始化阶段(Initialization phase)<br>  初始化阶段：variable = undefined<br>  赋值阶段(Assignment phase)<br>  赋值阶段后：variable = ‘value’</p>
</blockquote>
<p>var<br>变量在函数作用域的开始位置就完成了声明阶段(variable)和初始化阶段(var variable)，这两个阶段之间没有任何间隙<br>let<br>变量通过声明阶段(foo)后，会进去暂时性死区，此时变量不可访问，直到初始化阶段(let foo)之后，变量才可以被访问<br>所以变量提升是变量的耦合声明并且在作用域的顶部完成初始化<br>然而let生命周期中将声明和初始化阶段解耦。这一解耦使 let 的变量提升现象消失。</p>
<h3 id="上下文-Context"><a href="#上下文-Context" class="headerlink" title="上下文(Context)"></a>上下文(Context)</h3><p>上下文通常取决于函数是如何被调用的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当一个函数作为对象中的一个方法被调用的时候,this就设置为调用该方法的对象</span></div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">bar</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === foo)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foo.bar() <span class="comment">// true</span></div><div class="line"><span class="comment">//当使用new操作符创造对象的实例时,函数的作用域内部this的值被设置为新创建的实例</span></div><div class="line"><span class="keyword">let</span> aThis = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    aThis.push(<span class="keyword">this</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//foo&#123;x:1&#125;</span></div><div class="line">    <span class="comment">//foo&#123;x:2&#125;</span></div><div class="line">&#125;</div><div class="line">foo.prototype.baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">    <span class="comment">//1</span></div><div class="line">    <span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> foo(<span class="number">1</span>);</div><div class="line"><span class="keyword">new</span> foo(<span class="number">2</span>);</div><div class="line">aThis.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    item.baz();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="执行环境-execution-context"><a href="#执行环境-execution-context" class="headerlink" title="执行环境(execution context)"></a>执行环境(execution context)</h3><p>执行环境 定义了变量或函数有权访问的数据，决定它们各自的行为<br>Js是单线程的，当JavaScript解释器初始化执行代码时，会默认进入全局执行环境<br>此后函数的每次调用都会创建一个新的执行环境<br>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境会被推入一个环境栈中<br>在函数执行完后，栈将其环境弹出，把控制权返回给之前的执行环境。<br>ECMAScript程序中的执行流正是由这个便利的机制控制着<br>执行环境可以分为创建和执行两个阶段。<br>在创建阶段，解析器首先会创建一个变量对象（variable object，也称为活动对象 activation object），<br>它由定义在执行环境中的变量、函数声明、和参数组成。<br>在这个阶段，作用域链会被初始化， this 的值也会被最终确定。<br>在执行阶段，代码被解释执行。</p>
<h3 id="作用域链-scope-chain"><a href="#作用域链-scope-chain" class="headerlink" title="作用域链(scope chain)"></a>作用域链(scope chain)</h3><p>当代码在一个环境中执行时<br>会创建变量对象的一个作用域链<br>作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问<br>作用域链包含了在环境栈中的每个执行环境对应的变量对象<br>内部环境可以通过作用域链访问所有的外部环境<br>但是外部环境不能访问内部环境中的任何变量和函数<br>这些环境之间的联系是线性的、有次序的</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是指有权访问另一函数作用域中的变量的函数<br>在函数内定义一个嵌套的函数时，就构成了一个闭包<br>它允许嵌套函数访问外层函数的变量<br>通过返回嵌套函数，允许你维护对外部函数中局部变量、参数、和内函数声明的访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//模块模式最流行的闭包类型之一，它允许你模拟公共的、私有的、和特权成员</span></div><div class="line"><span class="keyword">let</span> Module = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> privateProperty = <span class="string">'foo'</span>;</div><div class="line">    fucntion privateMethod()&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">publicProperty</span>:<span class="string">''</span>,</div><div class="line">        <span class="attr">publicMethod</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">privilegedMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> privateMethod(<span class="built_in">arguments</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div><div class="line"><span class="comment">//另一种类型的闭包被称为 立即执行的函数表达式(IIFE) Es5中</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> foo, bar;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">private</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> Module = &#123;</div><div class="line">        <span class="attr">public</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.Module = Module;</div><div class="line">&#125;)(<span class="keyword">this</span>);</div><div class="line"><span class="comment">//保护全局命名空间免受变量污染</span></div><div class="line"><span class="keyword">var</span> baz;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> foo = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> bar = <span class="number">2</span>;</div><div class="line">    baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> foo * bar;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div><div class="line">baz(); <span class="comment">//20</span></div><div class="line"><span class="comment">//保护私用private变量</span></div></pre></td></tr></table></figure></p>
<h3 id="apply-amp-call-amp-bind"><a href="#apply-amp-call-amp-bind" class="headerlink" title="apply&amp;call&amp;bind"></a>apply&amp;call&amp;bind</h3><p>apply和call内建在所有的函数中(它们是Function对象的原型方法)<br>允许你在自定义上下文中执行函数<br>不同点在于，call函数需要参数列表，而apply 函数需要你提供一个参数数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//arguments</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    [].slice.apply(<span class="built_in">arguments</span>);</div><div class="line">    [].sort.apply(<span class="built_in">arguments</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a&gt;b;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//apply在传递参数时会将数组转变成列表集合</span></div><div class="line"><span class="comment">//在一些只能处理列表的方法中可以巧妙地处理</span></div><div class="line"><span class="comment">//求数组最大值</span></div><div class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//3</span></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>,a); <span class="comment">//3</span></div><div class="line"><span class="comment">//两个数组合并</span></div><div class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">    b = [<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="comment">//a.push(b)</span></div><div class="line"><span class="comment">//a [1,2,[3,4]];</span></div><div class="line">[].push.apply(a,b)</div><div class="line"><span class="comment">//a [1,2,3,4];</span></div></pre></td></tr></table></figure>
<p>在ES5中引入了 Function.prototype.bind 方法，<br>用于控制函数的执行上下文，它会返回一个新的函数，<br>并且这个新函数会被永久的绑定到 bind 方法的第一个参数所指定的对象上，无论该函数被如何使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//低版本浏览器，我们可以简单的对它进行实现如下(polyfill)</span></div><div class="line"><span class="keyword">if</span>(!(<span class="string">'bind'</span> <span class="keyword">in</span> <span class="built_in">Function</span>.prototype))&#123;</div><div class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> fn = <span class="keyword">this</span>,</div><div class="line">            context = <span class="built_in">arguments</span>[<span class="number">0</span>],</div><div class="line">            args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> fn.apply(context, args.concat(<span class="built_in">arguments</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Es6箭头函数"><a href="#Es6箭头函数" class="headerlink" title="Es6箭头函数"></a>Es6箭头函数</h3><p>S6中的箭头函数可以作为 Function.prototype.bind() 的替代品。<br>和普通函数不同，箭头函数没有它自己的this值，它的 this 值继承自外围作用域。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    <span class="attr">baz</span>:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">            self.baz(item);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Es5 bind</span></div><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    <span class="attr">baz</span>:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">            self.baz(item);</div><div class="line">        &#125;.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Es6箭头函数</span></div><div class="line"><span class="keyword">var</span> Obj = &#123;</div><div class="line">    <span class="attr">baz</span>:..</div><div class="line">    foo:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>].forEach(<span class="function">(<span class="params">item</span>)=&gt;</span><span class="keyword">this</span>.baz(item))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记 - 总结 - 心得&lt;br&gt;函数的每次调用都有与之紧密相关的作用域和上下文&lt;br&gt;这俩者是完全不同的&lt;br&gt;作用域(Scope) 是基于函数的&lt;br&gt;作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的&lt;br&gt;而上下文(Context)是基于对象的&lt;br&gt;上下文始终是this关键字的值，它是拥有(控制)当前所执行代码的对象的引用。&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ECMA-prototype</title>
    <link href="//blog.fenghou.site/2016/12/28/2016-12-28-ECMA-prototype/"/>
    <id>//blog.fenghou.site/2016/12/28/2016-12-28-ECMA-prototype/</id>
    <published>2016-12-28T11:09:23.000Z</published>
    <updated>2017-03-15T11:52:29.208Z</updated>
    
    <content type="html"><![CDATA[<p>要学好Js，首先必须得先理解原型(prototype)<br>why？<br>js作为面向对象的语言，实现面向对象的机制就是原型！<br><a id="more"></a><br>都说js中一切皆对象,那到底什么是对象呢？</p>
<blockquote>
<p>对象是属性的集合，并有一个原型对象。原型对象可以是空值。<br>  按宿主环境分可以分为<br>  原生对象：由ECMAScript规范定义其语义的对象<br>  内置对象：由ECMAScript实现提供，独立于宿主环境的对象，ECMAScript程序开始执行时就存在(所有内置对象是原生对象)<br>  宿主对象：由宿主环境提供的对象，用于完善ECMAScript执行环境(DOM,BOM)<br>  按功能分可以分为：<br>  普通对象：无原型对象<br>  函数对象：有原型对象(函数对象的一个实例)</p>
</blockquote>
<p>我们这里只关注函数对象<br>那么到底什么是原型呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//凡是通过new Function() 创建的对象都是函数对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="comment">//Bar foo baz 都是函数对象</span></div><div class="line"><span class="comment">//原型对象本质是函数对象的一个实例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Bar.prototype</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> Bar();</div><div class="line">Bar.prototype = temp;</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="built_in">Function</span>.prototype = temp</div><div class="line"><span class="comment">//构造器：创建和初始化对象的函数对象(在原型对象prototype中,prototype.constructor)</span></div><div class="line"><span class="comment">//原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象</span></div><div class="line"><span class="comment">//每个由构造器创建的对象拥有一个执行构造器prototype的属性值的隐式引用</span></div><div class="line"><span class="comment">//这个引用称之为原型</span></div><div class="line"><span class="comment">//每个原型可以拥有指向自己原型的隐式引用(原型的原型),就是所谓的原型链</span></div><div class="line"><span class="comment">//每个对象都有一个__proto__属性来实现对原型的隐式引用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line">person.__proto__ = Person.prototype</div><div class="line">Person.prototype.__proto__ = <span class="built_in">Object</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ = <span class="literal">null</span></div><div class="line"><span class="comment">//person对象由构造器Person创建</span></div><div class="line"><span class="comment">//所以person对Person.prototype有隐式引用(__proto__)</span></div><div class="line"><span class="comment">//Person对象又是由构造器Object创建</span></div><div class="line"><span class="comment">//所以Person对Object.prototype有隐式引用(__proto__)</span></div></pre></td></tr></table></figure>
<p><img src="/assets/blogImg/prototype.png" alt="原型"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要学好Js，首先必须得先理解原型(prototype)&lt;br&gt;why？&lt;br&gt;js作为面向对象的语言，实现面向对象的机制就是原型！&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>你真的学好Js了吗</title>
    <link href="//blog.fenghou.site/2016/12/27/2016-12-27-%E4%BD%A0%E7%9C%9F%E7%9A%84%E5%AD%A6%E5%A5%BDJs/"/>
    <id>//blog.fenghou.site/2016/12/27/2016-12-27-你真的学好Js/</id>
    <published>2016-12-27T11:08:58.000Z</published>
    <updated>2017-03-15T11:58:07.909Z</updated>
    
    <content type="html"><![CDATA[<p>在我看来前端(Js)就好比是个剑客江湖<br>江湖中有人练react宝典，有人练vue神功<br>有人锻造webpack利剑<br>…<br><a id="more"></a><br>而Js就是这些的基础心法，决定这些宝典,神功最后在你手上的杀伤力<br>那么作为最基础的心法，你真的参透的了吗？</p>
<blockquote>
<p>这里简单的记录些Js的一些特点</p>
</blockquote>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>什么是面向对象</p>
<blockquote>
<p>一切事物皆对象<br>对象具有封装和继承特性<br>对象与对象之间使用消息通信，各自存在信息隐藏</p>
</blockquote>
<p>众所周知Java采用面向对象思想构造其语言，它实现了类、继承、多态、接口等机制。<br>但是这些机制，只是实现面向对象编程的一种方式<br>实际上，Js是通过原型的方式来实现面向对象编程的<br>Js中的对象是依靠构造器(constructor)利用原型(prototype)构造出来的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象的声明</span></div><div class="line"><span class="comment">//字面式对象声明</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//使用函数构造器构造对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'Louis'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">'24'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//这里的new关键字跟java中 的new毫无关系</span></div><div class="line"><span class="comment">//只是借用了它的关键字new</span></div><div class="line"><span class="comment">//用来表示调用构造器创建对象</span></div></pre></td></tr></table></figure>
<h3 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h3><p>在Js中，定义变量不必声明其类型。但这不意味着变量没有类型。<br>原始类型：布尔型、数值型、字符串类型<br>引用类型：对象类型(数组是一种特殊的对象)、函数类型<br>其他类型：空类型和未定义类型<br>js中的变量可以根据所附的值改变类型<br>原始类型按值传送，在栈内存中存的是变量的值<br>引用类型则按引用传送，在栈内存中存的是 引用对象在堆内存中的地址<br>所以这里涉及到引用类型深拷贝和浅拷贝的问题</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//浅拷贝 把父对象的属性全部拷贝给子对象</span></div><div class="line"><span class="comment">//如果父元素的属性对应的值是引用类型，那子对象对应的属性的值还是引用类型的内存地址</span></div><div class="line"><span class="comment">//这个时候就需要深拷贝</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">pre</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ch = pre.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> pre !== <span class="string">'object'</span>)&#123;</div><div class="line">            ch = pre;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;</div><div class="line">            ch = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(pre))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> pre)&#123;</div><div class="line">                ch[i] = <span class="keyword">typeof</span> pre[i] === <span class="string">'object'</span> ?</div><div class="line">                (pre[i].constructor === <span class="built_in">Array</span> ? pre[i].slice() : deepCopy(pre[i]))</div><div class="line">                : pre[i]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数是一等对象"><a href="#函数是一等对象" class="headerlink" title="函数是一等对象"></a>函数是一等对象</h3><p>在JavaScript中，函数是一等对象<br>可以存储在变量中<br>可以作为参数传给其他函数<br>可以作为返回值从其他函数传出<br>还可以在运行时进行构造<br>可以用function(){…}这样的语法创建匿名函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> foo = <span class="number">20</span>;</div><div class="line">    <span class="keyword">var</span> bar = <span class="number">2</span>;</div><div class="line">    alert(foo*bar);</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p>这个函数在定义后便会立即执行<br>匿名函数可以用来创建闭包<br>闭包是一个受到保护的变量空间<br>由内嵌函数生成</p>
<h3 id="对象的易变性"><a href="#对象的易变性" class="headerlink" title="对象的易变性"></a>对象的易变性</h3><p>JavaScript中,一切都是对象<br>除了三种原始类型(布尔型、数值型、字符串类型)<br>即便是这几种类型在必要时候也会被自动封装成对象<br>而且所有对象都是易变的(mutable)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为函数添加属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispalyError</span>(<span class="params">message</span>)</span>&#123;</div><div class="line">    dispalyError.numTimesExecuted++;</div><div class="line">    alert(message);</div><div class="line">&#125;</div><div class="line">dispalyError.numTimesExecuted = <span class="number">0</span>;</div><div class="line"><span class="comment">//对定义的类和实例化的对象进行修改</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">getName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getAge</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> alice = <span class="keyword">new</span> Person(<span class="string">'Alice'</span>,<span class="number">39</span>);</div><div class="line"><span class="keyword">var</span> bill = <span class="keyword">new</span> Person(<span class="string">'Bill'</span>,<span class="number">20</span>);</div><div class="line">Person.prototype.getGreeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hi '</span>+ <span class="keyword">this</span>.getName()+<span class="string">'!'</span>;</div><div class="line">&#125;</div><div class="line">alice.displayGreeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.getGreeting);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承在JavaScript中不像在别的面向对象语言中那样简单<br>JavaScript使用的是基于对象的继承<br>它也可以用来模仿基于类的继承<br>Es6中新增了extends实现继承<br>后面会有文章相信讲讲继承</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我看来前端(Js)就好比是个剑客江湖&lt;br&gt;江湖中有人练react宝典，有人练vue神功&lt;br&gt;有人锻造webpack利剑&lt;br&gt;…&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="//blog.fenghou.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>从实时聊天谈谈通信协议</title>
    <link href="//blog.fenghou.site/2016/12/26/2016-12-26-%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9%E8%B0%88%E8%B0%88%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    <id>//blog.fenghou.site/2016/12/26/2016-12-26-实时聊天谈谈通信协议/</id>
    <published>2016-12-26T11:08:20.000Z</published>
    <updated>2017-03-15T12:02:03.382Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端开发人员<br>了解前后端通信协议还是很必须的<br>尤其是在用Node写服务端的时候<br>对于请求的响应处理和返回有很大的帮助<br><a id="more"></a><br>客户端与服务端的通信协议有HTTP(HTTPS)协议和WebSocket协议<br>HTTP协议是无状态的，服务端进行处理返回response后很难主动向客户端发送数据<br>WebSocket协议实现了客户端与服务端的全双工通信<br>扩展了客户端与服务端的通信功能<br>使服务端也能主动向客户端发送数据<br>在WebSocket协议提出之前<br>要实现即时通信、实时数据这样的功能，经常会使用轮询(polling)和Comet技术</p>
<p>轮询是最原始的实现实时Web应用的解决方案。<br>轮询技术要求客户端以设定的时间间隔周期性地向服务端发送请求，频繁地查询是否有新的数据改动。<br>明显地，这种方法会导致过多不必要的请求，浪费流量和服务器资源</p>
<p>Comet技术又可以分为长轮询和流技术。<br>长轮询改进了上述的轮询技术，减小了无用的请求。<br>它会为某些数据设定过期时间，当数据过期后才会向服务端发送请求；<br>这种机制适合数据的改动不是特别频繁的情况。<br>流技术通常是指客户端使用一个隐藏的窗口与服务端建立一个HTTP长连接，<br>服务端会不断更新连接状态以保持HTTP长连接存活；<br>这样的话，服务端就可以通过这条长连接主动将数据发送给客户端；<br>流技术在大并发环境下，可能会考验到服务端的性能。</p>
<p>WebSocket，真正实现了Web的实时通信</p>
<h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><p>HTTP(Hypertext Transfer Protocol 超文本传输协议)是一个基于请求与响应模式的、无状态的、应用层的协议<br>HTTP限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接<br>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。<br>缺少状态意味着如果后续处理需要前面的信息，则它必须重传，<br>这样可能导致每次连接传送的数据量增大。<br>另一方面，在服务器不需要先前信息时它的应答就较快。</p>
<blockquote>
<p>HTTP的常用请求方法<br>  GET 请求获取Request-URI所标识的资源<br>  POST 在Request-URI所标识的资源后附加新的数据<br>  HEAD 请求获取由Request-URI所标识的资源的响应消息报头<br>  请求和响应都包含请求头或响应头header和可选的请求体或响应体Body(自由的文本)<br>  只有POST请求包含一个Body<br>  Content-type常用的MiME类型<br>  application/x-wwwform-urlencoded 经过编码的键值对请求字符串(Body)，web服务器需要解码字符串获得参数<br>  text/xml,application/xml Body是XML文档<br>  text/plain 普通文本<br>  text/html, text/xhtml Body是(X)HTML内容，web服务器端发送的标准web页面或内容片段<br>  text/javascript Body是一段JavaScript代码<br>  image/png, image/jpeg, image/gif：Body是二进制图像</p>
</blockquote>
<h3 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h3><p>HTTPS(Secure Hypertext Transfer Protocol 安全超文本传输协议)<br>是一个安全通信通道，它基于HTTP开发，用于在客户计算机和服务器之间交换信息。<br>它使用安全套接字层(SSL)进行信息交换，简单来说它是HTTP的安全版。<br>HTTP协议是不安全的，可以轻松对窃听你跟 Web 服务器之间的数据传输<br>在很多情况下，客户和服务器之间传输的是敏感信息，需要防止未经授权的访问</p>
<p>HTTPS协议在TCP协议上加了层SSL协议</p>
<blockquote>
<p>网络七层协议<br>  应用层 Http Https<br>  表示层 SSL TLS<br>  会话层<br>  传输层 TCP<br>  网络层 IP<br>  数据链路层<br>  物理层</p>
</blockquote>
<p>SSL 包含如下动作：<br>1.验证服务器端<br>2.允许客户端和服务器端选择加密算法和密码，确保双方都支持<br>3.验证客户端(可选)<br>4.使用公钥加密技术来生成共享加密数据<br>5.创建一个加密的 SSL 连接<br>6.基于该 SSL 连接传递 HTTP 请求</p>
<h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>TCP(Transmission Control Protocol 传输控制协议)是一种面向连接的、可靠的、基于字节流的传输层通信协议<br>连接时三次握手<br>第一次Client端发送SYN报文请求连接<br>第二次Server端接受连接后回复ACK报文，并且为这次连接分配资源<br>第三次Client端接收ACK报文后向Server端发送ACK报文，并分配资源<br>TCP连接建立</p>
<p>断开时四次握手<br>第一次Client发起中断连接，发送FIN报文<br>第二次Server端接到FIN报文后，发送ACK报文，(可能还有数据没有传输完)，Client进入FIN_WAIT状态<br>第三次Server端确定数据已经发送完成，则向Client端发送FIN报文，准备好关闭连接<br>第四次Client端接收FIN报文,知道可以关闭连接，但不相信网络,怕Server端不知道要关闭，发送ACK报文，并进入TIME_WAIT状态<br>Server端收到ACK报文后断开连接<br>Client端等待了一定时间(依赖实现方法)后，没有收到Server回复，表示Server端已正常关闭，Client端也关闭链接<br>TCP连接关闭</p>
<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX (Asynchronous Javascript And XML 异步JavaScript和XML)，是指一种创建交互式网页应用的网页开发技术。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求</div><div class="line">* method：请求的类型；GET 或 POST</div><div class="line">* url：文件在服务器上的位置</div><div class="line">* async：true（异步）或 false（同步）</div><div class="line">*</div><div class="line">* send(string) 将请求发送到服务器</div><div class="line">* string：仅用于 POST 请求</div><div class="line">*</div><div class="line">* setRequestHeader(header,value) 向请求添加 HTTP 头</div><div class="line">* header: 规定头的名称</div><div class="line">* value: 规定头的值</div><div class="line">*</div><div class="line">* responseText	获得字符串形式的响应数据。</div><div class="line">* responseXML	获得XML形式的响应数据。</div><div class="line">*</div><div class="line">* onreadystatechange 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数</div><div class="line">*</div><div class="line">* readyState 存有 XMLHttpRequest 的状态 从 0 到 4 发生变化</div><div class="line">* 0: 请求未初始化</div><div class="line">* 1: 服务器连接已建立</div><div class="line">* 2: 请求已接收</div><div class="line">* 3: 请求处理中</div><div class="line">* 4: 请求已完成，且响应已就绪</div><div class="line">*</div><div class="line">* status</div><div class="line">* 200: "OK"</div><div class="line">* 404: 未找到页面</div><div class="line">* */</div><div class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xmlhttp.open(<span class="string">'POST'</span>,url,<span class="literal">true</span>);</div><div class="line">xmlhttp.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">xmlhttp.send(<span class="string">'page=2&amp;size=10'</span>);</div><div class="line">xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xmlhttp.readystate == <span class="number">4</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(xmlhttp.status == <span class="number">200</span>)&#123;</div><div class="line">            <span class="built_in">console</span>.log(xmlhttp.responseText);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//异常</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>websocket协议本质上是一个基于TCP的协议<br>是先通过HTTP/HTTPS协议发起一条特殊的HTTP请求进行握手后创建一个用于交换数据的TCP连接<br>此后服务端与客户端通过此TCP连接进行实时通信</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//客户端</span></div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8181/'</span>);</div><div class="line"><span class="comment">//连接发生错误的回调方法</span></div><div class="line">ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">//websocket 在任何时候都会处于下面4种状态中的其中一种</span></div><div class="line"><span class="comment">//CONNECTING (0) 表示还没建立连接</span></div><div class="line"><span class="comment">//OPEN (1)       已经建立连接，可以进行通讯</span></div><div class="line"><span class="comment">//CLOSING (2)    通过关闭握手，正在关闭连接</span></div><div class="line"><span class="comment">//CLOSED (3)     连接已经关闭或无法打开</span></div><div class="line"><span class="comment">//WebSocket.OPEN = 1;</span></div><div class="line"><span class="comment">//连接成功建立的回调方法</span></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(ws.readyState === <span class="number">1</span>)&#123;</div><div class="line">        wsSend(<span class="string">'msg'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//接收到消息的回调方法</span></div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">//e.data</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//连接关闭的回调方法</span></div><div class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsSend</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">    ws.send(rs);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsEnd</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ws.close();</div><div class="line">&#125;</div><div class="line"><span class="comment">//服务端(Node)</span></div><div class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server,</div><div class="line">    ws = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8181</span> &#125;),</div><div class="line">    clients = [],</div><div class="line">    clientNum = <span class="number">0</span>;</div><div class="line">ws.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>)</span>&#123;</div><div class="line">    clientNum ++;</div><div class="line">    clients.push(&#123;<span class="string">'ws'</span>:ws&#125;);</div><div class="line">    ws.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">        wsSend(rs);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsSend</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;clients.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> clientSocket = clients[i].ws;</div><div class="line">        <span class="keyword">if</span> (clientSocket.readyState === <span class="number">1</span>) &#123;</div><div class="line">            clientSocket.send(<span class="built_in">JSON</span>.stringify(rs));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为前端开发人员&lt;br&gt;了解前后端通信协议还是很必须的&lt;br&gt;尤其是在用Node写服务端的时候&lt;br&gt;对于请求的响应处理和返回有很大的帮助&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
      <category term="http" scheme="//blog.fenghou.site/tags/http/"/>
    
      <category term="websocket" scheme="//blog.fenghou.site/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Git自动化部署</title>
    <link href="//blog.fenghou.site/2016/12/22/2016-12-22-git%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>//blog.fenghou.site/2016/12/22/2016-12-22-git自动化部署/</id>
    <published>2016-12-22T11:07:31.000Z</published>
    <updated>2017-03-15T12:05:00.350Z</updated>
    
    <content type="html"><![CDATA[<p>每次更新完博客,得先push到github上<br>然后在服务器上把代码pull下来部署<br><a id="more"></a></p>
<p>一开始 忍了<br>后来 够了</p>
<p>整理一下<br>需要的是本地push成功后服务器上能自动执行pull命令<br>那么问题就变成了如何响应每次的push操作?</p>
<h3 id="WebHooks"><a href="#WebHooks" class="headerlink" title="WebHooks"></a>WebHooks</h3><p>Webhook就是用户通过自定义回调函数的方式来改变Web应用的一种行为，<br>这些回调函数可以由不是该Web应用官方的第三方用户或者开发人员来维护，修改。<br>通过Webhook，你可以自定义一些行为通知到指定的URL去。</p>
<p>那么每次push时候接受到请求，然后执行pull脚本，问题就解决了</p>
<h3 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h3><p>github 支持webhook<br>在github项目中选择setting<br>webhooks<br>Payload URL 请求地址<br>Content type 请求类型<br>Secret 密文(请求之后用作校验)</p>
<h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>通过node接受请求作出响应</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</div><div class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/deploy'</span>, <span class="attr">secret</span>: <span class="string">''</span> &#125;)</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        res.statusCode = <span class="number">404</span></div><div class="line">        res.end(<span class="string">'no such location'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;).listen(<span class="number">8989</span>)</div><div class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</div><div class="line">&#125;)</div><div class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用pull脚本</span></div><div class="line">    process.exec(<span class="string">'git pull origin master'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (error !== <span class="literal">null</span>) &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'exec error: '</span> + error);</div><div class="line">            &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这个时候每次push的时候，会发送一个请求到 url:8989/deylop<br>通过node 服务会作出相应操作</p>
<h3 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h3><p>nginx 方向代理<br>将8989 代理到80端口</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">       listen <span class="number">80</span>;</div><div class="line">       server_name <span class="string">''</span>;</div><div class="line">       location /deploy &#123;</div><div class="line">               proxy_pass http:<span class="comment">//localhost:8989;</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>通过forever 启动node 服务</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次更新完博客,得先push到github上&lt;br&gt;然后在服务器上把代码pull下来部署&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
      <category term="git" scheme="//blog.fenghou.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>1px != 1px -- 移动端适配浅析</title>
    <link href="//blog.fenghou.site/2016/12/19/2016-12-19-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>//blog.fenghou.site/2016/12/19/2016-12-19-移动端适配/</id>
    <published>2016-12-19T11:06:45.000Z</published>
    <updated>2017-07-12T10:23:51.284Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/rem-dpr.png" alt="px"><br><a id="more"></a></p>
<p>css中我们一般使用px作为单位<br>在pc上css中的1个像素往往对应着电脑屏幕中的1个物理像素<br>这可能会给我们造成一个错觉<br>css中的像素等于设备的物理像素<br>但实际情况却并非如此<br>css中的像素只是一个抽象的单位<br>在不同的设备或不同的环境中<br>css中的1px所代表的设备物理像素是不同的</p>
<p>典型的就是retina屏</p>
<p>首先我们先了解几个概念</p>
<h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>viewport 是用户网页的可视区域<br>pc中就是屏幕宽度<br>移动设备中viewport(这个虚拟窗口)比屏幕宽 一般为980</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</div><div class="line">移动端布局viewport的宽度设为理想宽度</div><div class="line">layout viewport 默认的viewport 比屏幕宽 <span class="built_in">document</span>.documentElement.clientWidth</div><div class="line">visual viewport  浏览器可视区域的大小 <span class="built_in">window</span>.innerWidth</div><div class="line">ideal viewport 最适合移动设备的viewport</div><div class="line">width：控制 viewport 的大小，可以指定的一个值，如果 <span class="number">600</span>，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 <span class="number">100</span>% 时的 CSS 的像素）。</div><div class="line">height：和 width 相对应，指定高度。</div><div class="line">initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。</div><div class="line">maximum-scale：允许用户缩放到的最大比例。</div><div class="line">minimum-scale：允许用户缩放到的最小比例。</div><div class="line">user-scalable：用户是否可以手动缩放。</div></pre></td></tr></table></figure>
<h3 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h3><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元<br>在操作系统的调度下<br>每一个设备像素都有自己的颜色值和亮度值。</p>
<h3 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h3><p>设备独立像素(也叫密度无关像素)<br>可以认为是计算机坐标系统中得一个点<br>这个点代表一个可以由程序使用的虚拟像素(比如: css像素)<br>简单点就是屏幕宽高</p>
<h3 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h3><p>设备像素比 ＝ 物理像素 / 设备独立像素<br>5,6的dpr=2，1个css像素等于2个物理像素<br>6p的dpr=3,1个css像素等于3个物理像素</p>
<p>那首先我们在移动端布局，viewport肯定不能是默认的值<br>最终viewport宽度等于应该等于设备的宽度<br>我们的布局视图应该是 按照物理像素来布局<br>设备独立像素可获得<br>设备像素比 window.devicePixelRatio<br>现在假设 在iphone6上布局</p>
<p>此时dpr = 2,<br>dip = 375<br>物理像素应该是 dpr * dip = 750<br>div{<br>border-top:1px solid #000;<br>}<br>现在在页面上要实现一个1px的上边框<br>由于移动端布局viewport缩成设备宽度<br>而分辨率没有变<br>所以这时的1px会有2px的效果</p>
<p>这个时候可以手动将viewport 宽度设成物理像素的宽度，然后将整个页面缩小 dpr 倍</p>
<p>1px 的问题解决了，那如何解决在不同手机显示设计稿中的一个100x100的div<br>设计稿 750<br>其中div 100x100<br>750的设计稿对应的是iPhone6<br>结合上面viewport的缩放<br>div{<br>width:100px;<br>height:100px;<br>}<br>在6上跟设计稿是完全相同的<br>而在5(640)上会变大</p>
<p>这个时候可以通过rem在不同设备上动态计算出比例值</p>
<p>假设在750设计稿中 1rem = 100px<br>那么在640设计稿中 1rem = 640/750*100px<br>此时1rem 不管在5上还是6上显示都完全跟在设计稿中显示效果相同</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html</span></div><div class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</div><div class="line"><span class="comment">//动态计算rem</span></div><div class="line"><span class="keyword">var</span> domDocEL = <span class="built_in">window</span>.document.documentElement,</div><div class="line">    mateViewPort = <span class="built_in">window</span>.document.querySelector(<span class="string">'meta[name="viewport"]'</span>),</div><div class="line">    nBasePsdWidth = <span class="number">750</span> / <span class="number">100</span>,</div><div class="line">    nDpr = <span class="built_in">window</span>.devicePixelRatio,</div><div class="line">    nScale = <span class="number">1</span> / nDpr,</div><div class="line">    nLayout = domDocEL.clientWidth,</div><div class="line">    nRem = nLayout * nDpr / nBasePsdWidth;</div><div class="line">domDocEL.style.fontSize = rem +<span class="string">'px'</span>;</div><div class="line">mateViewPort.setAttribute(<span class="string">'content'</span>,<span class="string">'width='</span>+nDpr*nLayout+<span class="string">',initial-scale='</span>+nScale+<span class="string">',maximum-scale='</span>+nScale+<span class="string">',minimum-scale='</span>+nScale+<span class="string">',user-scalable=no'</span>);</div></pre></td></tr></table></figure>
<p>对于字体可以用写个mixin方法<br>根据不同的dpr设置字号</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@mixin px2rem($name,$px) &#123;</div><div class="line">   [data-dpr="2"] &amp; &#123;</div><div class="line">     #&#123;$name&#125;: $px*2/2+px;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>移动端布局将viewport设成物理像素的大小,然后在缩放为dpr的倒数倍。<br>dpr不存在？<br>简单点~~~<br>那就指定为1！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/rem-dpr.png&quot; alt=&quot;px&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="//blog.fenghou.site/tags/css/"/>
    
      <category term="rem" scheme="//blog.fenghou.site/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="//blog.fenghou.site/2016/12/18/2016-12-18-react/"/>
    <id>//blog.fenghou.site/2016/12/18/2016-12-18-react/</id>
    <published>2016-12-18T11:06:01.000Z</published>
    <updated>2017-10-31T09:47:38.079Z</updated>
    
    <content type="html"><![CDATA[<p>React相关-整理中<br><a id="more"></a></p>
<p>在props里使用 onClick={ this.handleClick.bind(this) }<br>或者 onClick={ (e) =&gt; this.handleClick(e) }<br>或者 onClick={ ::this.handleClick }<br>都会产生性能问题，所以现在eslint在语法检查时就会阻止这几种写法，<br>问题原因是每一次render的时候如果遇到这些写法，<br>都会重新用handleClick函数与this去绑定从而重新创建一个新的函数，影响性能。<br>如果使用下面的写法则不会每次都创建：<br>// 1.<br>constructor() {<br>this.handleClick = this.handleClick.bind(this);<br>}<br>handleClick(e) { / … / }<br>// 2.<br>handleClick = (e) =&gt; { / … / };</p>
<p>箭头函数不能用？<br>Parsing error: Unexpected token =<br>babel-eslint</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React相关-整理中&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="//blog.fenghou.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置</title>
    <link href="//blog.fenghou.site/2016/12/16/2016-12-16-webpack/"/>
    <id>//blog.fenghou.site/2016/12/16/2016-12-16-webpack/</id>
    <published>2016-12-16T11:05:13.000Z</published>
    <updated>2017-03-15T12:16:23.086Z</updated>
    
    <content type="html"><![CDATA[<p>关于webpack的教程网上一抓一大把<br>就不班门弄斧了<br>这里只是总结一些webpack的实用配置以及个人心得<br><a id="more"></a></p>
<h3 id="entry-amp-output"><a href="#entry-amp-output" class="headerlink" title="entry&amp;output"></a>entry&amp;output</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">enpty:&#123;</div><div class="line">    <span class="attr">index</span>:<span class="string">'./index.js'</span>,</div><div class="line">    <span class="attr">more</span>:[<span class="string">'./more2.js'</span>,<span class="string">'./more.js'</span>],</div><div class="line">    <span class="attr">vendor</span>: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-router'</span>]</div><div class="line">&#125;</div><div class="line">putput:&#123;</div><div class="line">    <span class="attr">path</span>:<span class="string">'./build'</span>,</div><div class="line">    <span class="attr">filename</span>:<span class="string">'[name]-[id].js'</span>,</div><div class="line">    <span class="attr">publicPath</span>:<span class="string">'/assets/'</span>,</div><div class="line">    <span class="attr">chunkFilename</span>:<span class="string">'[name]-[chunkhash]'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//[id], chunk的id</span></div><div class="line"><span class="comment">//[name] ,chunk名</span></div><div class="line"><span class="comment">//[hash], 编译哈希值</span></div><div class="line"><span class="comment">//[chunkhash] , chunk的hash值  根据模块内容</span></div><div class="line"><span class="comment">//output.publicPath：设置为想要的资源访问路径。</span></div><div class="line"><span class="comment">//访问时，则需要通过类似http://localhost:8080/asstes/index-1.js来访问资源，</span></div><div class="line"><span class="comment">//如果没有设置，则默认从站点根目录加载。</span></div><div class="line"><span class="comment">//filename应该比较好理解，就是对应于entry里面生成出来的文件名。比如：</span></div><div class="line">&#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="string">"index"</span>: <span class="string">"pages/index.jsx"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].min.js"</span>,</div><div class="line">        <span class="attr">chunkFilename</span>: <span class="string">"[name].min.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//生成出来的文件名为index.min.js。</span></div><div class="line"><span class="comment">//chunkname我的理解是未被列在entry中，</span></div><div class="line"><span class="comment">//却又需要被打包出来的文件命名配置。</span></div><div class="line"><span class="comment">//什么场景需要呢？我们项目就遇到过，在按需加载（异步）模块的时候，</span></div><div class="line"><span class="comment">//这样的文件是没有被列在entry中的，如使用CommonJS的方式异步加载模块：</span></div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"modules/tips.jsx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"modules/tips.jsx"</span>);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;, <span class="string">'tips'</span>);</div><div class="line"><span class="comment">//异步加载的模块是要以文件形式加载哦，</span></div><div class="line"><span class="comment">//所以这时生成的文件名是以chunkname配置的，</span></div><div class="line"><span class="comment">//生成出的文件名就是tips.min.js。</span></div><div class="line"><span class="comment">//（require.ensure() API的第三个参数是给这个模块命名，</span></div><div class="line"><span class="comment">//否则 chunkFilename: "[name].min.js" 中的 [name] 是一个自动分配的、可读性很差的id，</span></div><div class="line"><span class="comment">//这是我在文档很不起眼的地方788发现的。。。）</span></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">          <span class="attr">names</span>: [<span class="string">'vendor'</span>],</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">test: <span class="regexp">/\.(gif|jpg|png)$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'url-loader?limit=1024&amp;name=img/[name].[ext]'</span></div><div class="line"><span class="comment">//小于1024字节 采用base64</span></div><div class="line"><span class="comment">//大于1024字节 正常打包到output目录下img文件夹中</span></div></pre></td></tr></table></figure>
<h3 id="js-loader"><a href="#js-loader" class="headerlink" title="js-loader"></a>js-loader</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//babel</span></div><div class="line"> <span class="comment">//配置 .babelrc</span></div><div class="line"> <span class="comment">//.rc run command 程序启动阶段被调用</span></div><div class="line"> <span class="comment">//执行babal-loader时自动执行</span></div><div class="line"> &#123;</div><div class="line">   <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">   <span class="string">"plugins"</span>: [</div><div class="line">     <span class="string">"transform-class-properties"</span>,</div><div class="line">     <span class="string">"transform-runtime"</span></div><div class="line">   ]</div><div class="line"> &#125;</div><div class="line"> <span class="comment">//webpack.config.js</span></div><div class="line"> &#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">    <span class="attr">loader</span>:<span class="string">'babel'</span></div><div class="line"> &#125;,</div><div class="line"><span class="comment">//不使用.babelrc</span></div><div class="line"> &#123;</div><div class="line">   <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">   <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">   <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">   <span class="attr">query</span>: &#123;</div><div class="line">       <span class="attr">presets</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">       <span class="attr">plugins</span>: [</div><div class="line">           <span class="string">"transform-class-properties"</span>,</div><div class="line">           <span class="string">"transform-runtime"</span></div><div class="line">           ]</div><div class="line">        &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure>
<h3 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">   <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">   <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">   <span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,</div><div class="line">   <span class="attr">loader</span>:<span class="string">'vue'</span>,</div><div class="line">&#125;</div><div class="line">babel: &#123;</div><div class="line">        <span class="attr">presets</span>: [<span class="string">'es2015'</span>],</div><div class="line">        <span class="attr">plugins</span>: [<span class="string">"transform-class-properties"</span>,</div><div class="line">                  <span class="string">"transform-runtime"</span>]</div><div class="line">&#125;,</div><div class="line"><span class="attr">vue</span>:&#123;</div><div class="line">    <span class="attr">loaders</span>:&#123;</div><div class="line">       <span class="attr">js</span>:<span class="string">'babel'</span>,</div><div class="line">       <span class="attr">scss</span>:[<span class="string">'vue-style-loader'</span>,<span class="string">'css'</span>,<span class="string">'sass'</span>].join(<span class="string">'!'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><p>loader 采取管道流</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loader: [<span class="string">'style'</span>,<span class="string">'css'</span>,<span class="string">'scss'</span>].join(<span class="string">'!'</span>)</div></pre></td></tr></table></figure>
<p>提取样式到单独文件<br>插件 extract-text-webpack-plugin</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line">&#123;</div><div class="line">   <span class="attr">test</span>: <span class="regexp">/\.(scss|sass|css)$/</span>,</div><div class="line">   <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>)</div><div class="line">&#125;</div><div class="line">plugins: [</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>)</div><div class="line">        <span class="comment">//output目录下</span></div><div class="line">  ],</div></pre></td></tr></table></figure>
<p>css样式自动 fix<br>插件 autoprefixer(postcss插件)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.(scss|sass|css)$/</span>,</div><div class="line">    <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, [<span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span>])</div><div class="line"> &#125;</div><div class="line"><span class="keyword">const</span> AUTOPREFIXER_BROWSERS = [</div><div class="line">    <span class="string">'Android &gt;= 4'</span>,</div><div class="line">    <span class="string">'Chrome &gt;= 35'</span>,</div><div class="line">    <span class="string">'Firefox &gt;= 31'</span>,</div><div class="line">    <span class="string">'Explorer &gt;= 9'</span>,</div><div class="line">    <span class="string">'iOS &gt;= 7'</span>,</div><div class="line">    <span class="string">'Opera &gt;= 12'</span>,</div><div class="line">    <span class="string">'Safari &gt;= 7.1'</span></div><div class="line">]</div><div class="line"> postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> [autoprefixer(&#123; <span class="attr">browsers</span>: AUTOPREFIXER_BROWSERS &#125;)];</div><div class="line">   &#125;,</div></pre></td></tr></table></figure>
<h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.(woff|svg|eot|ttf).$/</span>,</div><div class="line">      <span class="attr">loader</span>: <span class="string">"file-loader?name=fonts/[name].[ext]"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</div><div class="line"><span class="comment">//编译很慢 也就是说，请求的是 moment 的源码。</span></div><div class="line"><span class="comment">//实际上，通过 NPM 安装 moment 的时候会同时安装 moment 的源码和压缩后的代码</span></div><div class="line"><span class="comment">//var moment = require('moment/min/moment-with-locales.min.js');</span></div><div class="line"><span class="comment">//只不过这样改，可读性会有所下降，</span></div><div class="line"><span class="comment">//而且每一个用到 moment 的地方都得这么写。</span></div><div class="line"><span class="comment">//另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。</span></div><div class="line"><span class="comment">//下面来看看用 Webpack 怎么解决这个问题。</span></div><div class="line"> resolve: &#123;</div><div class="line">     <span class="attr">alias</span>: &#123;</div><div class="line">         <span class="attr">moment</span>: <span class="string">"moment/min/moment-with-locales.min.js"</span></div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//可以用 alias 指定从非npm引入的库，如</span></div><div class="line">jquery: path.resolve(__dirname, <span class="string">'./bower_components/jquery/dist/jquery.js'</span>) ，</div><div class="line">这样在 <span class="keyword">import</span> 时可以替换引用路径</div><div class="line"><span class="comment">// require时省略的扩展名，如：require('app') 不需要app.js</span></div><div class="line">extensions: [<span class="string">''</span>,<span class="string">'.js'</span>,<span class="string">'.vue'</span>,<span class="string">'.scss'</span>],</div></pre></td></tr></table></figure>
<h3 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h3><p>module.noParse 是 webpack 的另一个很有用的配置项，<br>如果你 确定一个模块中没有其它新的依赖 就可以配置这项，<br>webpack 将不再扫描这个文件中的依赖。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">   <span class="attr">noParse</span>: [<span class="regexp">/moment-with-locales/</span>]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>通常，JavaScript的解释器会告诉你，第几行第几列代码出错。<br>但是，这对于转换后的代码毫无用处。<br>举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。<br>你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。<br>这就是Source map想要解决的问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool: <span class="string">'#source-map'</span></div></pre></td></tr></table></figure>
<h3 id="hot-reload"><a href="#hot-reload" class="headerlink" title="hot reload"></a>hot reload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package.json</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline"</span>,</div><div class="line">    &#125;,</div><div class="line">--content-base 内容基本路径 不加默认当前目录</div><div class="line">--colors       输出加颜色</div><div class="line">path: <span class="string">"./dist"</span>,</div><div class="line"><span class="attr">filename</span>: <span class="string">"[name].js"</span>,</div><div class="line"><span class="attr">publicPath</span>: <span class="string">"abababab"</span>,</div><div class="line">publicPath 必须设置 这里设置什么名 html里引用就写什么名字</div><div class="line">&lt;script src=<span class="string">"/abababab/main.js"</span>&gt;&lt;/script&gt;</div><div class="line">npm run dev</div></pre></td></tr></table></figure>
<h3 id="webpack-w"><a href="#webpack-w" class="headerlink" title="webpack -w"></a>webpack -w</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webstrom 会在临时文件夹中创建一个文件用来保存(好像没有出发实际文件的变更)</span></div><div class="line">setting</div><div class="line">Appearance &amp; Behavior</div><div class="line">System Settings</div><div class="line">Use <span class="string">"safe write"</span>(save changes to a temporary file first) 勾去掉</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于webpack的教程网上一抓一大把&lt;br&gt;就不班门弄斧了&lt;br&gt;这里只是总结一些webpack的实用配置以及个人心得&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="//blog.fenghou.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>学点运维，配个服务器</title>
    <link href="//blog.fenghou.site/2016/12/15/2016-12-15-aliyun-yunwei/"/>
    <id>//blog.fenghou.site/2016/12/15/2016-12-15-aliyun-yunwei/</id>
    <published>2016-12-15T11:04:25.000Z</published>
    <updated>2018-01-09T08:13:42.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://imgs.ebrun.com/resources/2016_11/2016_11_23/2016112329114798900788972.png" alt="aliyun"><br><a id="more"></a></p>
<p>前段时间和同事合租了一个阿里云服务器，60几块钱一个月。<br>服务器上的资源环境很多都是他配的，<br>作为前端，只是在上面放点静态的东西，也没太大兴趣在这方面去摸索<br>然后这货今天离职了。</p>
<p>走之前，悠悠然发了我一个连接<br>阿里云搞活动 服务器免费赠送6个月</p>
<p>果断入手(要买个9块钱的套餐)<br>然后<br>买域名<br>解析DNS<br>配nginx<br>装git<br>搭node</p>
<p>也算是小入门了</p>
<hr>
<p>But 我想说的是<br>作为一个开发人员and 一个合格的开发人员<br>首先具备的应该是解决问题，查找问题的能力</p>
<p>而不是一有问题不假思索的问别人<br>有时候多学一样本领,就早说一句求人的话</p>
<p>作为我们作为初学者<br>总会碰到各种各样的问题<br>那么，怎么解决？</p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>linux git的安装</p>
<p>忽略前面下载解压过程</p>
<blockquote>
<p>./configure –prefix=/usr/local<br>  make &amp; make install</p>
</blockquote>
<p>果断报错。。<br>OK 下载各种依赖<br>报错<br>继续<br>安装成功<br>git –version<br>嗯 有版本号<br>easy嘛<br>然后 来 git clone ..<br>error:fatal: Unable to find remote helper for ‘https’<br>又报错，奔溃</p>
<p>这是因为Git环境没有安装完全，需要重新安装</p>
<blockquote>
<p>./configure –prefix=/usr/local<br>  make all doc<br>  make install install-doc install-man install-html</p>
</blockquote>
<p>继续 OK<br>问题解决</p>
<blockquote>
<p>1、查看当前git版本：git –version<br>  查看最新版git：访问<a href="https://www.kernel.org/pub/software/scm/git/" target="_blank" rel="external">https://www.kernel.org/pub/software/scm/git/</a><br>  或者<a href="https://github.com/git/git/releases" target="_blank" rel="external">https://github.com/git/git/releases</a><br>  2、官网下载：<br>  wget <a href="https://Github.com/Git/Git/archive/v2.11.0.tar.gz" target="_blank" rel="external">https://Github.com/Git/Git/archive/v2.11.0.tar.gz</a><br>  （建议本机迅雷下载rz到服务器,安装yum install lrzsz后rz即可）<br>  解压：tar -zxvf git-2.11.0.tar.gz<br>  3、cd git-2.11.0<br>  4、移除旧版本git：yum remove git<br>  5、make configure<br>  如果报错/bin/sh: autoconf: command not found：<br>  安装libtool即可：yum install install autoconf automake libtool<br>  正常会打印：GEN configure<br>  执行<br>  6、./configure –prefix=/usr/local/git –with-iconv =/usr/local/lib（建议优先尝试后者）<br>  或者<br>  ./configure –prefix=/usr/local/git –with-iconv –with-curl –with-expat=/usr/local/lib（如果没有安装libiconv请自行安装）<br>  make &amp;&amp; make install<br>  ①如果报错：cache.h:40:18: fatal error: zlib.h: No such file or directory<br>  安装zlib：yum install zlib、yum install zlib-devel<br>  ②如果报错：make[1]: <em>*</em> [perl.mak] Error 2<br>  安装：yum install perl-ExtUtils-MakeMaker package<br>  7、echo “export PATH=$PATH:/usr/local/git/bin” &gt;&gt; /etc/bashrc<br>  8、source /etc/bashrc<br>  9、git –version<br>  编译git时报错： zlib.h: No such file or directory<br>      缺少 zlib的头文件， 开发包没装，<br>      yum install zlib （系统默认已经装上）<br>      yum install zlib-devel<br>  git clone时候提示fatal: Unable to find remote helper for ‘https’<br>  yum install libcurl-devel<br>  然后按照上诉步骤重新安装编译git即可</p>
</blockquote>
<p>from <a href="http://blog.csdn.net/u010887744/article/details/53957613" target="_blank" rel="external">Linux安装最新版git</a><br>那么这解决问题的过程 就比解决问题来的跟有用<br>前提是问题是你自己解决的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://imgs.ebrun.com/resources/2016_11/2016_11_23/2016112329114798900788972.png&quot; alt=&quot;aliyun&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
      <category term="linux" scheme="//blog.fenghou.site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>In city</title>
    <link href="//blog.fenghou.site/2016/12/14/2016-12-14-incity/"/>
    <id>//blog.fenghou.site/2016/12/14/2016-12-14-incity/</id>
    <published>2016-12-14T11:03:52.000Z</published>
    <updated>2017-03-15T12:21:11.534Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/city.jpg" alt="city"></p>
<a id="more"></a>
<p>悠然<br>随心<br>随性<br>随缘</p>
<p>杭州，省会<br>美丽的西湖（我也只去过西湖。。）<br>一年前，在这<br>我开启了前端之旅</p>
<p>那谁说过，在风口，是只猪也能飞起来。<br>何况是在杭州这样的互联网台风中。。</p>
<p>但是风过了，依然在飞的却是鹰</p>
<p>麻雀从不担心树枝会断<br>因为他相信的不是树枝<br>而是自己的翅膀</p>
<p>身处互联网大时代<br>机会很多，机遇很多<br>首先飞起来<br>然后去充实自己<br>不断学习不断进步</p>
<p>最后<br>风即使过了<br>我们也进化成了鹰</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/city.jpg&quot; alt=&quot;city&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="//blog.fenghou.site/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Node-Spider</title>
    <link href="//blog.fenghou.site/2016/12/13/2016-12-13-node-spider/"/>
    <id>//blog.fenghou.site/2016/12/13/2016-12-13-node-spider/</id>
    <published>2016-12-13T11:03:06.000Z</published>
    <updated>2017-11-09T08:15:27.283Z</updated>
    
    <content type="html"><![CDATA[<p>Node学习入门，练习爬虫再适合不过了<br>这里通过爬区某图片网站近(10万张图片)的例子，介绍爬虫的过程<br><a id="more"></a></p>
<h3 id="爬虫分析设计"><a href="#爬虫分析设计" class="headerlink" title="爬虫分析设计"></a>爬虫分析设计</h3><p>抓取的是 ‘<a href="http://www.mzitu.com‘" target="_blank" rel="external">http://www.mzitu.com‘</a> 网站<br>图片大致有五个类目<br>每个类目下分页规则<br><a href="http://www.mzitu.com/类目/page/1" target="_blank" rel="external">http://www.mzitu.com/类目/page/1</a><br><a href="http://www.mzitu.com/类目/page/2" target="_blank" rel="external">http://www.mzitu.com/类目/page/2</a></p>
<p>每一个有25个专题<br>专题详情页 <a href="http://www.mzitu.com/专题id" target="_blank" rel="external">http://www.mzitu.com/专题id</a><br>专题详情页分页规则<br><a href="http://www.mzitu.com/专题id/1" target="_blank" rel="external">http://www.mzitu.com/专题id/1</a><br><a href="http://www.mzitu.com/专题id/2" target="_blank" rel="external">http://www.mzitu.com/专题id/2</a></p>
<p>因此第一次鉴于此 爬虫设计如下<br>先获取单个类目下专题(图片和Id)<br>专题图片根据 类目/当前page数/图片 路径保存<br>将获取的id暂存<br>知道获取完全部全部类目专题<br>然后开始获取专题详情<br>确定要获取的专题详情的所有分页数<br>最后爬区所有分页数</p>
<h3 id="用到的模块"><a href="#用到的模块" class="headerlink" title="用到的模块"></a>用到的模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>); <span class="comment">//请求封装模块</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);  <span class="comment">//并发控制模块</span></div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>); <span class="comment">//抓取页面dom节点模块</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div></pre></td></tr></table></figure>
<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sUrl = <span class="string">'http://www.mzitu.com'</span>; <span class="comment">//爬取目标</span></div><div class="line"><span class="keyword">var</span> aItems = []; <span class="comment">//单个类目下需要爬取的链接</span></div><div class="line"><span class="keyword">var</span> aTagList = [<span class="string">'/'</span>,<span class="string">'/xinggan'</span>,<span class="string">'/japan'</span>,<span class="string">'/taiwan'</span>,<span class="string">'/mm'</span>]; <span class="comment">//所有类目</span></div><div class="line"><span class="keyword">var</span> aDirList = [<span class="string">'index'</span>,<span class="string">'xinggan'</span>,<span class="string">'japan'</span>,<span class="string">'taiwan'</span>,<span class="string">'mm'</span>]; <span class="comment">//爬取存放路径</span></div><div class="line"><span class="keyword">var</span> nCurrentTag = <span class="number">0</span>; <span class="comment">//当前爬取类目</span></div><div class="line"><span class="keyword">var</span> aIdList = []; <span class="comment">//专题Id</span></div><div class="line"><span class="keyword">var</span> aNextPage = []; <span class="comment">//专题详情</span></div><div class="line"><span class="keyword">var</span> aNxtItems = []; <span class="comment">//专题详情下需要爬区的链接</span></div></pre></td></tr></table></figure>
<h3 id="获取所有专题"><a href="#获取所有专题" class="headerlink" title="获取所有专题"></a>获取所有专题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">    superagent</div><div class="line">            .get(page)</div><div class="line">            .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, response</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">                    <span class="built_in">console</span>.log(err.status);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</div><div class="line">                    <span class="keyword">var</span> $ = cheerio.load(response.text);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> nPageLen = $(<span class="string">'.nav-links a.next'</span>).prev().text();  <span class="comment">// 获取页数</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; nPageLen ;i++)&#123;</div><div class="line">                    aItems.push(page+<span class="string">'/page/'</span>+(i+<span class="number">1</span>));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> sName = page.replace(<span class="string">'http://www.mzitu.com'</span>,<span class="string">''</span>);</div><div class="line">                sName = sName ? sName : <span class="string">'index'</span>;</div><div class="line">                <span class="comment">// 新建类目 存放目录</span></div><div class="line">                fs.mkdir(__dirname+<span class="string">'/uploa/'</span>+sName.replace(<span class="string">'/'</span>,<span class="string">''</span>),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(err)&#123;</div><div class="line">                        <span class="keyword">throw</span> err</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                fetchPage();</div><div class="line">            &#125;);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchPage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> concurrencyCount = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> fetchUrl = <span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> fetchStart = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">        concurrencyCount++;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'并发数'</span>+concurrencyCount+<span class="string">'====url:'</span>+url);</div><div class="line">        superagent.get(url)</div><div class="line">            .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(err)&#123;</div><div class="line">                    <span class="comment">// callback(err,url);</span></div><div class="line">                    <span class="comment">// return next(err);</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - fetchStart;</div><div class="line">                <span class="comment">// console.log('抓取'+url+'成功,耗时'+time)</span></div><div class="line">                concurrencyCount--;</div><div class="line">                <span class="keyword">if</span>(res.status === <span class="number">200</span>)&#123;</div><div class="line">                    <span class="keyword">var</span> $ = cheerio.load(res.text);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//爬取数据处理</span></div><div class="line">                getDetail($,url,<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">                    <span class="comment">// _html += rs;</span></div><div class="line">                &#125;)</div><div class="line">                callback();</div><div class="line">            &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 控制并发数</span></div><div class="line">    <span class="keyword">async</span>.mapLimit(aItems,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">myUrl,callback</span>)</span>&#123;</div><div class="line">        fetchUrl(myUrl,callback);</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">        nCurrentTag++;</div><div class="line">        <span class="keyword">if</span>(nCurrentTag &lt; aTagList.length)&#123;</div><div class="line">            <span class="comment">// console.log('====================开始抓取下一个类目====================');</span></div><div class="line">            aItems = [];</div><div class="line">            start(sUrl+aTagList[nCurrentTag]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'====================开始抓取详情页========================='</span>);</div><div class="line">            <span class="comment">// getNextPage();</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetail</span>(<span class="params">$,url,callback</span>)</span>&#123;</div><div class="line">    <span class="comment">//确定图片名称</span></div><div class="line">    <span class="keyword">var</span> dirList = url.replace(<span class="string">'http://www.mzitu.com/'</span>,<span class="string">''</span>).split(<span class="string">'/'</span>);</div><div class="line">    <span class="keyword">var</span> dirName = dirList[<span class="number">0</span>]+<span class="string">'/'</span>+dirList[<span class="number">1</span>]+dirList[<span class="number">2</span>];</div><div class="line">    <span class="keyword">if</span>(dirList.length &lt; <span class="number">3</span>)&#123;</div><div class="line">       dirName = <span class="string">'index/'</span>+dirList[<span class="number">0</span>]+dirList[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> domItemA = $(<span class="string">'#pins li a'</span>); <span class="comment">// 获取Id</span></div><div class="line">    <span class="keyword">var</span> domItem = $(<span class="string">'#pins li a img'</span>); <span class="comment">//获取图片</span></div><div class="line">    <span class="keyword">var</span> srcList = []</div><div class="line">    domItem.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx,element</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> $ele = $(element);</div><div class="line">        <span class="keyword">var</span> src = $ele.attr(<span class="string">'data-original'</span>);</div><div class="line">        <span class="keyword">var</span> id = $ele.parent().attr(<span class="string">'href'</span>).replace(<span class="string">'http://www.mzitu.com/'</span>,<span class="string">''</span>);</div><div class="line">        aSrcList.push(src);</div><div class="line">        aIdList.push(id);</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 下载专题图片</span></div><div class="line">    downImg(aSrcList,dirName);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">downImg</span>(<span class="params">list,dirName</span>)</span>&#123;</div><div class="line">    fs.mkdir(__dirname+<span class="string">'/upload/'</span>+dirName,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;</div><div class="line">            <span class="keyword">throw</span> err</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">var</span> savePath = __dirname+<span class="string">'/uploa/'</span>+dirName+<span class="string">'/'</span> + narr[<span class="number">0</span>]  +<span class="string">'_'</span>+ narr[<span class="number">1</span>] + <span class="string">'_'</span> + narr[<span class="number">2</span>];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">binaryParser</span>(<span class="params">res, callback</span>) </span>&#123;</div><div class="line">            res.setEncoding(<span class="string">'binary'</span>);</div><div class="line">            <span class="keyword">var</span> imgData = <span class="string">''</span>;</div><div class="line">            res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">                imgData += chunk;</div><div class="line">            &#125;);</div><div class="line">            res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                fs.writeFile(savePath, <span class="keyword">new</span> Buffer(imgData, <span class="string">'binary'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">                            <span class="keyword">if</span>(err) &#123;</div><div class="line">                                <span class="built_in">console</span>.log(err);</div><div class="line">                            &#125;</div><div class="line">                            <span class="built_in">console</span>.log(url+<span class="string">'下载成功'</span>)</div><div class="line">                        &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">var</span> downUrl = <span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> narr = url.replace(<span class="string">"http://i.meizitu.net/thumbs/"</span>, <span class="string">""</span>).split(<span class="string">"/"</span>)</div><div class="line">        supergent.get(url)</div><div class="line">        <span class="comment">// .pipe(fs.createWriteStream(savePath))</span></div><div class="line">                .parse(binaryParser)</div><div class="line">                .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</div><div class="line">                &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">async</span>.mapLimit(list,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">myUrl,callback</span>)</span>&#123;</div><div class="line">        downUrl(myUrl,callback);</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node学习入门，练习爬虫再适合不过了&lt;br&gt;这里通过爬区某图片网站近(10万张图片)的例子，介绍爬虫的过程&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node-server</title>
    <link href="//blog.fenghou.site/2016/12/13/2016-12-13-node-server/"/>
    <id>//blog.fenghou.site/2016/12/13/2016-12-13-node-server/</id>
    <published>2016-12-13T11:02:26.000Z</published>
    <updated>2017-03-15T12:25:57.439Z</updated>
    
    <content type="html"><![CDATA[<p>用Node搭建一个静态资源访问服务器</p>
<a id="more"></a>
<p>用到的模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</div><div class="line">    url = <span class="built_in">require</span>(<span class="string">'url'</span>),</div><div class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div></pre></td></tr></table></figure>
<p>思路 获取访问路径，以文件后缀判断文件类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mimetype = &#123;</div><div class="line">    <span class="string">'txt'</span>: <span class="string">'text/plain'</span>,</div><div class="line">    <span class="string">'html'</span>: <span class="string">'text/html'</span>,</div><div class="line">    <span class="string">'css'</span>: <span class="string">'text/css'</span>,</div><div class="line">    <span class="string">'xml'</span>: <span class="string">'application/xml'</span>,</div><div class="line">    <span class="string">'json'</span>: <span class="string">'application/json'</span>,</div><div class="line">    <span class="string">'js'</span>: <span class="string">'application/javascript'</span>,</div><div class="line">    <span class="string">'jpg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">    <span class="string">'jpeg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">    <span class="string">'gif'</span>: <span class="string">'image/gif'</span>,</div><div class="line">    <span class="string">'png'</span>: <span class="string">'image/png'</span>,</div><div class="line">    <span class="string">'svg'</span>: <span class="string">'image/svg+xml'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取请求的时候判断请求文件是否存在，决定返回的类型</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(req.url).pathname,</div><div class="line">        realPath = path.join(__dirname,<span class="string">'/static'</span>,pathname);</div><div class="line">    <span class="keyword">var</span> body = [];</div><div class="line">    req.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        body.push(data);</div><div class="line">    &#125;)</div><div class="line">    req.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        body = Buffer.concat(body);</div><div class="line">    &#125;)</div><div class="line">    fs.exists(realPath,<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(ex)&#123;</div><div class="line">            <span class="keyword">var</span> rs = fs.createReadStream(realPath);</div><div class="line">            res.writeHead(<span class="number">200</span>,&#123;</div><div class="line">                <span class="string">'Content-Type'</span>:mimetype[realPath.split(<span class="string">'.'</span>).pop()] || <span class="string">'text/plain'</span></div><div class="line">            &#125;)</div><div class="line">            rs.on(<span class="string">'data'</span>,res.write.bind(res))</div><div class="line">            rs.on(<span class="string">'close'</span>,res.end.bind(res));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            page_404(req,res,realPath); <span class="comment">//错误页面</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<p>请求不存在</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">page_404</span>(<span class="params">req,res,path</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">404</span>,&#123;</div><div class="line">        <span class="string">'Content-Type'</span>:<span class="string">'text/html'</span></div><div class="line">    &#125;)</div><div class="line">    res.write(<span class="string">'&lt;!doctype html&gt;\n'</span>);</div><div class="line">    res.write(<span class="string">'&lt;title&gt;404 Not Found&lt;/title&gt;\n'</span>);</div><div class="line">    res.write(<span class="string">'&lt;h1&gt;Not Found&lt;/h1&gt;'</span>);</div><div class="line">    res.write(</div><div class="line">        <span class="string">'&lt;p&gt;The requested URL '</span> +</div><div class="line">        path +</div><div class="line">        <span class="string">' was not found on this server.&lt;/p&gt;'</span></div><div class="line">    );</div><div class="line">    res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Node搭建一个静态资源访问服务器&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="//blog.fenghou.site/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法</title>
    <link href="//blog.fenghou.site/2016/12/12/2016-12-12-md-rule/"/>
    <id>//blog.fenghou.site/2016/12/12/2016-12-12-md-rule/</id>
    <published>2016-12-12T02:25:27.000Z</published>
    <updated>2017-11-02T02:45:19.116Z</updated>
    
    <content type="html"><![CDATA[<p>markdown 语法<br><a id="more"></a></p>
<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><hr>
<p><code>亮不亮</code></p>
<p><a href="http://blog.csdn.net/guodongxiaren" title="悬停显示" target="_blank" rel="external">我的博客</a></p>
<ul>
<li>ES<ul>
<li>JS<ul>
<li>JS1</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>数据结构</p>
<blockquote>
<p>树</p>
<blockquote>
<p>二叉树</p>
<blockquote>
<p>平衡二叉树</p>
<blockquote>
<p>满二叉树</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<table>
<thead>
<tr>
<th>第一格表头</th>
<th>第二格表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容单元格 第一列第一格</td>
<td>内容单元格第二列第一格</td>
</tr>
<tr>
<td>内容单元格 第一列第二格 多加文字</td>
<td>内容单元格第二列第二格</td>
</tr>
</tbody>
</table>
<p>加删除线像这样用： <del>删除这些</del></p>
<ul>
<li>[x] 支持 @提到某人、#引用、<a href="">链接</a>、<strong>格式化</strong> 和 <del>标签</del> 等语法</li>
<li>[x] 需要使用列表语法来激活（无序或有序列表均可）</li>
<li>[x] 这是一个已完成项目</li>
<li>[ ] 这是一个未完成项目</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown 语法&lt;br&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="//blog.fenghou.site/tags/markdown/"/>
    
  </entry>
  
</feed>
