[{"title":"Let Chat","date":"2016-12-26T04:20:16.000Z","path":"2016/12/26/websockt-chat-node/","text":"","tags":[{"name":"Node","slug":"Node","permalink":"https://luyi10year.github.io/tags/Node/"},{"name":"websocket","slug":"websocket","permalink":"https://luyi10year.github.io/tags/websocket/"}]},{"title":"Git自动化部署","date":"2016-12-22T09:42:46.000Z","path":"2016/12/22/automated-deployment/","text":"每次更新完博客,得先push到github上然后在服务器上把代码pull下来部署 一开始 忍了后来 够了 (码字太累，来首震撼的歌) 整理一下需要的是本地push成功后服务器上能自动执行pull命令那么问题就变成了如何响应每次的push操作? 监听Web Hooks Web Hoots","tags":[{"name":"Linux","slug":"Linux","permalink":"https://luyi10year.github.io/tags/Linux/"},{"name":"Git","slug":"Git","permalink":"https://luyi10year.github.io/tags/Git/"},{"name":"服务器","slug":"服务器","permalink":"https://luyi10year.github.io/tags/服务器/"}]},{"title":"谈谈","date":"2016-12-20T06:29:27.000Z","path":"2016/12/20/diary-2016-1220-1430/","text":"","tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://luyi10year.github.io/tags/杂谈/"}]},{"title":"1px != 1px -- 移动端适配浅析","date":"2016-12-19T09:28:08.000Z","path":"2016/12/19/rem-layout/","text":"viewport 物理像素(physical pixel) 设别像素，显示设备 设备独立像素(density-independent pixel) 设备像素比(device pixel ratio) 设备像素比 ＝ 物理像素 / 设备独立像素 data-dpr 12345@mixin px2rem($name,$px) &#123; [data-dpr=\"2\"] &amp; &#123; #&#123;$name&#125;: $px*2/2+px; &#125; &#125;","tags":[{"name":"Rem","slug":"Rem","permalink":"https://luyi10year.github.io/tags/Rem/"},{"name":"H5","slug":"H5","permalink":"https://luyi10year.github.io/tags/H5/"}]},{"title":"react","date":"2016-12-18T05:50:35.000Z","path":"2016/12/18/react/","text":"整理整理思绪","tags":[{"name":"react","slug":"react","permalink":"https://luyi10year.github.io/tags/react/"}]},{"title":"vue","date":"2016-12-17T05:50:25.000Z","path":"2016/12/17/vue/","text":"整理整理思绪","tags":[{"name":"vue","slug":"vue","permalink":"https://luyi10year.github.io/tags/vue/"}]},{"title":"webpack","date":"2016-12-16T06:29:27.000Z","path":"2016/12/16/webpack/","text":"entry output moduleloaders url-loader test: /.(gif|jpg|png)$/, loader: ‘url-loader?limit=1024&amp;name=img/[name].[ext]’ 小于1024字节 采用base64 大于1024字节 正常打包到output目录下img文件夹中 js-loader babel 配置 .babelrc .rc run command 程序启动阶段被调用 执行babal-loader时自动执行 12345678910111213&#123; \"presets\": [\"es2015\", \"stage-2\"], \"plugins\": [ \"transform-class-properties\", \"transform-runtime\" ]&#125;//webpack.config.js&#123; test: /\\.js$/, exclude: /node_modules/, loader:'babel'&#125;, 另一种 123456789101112&#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel', query: &#123; presets: [\"es2015\", \"stage-2\"], plugins: [ \"transform-class-properties\", \"transform-runtime\" ] &#125; &#125;, css-loader loader 采取管道流 1loader: ['style','css','scss'].join('!') 提取样式到单独文件 插件 extract-text-webpack-plugin 123456789101112var ExtractTextPlugin = require('extract-text-webpack-plugin');......&#123; test: /\\.(scss|sass|css)$/, loader: ExtractTextPlugin.extract('style-loader', 'css-loader')&#125;plugins: [ new ExtractTextPlugin('[name].css') //output目录下 ], css样式自动 fix 插件 autoprefixer(postcss插件) 12345678&#123; test: /\\.(scss|sass|css)$/, loader: ExtractTextPlugin.extract('style-loader', ['css-loader', 'postcss-loader']) &#125; postcss: function() &#123; return [autoprefixer]; &#125;, file-loader1234&#123; test: /\\.(woff|svg|eot|ttf).$/, loader: \"file-loader?name=fonts/[name].[ext]\"&#125; resolve别名 var moment = require(‘moment’);编译很慢 也就是说，请求的是 moment 的源码。实际上，通过 NPM 安装 moment 的时候会同时安装 moment 的源码和压缩后的代码var moment = require(‘moment/min/moment-with-locales.min.js’);只不过这样改，可读性会有所下降，而且每一个用到 moment 的地方都得这么写。另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。下面来看看用 Webpack 怎么解决这个问题。12345resolve: &#123; alias: &#123; moment: \"moment/min/moment-with-locales.min.js\" &#125; &#125; module.noParse 是 webpack 的另一个很有用的配置项，如果你 确定一个模块中没有其它新的依赖 就可以配置这项，webpack 将不再扫描这个文件中的依赖。123module: &#123; noParse: [/moment-with-locales/] &#125; 通常，JavaScript的解释器会告诉你，第几行第几列代码出错。但是，这对于转换后的代码毫无用处。举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。这就是Source map想要解决的问题。 devtool: ‘#source-map’, 多看文档！","tags":[{"name":"webpack","slug":"webpack","permalink":"https://luyi10year.github.io/tags/webpack/"}]},{"title":"学点运维，配个服务器","date":"2016-12-15T09:08:08.000Z","path":"2016/12/15/aliyun/","text":"前段时间和同事合租了一个阿里云服务器，60几块钱一个月。服务器上的资源环境很多都是他配的，作为前端，只是在上面放点静态的东西，也没太大兴趣在这方面去摸索然后这货今天离职了。 走之前，悠悠然发了我一个连接阿里云搞活动 传送门 服务器免费赠送6个月 果断入手(要买个9块钱的套餐) 然后买域名解析DNS配nginx装git搭node 也算是小入门了 But 我想说的是作为一个开发人员and 一个合格的开发人员首先具备的应该是解决问题，查找问题的能力 而不是一有问题不假思索的问别人有时候多学一样本领,就早说一句求人的话 作为我们作为初学者总会碰到各种各样的问题那么，怎么解决？ 举个栗子linux git的安装 忽略前面下载解压过程 ./configure –prefix=/usr/localmake &amp; make install 果断报错。。OK 下载各种依赖报错继续安装成功git –version嗯 有版本号easy嘛然后 来 git clone ..error:fatal: Unable to find remote helper for ‘https’又报错，奔溃 这是因为Git环境没有安装完全，需要重新安装 ./configure –prefix=/usr/localmake all docmake install install-doc install-man install-html 继续 OK问题解决 那么这解决问题的过程 就比解决问题来的跟有用前提是问题是你自己解决的","tags":[{"name":"Linux","slug":"Linux","permalink":"https://luyi10year.github.io/tags/Linux/"},{"name":"Git","slug":"Git","permalink":"https://luyi10year.github.io/tags/Git/"},{"name":"服务器","slug":"服务器","permalink":"https://luyi10year.github.io/tags/服务器/"}]},{"title":"In city","date":"2016-12-14T10:40:08.000Z","path":"2016/12/14/in-city/","text":"悠然随心随性随缘杭州，省会美丽的西湖（我也只去过西湖。。）一年前，在这我开启了前端之旅 那谁说过，在风口，是只猪也能飞起来。何况是在杭州这样的互联网台风中。。 但是风过了，依然在飞的却是鹰 麻雀从不担心树枝会断因为他相信的不是树枝而是自己的翅膀 身处互联网大时代机会很多，机遇很多首先飞起来然后去充实自己不断学习不断进步 最后风即使过了我们也进化成了鹰","tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://luyi10year.github.io/tags/杂谈/"}]},{"title":"Node","date":"2016-12-13T10:41:55.000Z","path":"2016/12/13/node/","text":"NodeNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 哈哈 先占上到时候再补","tags":[{"name":"Node","slug":"Node","permalink":"https://luyi10year.github.io/tags/Node/"}]}]